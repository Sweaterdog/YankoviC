==================================================
### FILE: ./uninstall.ps1
==================================================

# uninstall.ps1 - PowerShell uninstall script for YankoviC

Write-Host "Uninstalling YankoviC CLI..." -ForegroundColor Cyan

# Remove yankovic symlink from a common bin directory if it exists
$symlink = "/usr/local/bin/yankovic"
if (Test-Path $symlink) {
    try {
        Remove-Item $symlink -Force
        Write-Host "Removed symlink: $symlink" -ForegroundColor Yellow
    } catch {
        Write-Host "Failed to remove symlink: $symlink" -ForegroundColor Red
    }
} else {
    Write-Host "No yankovic symlink found at $symlink. Nothing to remove." -ForegroundColor Yellow
}

Write-Host "Uninstall complete!" -ForegroundColor Green


==================================================
### FILE: ./cli-graphics.js
==================================================

#!/usr/bin/env node
// CLI Graphics Renderer for YankoviC - UHF Broadcasting System
import { createCanvas } from 'canvas';
import fs from 'fs';
import open from 'open';
import path from 'path';
// ---> NEW: Import 'url' to help find our script's location
import { fileURLToPath } from 'url';


// UHF Channel modes for different display outputs
const UHF_CHANNELS = {
    HEADLESS: 'headless',  // UHF Channel 1 - No display (for testing/API)
    ASCII: 'ascii',        // UHF Channel 3 - ASCII art display in terminal
    PNG: 'png',           // UHF Channel 13 - Save as PNG files
    ELECTRON: 'electron'   // UHF Channel 62 - Standard Electron window
};

export class CLIGraphicsRenderer {
    constructor(width = 800, height = 600, channel = UHF_CHANNELS.ASCII) {
        this.width = width;
        this.height = height;
        this.canvas = createCanvas(width, height);
        this.ctx = this.canvas.getContext('2d');
        this.frameCount = 0;
        this.channel = channel;
        
        // YankoviC color constants
        this.colors = {
            AL_RED: '#FF0000',
            WHITE_ZOMBIE: '#FFFFFF', 
            BLACK_MAGIC: '#000000',
            SPAM_GREEN: '#00FF00',
            TWINKIE_GOLD: '#FFD700',
            ORANGE_CHEESE: '#FFA500',
            SKY_BLUE_FOR_YOU: '#87CEEB',
            SILVER_SPATULA: '#C0C0C0'
        };
        
        this.currentColor = '#FFFFFF';
        this.outputDir = './cli_output';
        
        // Ensure output directory exists only for PNG mode
        if (this.channel === UHF_CHANNELS.PNG) {
          if (!fs.existsSync(this.outputDir)) {
            fs.mkdirSync(this.outputDir, { recursive: true });
          }
        }
        
        // UHF Channel tuned - graphics system ready
    }
    
    getChannelNumber() {
        switch(this.channel) {
            case UHF_CHANNELS.HEADLESS: return 1;
            case UHF_CHANNELS.ASCII: return 3;
            case UHF_CHANNELS.PNG: return 13;
            case UHF_CHANNELS.ELECTRON: return 62;
            default: return 0;
        }
    }
    
    getChannelName() {
        switch(this.channel) {
            case UHF_CHANNELS.HEADLESS: return 'API Mode (No Display)';
            case UHF_CHANNELS.ASCII: return 'Terminal ASCII Display';
            case UHF_CHANNELS.PNG: return 'PNG File Output';
            case UHF_CHANNELS.ELECTRON: return 'Standard Display Mode';
            default: return 'Unknown Channel';
        }
    }
    
    // Execute a list of draw commands
    executeDrawCommands(commands = []) {
        this.lastCommandCount = commands.length;
        for (const cmd of commands) {
            this.executeCommand(cmd);
        }
    }
    
    executeCommand(cmd) {
        switch (cmd.command) {
            case 'start_show':
                this.startShow(cmd.args);
                break;
            case 'paint_set':
                this.paintTheSet(cmd.args);
                break;
            case 'pick_shirt':
                this.pickColor(cmd.args);
                break;
            case 'draw_spamsicle':
                this.drawRectangle(cmd.args);
                break;
            case 'draw_cheese':
                this.drawCircle(cmd.args);
                break;
            case 'print_string':
                this.drawText(cmd.args);
                break;
            case 'print_text':
                this.drawText(cmd.args);
                break;
            case 'draw_button':
                this.drawButton(cmd.args);
                break;
            case 'draw_checkbox':
                this.drawCheckbox(cmd.args);
                break;
            case 'draw_slider':
                this.drawSlider(cmd.args);
                break;
            case 'roll_the_camera':
                // Frame start - no action needed
                break;
            case 'render_frame':
                // Frame end - render frame
                this.renderFrame();
                break;
            case 'wait':
                // Wait command - no action needed in static renderer
                break;
            default:
                console.log(`[CLI Graphics] Unknown command: ${cmd.command}`);
        }
    }
    
    startShow(args) {
        const [width, height, title] = args;
        if (width && height) {
            this.width = width;
            this.height = height;
            this.canvas = createCanvas(width, height);
            this.ctx = this.canvas.getContext('2d');
        }
        console.log(`[CLI Graphics] Started show: ${title} (${this.width}x${this.height})`);
    }
    
    paintTheSet(args) {
        let [color] = args;
        
        // Handle case where color is an object (e.g., from YankoviC constants)
        if (typeof color === 'object' && color !== null && color.value) {
            color = color.value;
        }
        
        const bgColor = this.colors[color] || color || '#000000';
        this.ctx.fillStyle = bgColor;
        this.ctx.fillRect(0, 0, this.width, this.height);
    }
    
    pickColor(args) {
        let [color] = args;
        
        // Handle case where color is an object (e.g., from YankoviC constants)
        if (typeof color === 'object' && color !== null && color.value) {
            color = color.value;
        }
        
        this.currentColor = this.colors[color] || color || '#FFFFFF';
        this.ctx.fillStyle = this.currentColor;
        this.ctx.strokeStyle = this.currentColor;
    }
    
    drawRectangle(args) {
        const [x, y, width, height] = args;
        this.ctx.fillStyle = this.currentColor;
        this.ctx.fillRect(x || 0, y || 0, width || 10, height || 10);
    }
    
    drawCircle(args) {
        const [x, y, radius] = args;
        this.ctx.fillStyle = this.currentColor;
        this.ctx.beginPath();
        this.ctx.arc((x || 0) + (radius || 10), (y || 0) + (radius || 10), radius || 10, 0, 2 * Math.PI);
        this.ctx.fill();
    }
    
    drawText(args) {
        const [text, x, y] = args;
        this.ctx.fillStyle = this.currentColor;
        this.ctx.font = '16px Arial';
        this.ctx.fillText(text || '', x || 0, y || 16);
    }
    
    drawButton(args) {
        const [x, y, width, height, text, buttonId] = args;
        
        // Draw button background
        this.ctx.fillStyle = '#E0E0E0';
        this.ctx.fillRect(x || 0, y || 0, width || 100, height || 30);
        
        // Draw button border
        this.ctx.strokeStyle = '#808080';
        this.ctx.lineWidth = 2;
        this.ctx.strokeRect(x || 0, y || 0, width || 100, height || 30);
        
        // Draw button text
        this.ctx.fillStyle = '#000000';
        this.ctx.font = '14px Arial';
        this.ctx.textAlign = 'center';
        this.ctx.textBaseline = 'middle';
        this.ctx.fillText(text || '', (x || 0) + (width || 100) / 2, (y || 0) + (height || 30) / 2);
        
        // Reset text alignment
        this.ctx.textAlign = 'left';
        this.ctx.textBaseline = 'alphabetic';
    }
    
    drawCheckbox(args) {
        const [x, y, checked, label, checkboxId] = args;
        
        // Draw checkbox box
        this.ctx.fillStyle = '#FFFFFF';
        this.ctx.fillRect(x || 0, y || 0, 20, 20);
        this.ctx.strokeStyle = '#808080';
        this.ctx.lineWidth = 2;
        this.ctx.strokeRect(x || 0, y || 0, 20, 20);
        
        // Draw check mark if checked
        if (checked) {
            this.ctx.strokeStyle = '#000000';
            this.ctx.lineWidth = 3;
            this.ctx.beginPath();
            this.ctx.moveTo((x || 0) + 5, (y || 0) + 10);
            this.ctx.lineTo((x || 0) + 9, (y || 0) + 14);
            this.ctx.lineTo((x || 0) + 15, (y || 0) + 6);
            this.ctx.stroke();
        }
        
        // Draw label
        if (label) {
            this.ctx.fillStyle = '#000000';
            this.ctx.font = '14px Arial';
            this.ctx.fillText(label, (x || 0) + 25, (y || 0) + 15);
        }
    }
    
    drawSlider(args) {
        const [x, y, width, value, min, max, sliderId] = args;
        const sliderHeight = 20;
        const sliderWidth = width || 200;
        const normalizedValue = ((value || 0) - (min || 0)) / ((max || 100) - (min || 0));
        const thumbX = (x || 0) + normalizedValue * sliderWidth;
        
        // Draw slider track
        this.ctx.fillStyle = '#D0D0D0';
        this.ctx.fillRect(x || 0, (y || 0) + 8, sliderWidth, 4);
        
        // Draw slider thumb
        this.ctx.fillStyle = '#4080FF';
        this.ctx.fillRect(thumbX - 5, y || 0, 10, sliderHeight);
        this.ctx.strokeStyle = '#2060C0';
        this.ctx.lineWidth = 1;
        this.ctx.strokeRect(thumbX - 5, y || 0, 10, sliderHeight);
    }
    
    renderFrame() {
        this.frameCount++;
        
        switch(this.channel) {
            case UHF_CHANNELS.ASCII:
                this.renderASCII();
                break;
            case UHF_CHANNELS.PNG:
                this.renderPNG();
                break;
            case UHF_CHANNELS.ELECTRON:
                this.renderElectron();
                break;
            case UHF_CHANNELS.HEADLESS:
                // Do nothing - headless mode
                break;
        }
    }
    
    renderASCII() {
        // Check if high-res mode is enabled via environment variable
        const highRes = process.env.YANKOVIC_HIRES === 'true' || process.argv.includes('--hires');
        
        if (highRes) {
            this.renderHighResASCII();
        } else {
            this.renderLowResASCII();
        }
    }
    
    renderLowResASCII() {
        // Original low-res ASCII art for compatibility
        const width = 80;  // Terminal width in characters
        const height = 20; // Terminal height in characters
        
        // Move cursor to top-left and clear screen for smooth updates
        process.stdout.write('\x1b[H\x1b[2J');
        console.log(`\n┌${'─'.repeat(width)}┐`);
        console.log(`│ UHF Channel 3 - ASCII Display (Low-Res) ${' '.repeat(width - 41)}│`);
        console.log(`│ Frame ${this.frameCount} ${' '.repeat(width - 8 - this.frameCount.toString().length)}│`);
        console.log(`├${'─'.repeat(width)}┤`);
        
        const imageData = this.ctx.getImageData(0, 0, this.width, this.height);
        const data = imageData.data;
        const chars = ' .:-=+*#%@';
        
        for (let y = 0; y < height - 4; y++) {
            let row = '│';
            for (let x = 0; x < width; x++) {
                const canvasX = Math.floor((x / width) * this.width);
                const canvasY = Math.floor((y / (height - 4)) * this.height);
                const pixelIndex = (canvasY * this.width + canvasX) * 4;
                
                const r = data[pixelIndex] || 0;
                const g = data[pixelIndex + 1] || 0;
                const b = data[pixelIndex + 2] || 0;
                const a = data[pixelIndex + 3] || 0;
                
                const gray = Math.floor(0.299 * r + 0.587 * g + 0.114 * b);
                const charIndex = Math.min(Math.floor((gray / 255) * (chars.length - 1)), chars.length - 1);
                row += chars[charIndex];
            }
            row += '│';
            console.log(row);
        }
        
        console.log(`└${'─'.repeat(width)}┘`);
        console.log(`[ESC] to exit • [SPACE] to pause • Frame: ${this.frameCount} • Commands: ${this.lastCommandCount || 0}`);
    }
    
    renderHighResASCII() {
        // High-resolution terminal output using Unicode blocks and 24-bit color
        const termWidth = process.stdout.columns || 120;
        const termHeight = process.stdout.rows || 30;
        
        // Use most of the terminal space, leave room for UI
        const displayWidth = Math.min(termWidth - 4, 160);
        const displayHeight = Math.min(termHeight - 6, 60);
        
        // Move cursor to top-left and clear screen for smooth updates
        process.stdout.write('\x1b[H\x1b[2J');
        
        // Header with color
        const header = `🎵 UHF Channel 3 - High-Res Display (${displayWidth}x${displayHeight*2}) 🎵`;
        const headerPadding = Math.max(0, Math.floor((displayWidth - header.length + 8) / 2));
        console.log(`\x1b[48;5;236m\x1b[38;5;226m${' '.repeat(headerPadding)}${header}${' '.repeat(displayWidth - header.length - headerPadding + 8)}\x1b[0m`);
        console.log(`\x1b[48;5;236m\x1b[38;5;46m Frame ${this.frameCount} • Commands: ${this.lastCommandCount || 0} • Press Ctrl+C to exit${' '.repeat(Math.max(0, displayWidth - 60))}\x1b[0m`);
        console.log(`\x1b[48;5;236m${' '.repeat(displayWidth + 4)}\x1b[0m`);
        
        const imageData = this.ctx.getImageData(0, 0, this.width, this.height);
        const data = imageData.data;
        
        // Use Unicode half-block characters to double vertical resolution
        // Each character represents 2 vertical pixels
        for (let y = 0; y < displayHeight; y++) {
            let row = '\x1b[48;5;236m  \x1b[0m'; // Left border
            
            for (let x = 0; x < displayWidth; x++) {
                // Get two pixels - top and bottom half of the character
                const canvasX = Math.floor((x / displayWidth) * this.width);
                const canvasYTop = Math.floor(((y * 2) / (displayHeight * 2)) * this.height);
                const canvasYBottom = Math.floor(((y * 2 + 1) / (displayHeight * 2)) * this.height);
                
                // Top pixel
                const topIndex = (canvasYTop * this.width + canvasX) * 4;
                const topR = data[topIndex] || 0;
                const topG = data[topIndex + 1] || 0;
                const topB = data[topIndex + 2] || 0;
                
                // Bottom pixel
                const bottomIndex = (canvasYBottom * this.width + canvasX) * 4;
                const bottomR = data[bottomIndex] || 0;
                const bottomG = data[bottomIndex + 1] || 0;
                const bottomB = data[bottomIndex + 2] || 0;
                
                // Use half-block character (▀) with top color as foreground, bottom as background
                const char = '▀';
                
                // 24-bit color ANSI escape codes
                const fgColor = `\x1b[38;2;${topR};${topG};${topB}m`;
                const bgColor = `\x1b[48;2;${bottomR};${bottomG};${bottomB}m`;
                
                row += `${fgColor}${bgColor}${char}\x1b[0m`;
            }
            
            row += '\x1b[48;5;236m  \x1b[0m'; // Right border
            console.log(row);
        }
        
        // Footer
        console.log(`\x1b[48;5;236m${' '.repeat(displayWidth + 4)}\x1b[0m`);
        console.log(`\x1b[48;5;236m\x1b[38;5;51m  [ESC] Exit • [SPACE] Pause • High-Res Mode: ON${' '.repeat(Math.max(0, displayWidth - 45))}\x1b[0m`);
    }
    
    renderPNG() {
        const filename = `frame_${this.frameCount.toString().padStart(4, '0')}.png`;
        const filepath = path.join(this.outputDir, filename);
        
        // Save frame as PNG
        const buffer = this.canvas.toBuffer('image/png');
        fs.writeFileSync(filepath, buffer);
        
        console.log(`[UHF Channel 13] Rendered frame ${this.frameCount}: ${filename}`);
        
        // For the first frame, open it in the default image viewer
        if (this.frameCount === 1) {
            console.log(`[UHF Channel 13] Opening first frame in image viewer...`);
            open(filepath).catch(err => {
                console.log(`[UHF Channel 13] Could not open image viewer: ${err.message}`);
                console.log(`[UHF Channel 13] View frames manually in: ${this.outputDir}`);
            });
        }
    }
    
    renderElectron() {
        // Save frame as PNG first
        const filename = `frame_${this.frameCount.toString().padStart(4, '0')}.png`;
        const filepath = path.join(this.outputDir, filename);
        
        const buffer = this.canvas.toBuffer('image/png');
        fs.writeFileSync(filepath, buffer);
        
        // Launch Electron window on first frame
        if (this.frameCount === 1) {
            console.log(`[UHF Channel 62] Launching Electron display window...`);
            
            // Start the Electron display process
            import('child_process').then(({ spawn }) => {
                // ---> NEW: Get the directory of the current script to build a reliable path
                const __filename = fileURLToPath(import.meta.url);
                const __dirname = path.dirname(__filename);

                // ---> UPDATED: Prioritize the absolute path to the local electron executable
                const electronCmds = [
                    path.join(__dirname, 'node_modules', '.bin', 'electron'),
                    'npx electron', // Fallback for npx users
                    'electron'      // Fallback for globally installed electron
                ];
                
                let electronProcess;
                for (const cmd of electronCmds) {
                    try {
                        const args = cmd.split(' ');
                        const command = args[0];
                        const cmdArgs = args.slice(1).concat(['./cli-electron-display.js', this.outputDir]);
                        
                        electronProcess = spawn(command, cmdArgs, {
                            stdio: 'inherit',
                            detached: true
                        });
                        
                        console.log(`[UHF Channel 62] Launched Electron with command: ${cmd}`);
                        // Unreference the child process to allow the parent to exit independently
                        electronProcess.unref();
                        break;
                    } catch (err) {
                        console.log(`[UHF Channel 62] Failed to launch with ${cmd}: ${err.message}`);
                        continue;
                    }
                }
                
                if (!electronProcess) {
                    console.log(`[UHF Channel 62] Could not launch Electron window - no working command found`);
                    console.log(`[UHF Channel 62] Falling back to PNG mode`);
                    this.channel = 'png';
                    this.renderPNG();
                }
            }).catch(err => {
                console.log(`[UHF Channel 62] Could not launch Electron window: ${err.message}`);
                console.log(`[UHF Channel 62] Falling back to PNG mode`);
                this.channel = 'png';
                this.renderPNG();
            });
        }
        
        console.log(`[UHF Channel 62] Rendered frame ${this.frameCount}: ${filename}`);
    }
    
    // Create an animated GIF from all frames
    async createAnimation() {
        console.log(`[CLI Graphics] Created ${this.frameCount} frames in ${this.outputDir}/`);
        console.log(`[CLI Graphics] You can create an animation with: `);
        console.log(`  cd ${this.outputDir} && convert -delay 6 -loop 0 frame_*.png animation.gif`);
    }
    
    cleanup() {
        console.log(`[CLI Graphics] Graphics session ended. Frames saved to ${this.outputDir}/`);
    }
}

==================================================
### FILE: ./.gitignore
==================================================

node_modules/
package-lock.json
frontend/dist/

==================================================
### FILE: ./start.sh
==================================================

#!/bin/bash

# The Accordion - Full Stack Electron Starter Script

cleanup() {
    echo "Shutting down servers..."
    kill $FRONTEND_PID
    kill $BACKEND_PID
    echo "All done. Have a weird day!"
}

trap cleanup EXIT INT TERM

# --- Start Local File API Backend ---
echo "🎶 Starting Local File API Backend..."
cd backend
npm start &
BACKEND_PID=$!
echo "Backend server started with PID: $BACKEND_PID"
cd ..

# --- Start React Frontend Dev Server ---
echo "🎨 Starting React Frontend (Vite Dev Server)..."
cd frontend
npm run dev &
FRONTEND_PID=$!
echo "Frontend server started with PID: $FRONTEND_PID"
cd ..

# Wait for a few seconds for servers to be ready
echo "Waiting for servers to initialize..."
sleep 5

# --- Launch the Electron App ---
echo "🚀 Launching The Accordion IDE (Electron App)..."
npm start

# The 'trap' will handle cleanup when you close the Electron app or press Ctrl+C

==================================================
### FILE: ./WORDS.md
==================================================

# The White & Nerdy Guide to the YankoviC Language

Welcome, programmer, to the official Al-manac of YankoviC! This guide is the definitive source for every keyword, function, and standard library feature. It provides the C/C++ equivalent for each concept to help you translate your sane programming knowledge into something beautifully weird.

## File Extensions

| Extension | Purpose | Description |
|---|---|---|
| `.yc` | Standard YankoviC | Regular YankoviC programs and scripts |
| `.ycw` | YankoviC Web | YankoviC web development files using Like_a_Server or Weird_Wide_Web libraries |
| `.hat`| YankoviC Library | Used for creating new libraries in YankoviC |

## Core Language Keywords

These are the fundamental building blocks of the YankoviC language.

| Keyword | C/C++ Equivalent | Description & Rationale |
|---|---|---|
| `spatula` | `int`, `long` | A 32/64-bit integer. From Spautula City the spatula is your all-purpose, indispensable, foundational tool for counting and whole numbers. |
| `lasagna` | `float`, `double` | A floating-point number. A messy, layered, and often imprecise data type, just like the beloved dish from the song "Lasagna." |
| `lyric` | `char` | A single character. The smallest building block of any good parody. |
| `verse` | `std::string`, `char*` | An ordered collection of `lyric`s. Used to hold text, from a single word to an entire song. |
| `horoscope` | `bool` | A boolean value. As "Your Horoscope For Today" teaches us, it can only have one of two values. |
| `its_a_fact` | `true` | The positive `horoscope` value. |
| `total_baloney` | `false` | The negative `horoscope` value. |
| `stupid` | `const` | Declares a variable as a constant. To declare something as `stupid` is to make a permanent, unshakeable commitment. You must *Dare to be Stupid*. |
| `jeopardy` | `if` | Begins a conditional block. You are putting your program's flow on the line for a chance at a daily double. |
| `another_one` | `else` | The catch-all block for when all `jeopardy` conditions fail. *Another one rides the bus...* |
| `polka` | `while` | Creates a loop that continues as long as a condition is `its_a_fact`. It's energetic, repetitive, and keeps going long after you think it should stop. |
| `hardware_store` | `for` | A structured loop with an initializer, condition, and incrementer. Perfect for iterating through a long, specific, and detailed list of items. |
| `lunchbox` | `struct`, `class` | A composite data structure that can hold a variety of different data types. It's a container for all your goodies. |
| `on_the_menu` | `public` | Makes `lunchbox` members accessible to everyone. What's on the menu is visible to all! |
| `private_stash` | `private` | Makes `lunchbox` members accessible only within the class. Your secret snack collection. |
| `want_a_new_duck()` | `main()` | The primary entry point for any YankoviC program. All execution begins with the desire for a new duck. Its return type must be `spatula`. |
| `twinkie_wiener_sandwich` | `return` | Returns a value from a function. It is the final, questionable, yet delicious creation that you present to whatever called the function. A return code of `27` is a success |
| `accordion_solo` | `void` | Represents the absence of a value. It's a function that does something purely for the performance, without returning a result. |
| `perform_a_parody(text, ...)` | `printf`, `console.log` | Prints text (and optional values) to the terminal/console. Supports format codes: %verse, %spatula, %horoscope. |
| `flesh_eating_weasels(prompt)` | `scanf`, `cin >>`, `readline` | Reads input from the terminal/console. Takes an optional prompt string. Named after Al's panicked screaming in "Albuquerque." |
| `dare_to_be_stupid { ... } put_down_the_chainsaw (err) { ... }` | `try { ... } catch (err) { ... }` | Try/catch error handling. "Dare to be Stupid" is the try block; "put_down_the_chainsaw" is the catch block. If an error occurs, the catch block runs with the error as a variable. |
| `stop_forwarding_that_crap duration pentium;` | `sleep(duration)` | Pauses execution for a number of milliseconds. Optionally specify a "pentium" (CPU core) for fun. Named after a classic Weird Al lyric. |

## Import Directives

| Directive | Description |
|---|---|
| `#eat <library.hat>` | Imports a standard library (angle brackets), always a `.hat` file |
| `#eat "filename.yc"` | Imports a user file (quotes), can be a `.hat` file |
| `#eat filename.yc` | Imports a user file (bare name), can be a `.hat` file |

## Import Rules (VERY IMPORTANT!)

- `#eat <library.hat>` or `#eat <library>`: Loads a built-in or user library. The extension is optional for built-ins.
- `#eat "userlib.hat"`: Loads a user-made library file. **Quoted imports only work for .hat files!**
- `#eat userlib.yc`: Loads a user-made code file. **Unquoted imports work for both .hat and .yc files.**
- `#eat "userlib.yc"` is NOT valid and will not work.

> **Summary:**
> - Use quotes only for `.hat` files: `#eat "my_lib.hat"`
> - For `.yc` files, do NOT use quotes: `#eat my_code.yc`
> - Built-in libraries can be imported with or without extension and without quotes.

If you try to import a `.yc` file with quotes, the interpreter will not find it!

## Comments

| Syntax | Description |
|---|---|
| `//` | Single-line comment. The only valid single comment syntax in YankoviC |
| `/*  */` | Multi-line comment. The only valid multi-line comment syntax in YankoviC |

## The "UHF" Graphics Library (`#eat <UHF.hat>`)

The Ultra-High Frequency library for all your graphical and user interface needs.

| Function / Constant | C++ Equivalent (Conceptual) | Description & Rationale |
|---|---|---|
| `start_the_show(w, h, title)` | `CreateWindowEx(...)` | Creates and displays a new graphics window. It's time to start the show! |
| `cancel_the_show()` | `DestroyWindow(...)` | Closes the graphics window. |
| `the_shows_over()` | `IsWindow(hwnd) == 0` | Returns `its_a_fact` if the user has closed the window. |
| `set_polka_speed(fps)` | N/A | Sets the target frame rate for the main animation loop. |
| `wait_for_a_moment(ms)` | `Sleep(ms)` | Pauses execution for a number of milliseconds. |
| `roll_the_camera()` | `BeginPaint(...)` | Begins a new frame for drawing. |
| `that_is_a_wrap()` | `EndPaint(...)`, `SwapBuffers(...)` | Completes the current frame and displays it on screen. |
| `paint_the_set(color)` | `FillRect(hdc, &rect, hbr)` | Fills the entire window with a background color, like painting a set for a TV show. |
| `pick_a_hawaiian_shirt(color)` | `CreateSolidBrush(color)` | Sets the drawing color for all subsequent shapes. Al is famous for them! |
| `draw_a_spamsicle(x,y,w,h)` | `Rectangle(hdc, ...)` | Draws a filled rectangle. It's rectangular, processed, and delicious. |
| `draw_a_big_ol_wheel_of_cheese(x,y,r)` | `Ellipse(hdc, ...)` | Draws a filled circle. A direct quote from the epic song "Albuquerque." |
| `print_a_string_at(text,x,y)` | `TextOut(hdc, ...)` | Draws a `verse` of text at a specific coordinate in a graphics window. Only available when using the UHF graphics library. |

## Output in YankoviC

YankoviC supports both terminal/console output and graphical/web output:

- Use `perform_a_parody(text, ...)` to print to the terminal/console.
- Use `print_a_string_at(text, x, y)` for graphical output (UHF library).
- Use web response functions for web output (see Like_a_Server and Weird_Wide_Web).

### Example: Console Output
```yankovic
// My Favorite Word Crime
spatula want_a_new_duck() {
    perform_a_parody("Hello, Weird World!");
    twinkie_wiener_sandwich 27;
}
```

### Example: Graphical Output
```yankovic
#eat <UHF.hat>

spatula main() {
    start_the_show(640, 480, "Hello Graphics!");
    print_a_string_at("Hello Weird World!", 100, 100);
    // ... more drawing code ...
    the_shows_over();
    twinkie_wiener_sandwich 27;
}
```

### Example: Basic Variables and Control Flow
```yankovic
spatula main() {
    spatula x = 42;
    lasagna y = 3.14;
    verse greeting = "Hello, YankoviC!";
    horoscope is_fun = its_a_fact;

    jeopardy (is_fun) {
        // Do something fun!
    } another_one {
        // Do something else
    }
    twinkie_wiener_sandwich 27;
}
```

### Example: Mathematical Functions
```yankovic
#eat <albuquerque.hat>

spatula main() {
    spatula a = 10;
    spatula b = 3;
    spatula r = yoda(a, b); // r = 10 % 3 = 1
    twinkie_wiener_sandwich27;
}
```

### Example: Error Handling and Sleep (Weird Al Style)
```yankovic
spatula want_a_new_duck() {
    dare_to_be_stupid {
        perform_a_parody("Trying something risky...");
        stop_forwarding_that_crap 1000; // Sleep for 1000ms (1 second)
        // stop_forwarding_that_crap 500 2; // Sleep for 500ms on pentium 2 (see note below)
        perform_a_parody("If you see this, no error happened!");
    } put_down_the_chainsaw (err) {
        perform_a_parody("Oops! Caught an error: %verse", err);
    }
    twinkie_wiener_sandwich 27;
}
```
> **Note:** The optional `pentium` argument in `stop_forwarding_that_crap` only has an effect when using the Like_a_Server or Weird_Wide_Web libraries, where it can control which server thread/core is paused. In standard YankoviC, it is just for fun and logging.

## The "Virus_Alert" OS Library (`#eat <virus_alert.hat>`)

**"Virus Alert! Delete immediately before someone gets hurt!"**  
Operating system functions themed around the infamous "Virus Alert" song. Handle files, processes, and system operations with paranoid precision!

### File Operations

| Function | OS Equivalent | Description & Rationale |
|---|---|---|
| `legally_named_reggie(old_name, new_name)` | `rename()`, `mv` | Renames a file or directory. Everyone's legally named Reggie now! |
| `stinky_cheese(filename)` | `unlink()`, `rm` | Deletes a file. Like deleting emails with "stinky cheese" in the subject. |
| `forward_to_a_friend(source, destination)` | `copy()`, `cp` | Copies a file. Forward this to everyone you know! |
| `check_your_hard_drive(path)` | `stat()`, `ls` | Gets file information (size, modified date, etc.). Better check your hard drive! |
| `open_every_file(directory)` | `readdir()`, `ls` | Lists all files in a directory. Opening every file on your PC! |
| `really_big_attachment(filename)` | `filesize()` | Gets the size of a file in bytes. Is it suspiciously large? |

### Directory Operations

| Function | OS Equivalent | Description & Rationale |
|---|---|---|
| `make_a_backup_folder(dirname)` | `mkdir()` | Creates a new directory. Better make a backup! |
| `delete_your_homework(dirname)` | `rmdir()` | Removes an empty directory. Oops, there goes your homework! |
| `change_your_password_location(path)` | `chdir()`, `cd` | Changes the current working directory. Time to change locations! |
| `where_am_i_now()` | `getcwd()`, `pwd` | Gets the current working directory path. Are you lost in the file system? |

### Process Operations

| Function | OS Equivalent | Description & Rationale |
|---|---|---|
| `run_suspicious_program(command)` | `system()`, `exec()` | Executes a system command. Definitely not suspicious at all! |
| `terminate_everything()` | `exit()` | Terminates the current program. Panic button activated! |
| `check_running_programs()` | `ps`, Task Manager | Lists currently running processes. What's running on your system? |
| `kill_the_process(pid)` | `kill()` | Terminates a specific process by ID. Nuclear option! |

### System Information

| Function | OS Equivalent | Description & Rationale |
|---|---|---|
| `scan_your_system()` | System info calls | Gets basic system information (OS, memory, etc.). Full system scan! |
| `check_available_memory()` | `free`, memory APIs | Gets available RAM in bytes. Is your memory infected? |
| `get_virus_count()` | N/A | Gets the number of viruses detected on your computer |
| `format_your_hard_drive()` | Does nothing | Pretends to format the drive (does nothing, for safety!). Just kidding! |

### Network Operations  

| Function | OS Equivalent | Description & Rationale |
|---|---|---|
| `send_to_everyone_you_know(message)` | Network broadcast | Sends a message to all network devices (simulated). Don't actually do this! |
| `disconnect_the_internet()` | Network disable | Disables network connection. Ultimate protection! |
| `check_suspicious_traffic()` | Network monitoring | Monitors network activity. What's going in and out? |

### Example: File Management
```yankovic
#eat <virus_alert.hat>

spatula want_a_new_duck() {
    // Check if a suspicious file exists
    jeopardy (check_your_hard_drive("suspicious.exe")) {
        perform_a_parody("Found suspicious file!");
        stinky_cheese("suspicious.exe");  // Delete it
        perform_a_parody("File deleted for safety!");
    }
    
    // Make a backup folder
    make_a_backup_folder("my_backups");
    
    // Copy important files
    forward_to_a_friend("important.txt", "my_backups/important_backup.txt");
    
    twinkie_wiener_sandwich27;
}
```

## Practical Examples

### Example: Virus Alert File Management
```yankovic
#eat <virus_alert.hat>

spatula want_a_new_duck() {
    // Rename a file
    legally_named_reggie("old.txt", "new.txt");
    // Delete a file
    stinky_cheese("delete_me.txt");
    // Copy a file
    forward_to_a_friend("source.txt", "backup/source_backup.txt");
    // List files in a directory
    verse files = open_every_file(".");
    perform_a_parody("Files: %verse", files);
    // Get virus count
    spatula viruses = get_virus_count();
    perform_a_parody("Virus count: %spatula", viruses);
    twinkie_wiener_sandwich27;
}
```

### Example: CLI Input
```yankovic
spatula want_a_new_duck() {
    verse name = flesh_eating_weasels("What's your name? ");
    perform_a_parody("Hello, %verse!", name);
    twinkie_wiener_sandwich27;
}
```

### Example: Calculator with Albuquerque Math Library
```yankovic
#eat <albuquerque.hat>

spatula want_a_new_duck() {
    spatula a = 10;
    spatula b = 3;
    spatula sum = a + b;
    spatula diff = a - b;
    spatula prod = a * b;
    spatula quot = a / b;
    spatula mod = yoda(a, b);
    perform_a_parody("Sum: %spatula", sum);
    perform_a_parody("Diff: %spatula", diff);
    perform_a_parody("Prod: %spatula", prod);
    perform_a_parody("Quot: %spatula", quot);
    perform_a_parody("Mod: %spatula", mod);
    twinkie_wiener_sandwich27;
}
```
## The "Albuquerque" Math Library (`#eat <albuquerque.hat>`)

For when you need to do some number crunching on your way to the Donut Shop.

| Function | C/C++ Equivalent | Description & Rationale |
|---|---|---|
| `sin(angle)` | `sin(angle)` from `<cmath>` | Calculates the sine of an angle (in radians). A standard, just like coleslaw. |
| `cos(angle)` | `cos(angle)` from `<cmath>` | Calculates the cosine of an angle (in radians). |
| `random_spatula()` | `rand() % 100` | Returns a random `spatula` (integer) between 0 and 99. |
| `yoda(a, b)` | `a % b` or `fmod(a, b)` | Calculates the remainder of `a` divided by `b`. A necessary function because the `%` operator is finicky. |

## The "Like_a_Server" Library (`#eat <like_a_server.hat>`)

**"I've been spending most my life, living in an Amish paradise"**  
Server-side web development the Amish way - building web servers with horse and buggy reliability!

### Server Management

| Function | Express.js Equivalent | Description & Rationale |
|---|---|---|
| `amish_barn_raising(port)` | `app.listen(port)` | Starts the web server on the specified port. Raising a barn requires community effort! |
| `amish_barn_teardown()` | `server.close()` | Stops the web server. Time to tear down the barn for winter. |
| `amish_barn_still_standing()` | `server.listening` | Returns `its_a_fact` if the server is still running. |

### Routing (Buggy Trails)

| Function | Express.js Equivalent | Description & Rationale |
|---|---|---|
| `amish_buggy_trail_get(path, handler)` | `app.get(path, handler)` | Creates a GET route. Navigate like horse and buggy trails! |
| `amish_barn_delivery_post(path, handler)` | `app.post(path, handler)` | Creates a POST route. Delivering goods to the barn. |
| `amish_quilting_update(path, handler)` | `app.put(path, handler)` | Creates a PUT route. Updating quilting patterns with care. |
| `amish_shunning_delete(path, handler)` | `app.delete(path, handler)` | Creates a DELETE route. The ultimate Amish punishment. |

### Request Handling

| Function | Express.js Equivalent | Description & Rationale |
|---|---|---|
| `eat_it_extract_body(request)` | `req.body` | Extracts the request body data. "Eat it" - get the meaty content! |
| `like_a_surgeon_slice_params(name)` | `req.params.name` | Gets URL parameters with surgical precision. |
| `amish_church_bell_query(name)` | `req.query.name` | Gets query parameters. Like asking the church bell ringer. |
| `amish_hat_headers(name)` | `req.headers.name` | Gets request headers. Reading the hat band information. |

### Response Handling

| Function | Express.js Equivalent | Description & Rationale |
|---|---|---|
| `amish_butter_churn_json(data, status)` | `res.status(status).json(data)` | Sends JSON response. Churned smooth like butter! |
| `amish_quilt_html_response(html, status)` | `res.status(status).send(html)` | Sends HTML response. Beautiful as a handmade quilt. |
| `amish_plain_text_response(text, status)` | `res.status(status).text(text)` | Sends plain text response. Simple and plain, the Amish way. |
| `amish_bonnet_header(name, value)` | `res.setHeader(name, value)` | Sets response headers. Like adjusting your bonnet. |

### Middleware

| Function | Express.js Equivalent | Description & Rationale |
|---|---|---|
| `amish_community_helper(middleware)` | `app.use(middleware)` | Adds middleware. The community helps with everything! |
| `amish_welcome_outsiders(cors_config)` | `app.use(cors())` | Enables CORS. Welcoming outsiders to the community. |
| `use_static_files(path)` | `app.use(express.static(path))` | Serves static files. Sharing the community's goods. |

### Database Operations

| Function | SQL Equivalent | Description & Rationale |
|---|---|---|
| `connect_database(connection_string)` | Database connection | Connects to a database. Joining the community storage. |
| `db_insert(table, data)` | `INSERT INTO table VALUES (...)` | Inserts data into database. Adding to the grain storage. |
| `db_select(table, conditions)` | `SELECT * FROM table WHERE ...` | Selects data from database. Checking the grain storage. |
| `db_update(table, data, conditions)` | `UPDATE table SET ... WHERE ...` | Updates database records. Maintaining the grain storage. |
| `db_delete(table, conditions)` | `DELETE FROM table WHERE ...` | Deletes database records. Removing spoiled grain. |

### Session Management

| Function | Express.js Equivalent | Description & Rationale |
|---|---|---|
| `create_session(user_data)` | `req.session.create()` | Creates a new user session. Welcoming someone to the family. |
| `get_session(session_id)` | `req.session` | Gets session data. Checking family records. |
| `update_session(session_id, data)` | `req.session.data = ...` | Updates session data. Updating family records. |
| `destroy_session(session_id)` | `req.session.destroy()` | Destroys a session. Ending family membership. |

### Authentication

| Function | Modern Equivalent | Description & Rationale |
|---|---|---|
| `generate_jwt_token(payload, secret)` | JWT token generation | Creates authentication tokens. Community identification badges. |
| `verify_jwt_token(token, secret)` | JWT token verification | Verifies authentication tokens. Checking community membership. |
| `hash_password(password)` | bcrypt hashing | Hashes passwords securely. Protecting family secrets. |
| `verify_password(password, hash)` | bcrypt verification | Verifies password against hash. Confirming family identity. |

### Logging and Utilities

| Function | Node.js Equivalent | Description & Rationale |
|---|---|---|
| `log_info(message)` | `console.log()` | Logs informational messages. Recording community events. |
| `log_error(message)` | `console.error()` | Logs error messages. Recording community troubles. |
| `get_timestamp()` | `Date.now()` | Gets current timestamp. Checking the church clock. |
| `amish_scripture_parse(json_string)` | `JSON.parse()` | Parses JSON data. Reading the sacred texts. |
| `amish_scripture_scribe(object)` | `JSON.stringify()` | Converts object to JSON. Writing the sacred texts. |

### Threading Model

| Function | Node.js Equivalent | Description & Rationale |
|---|---|---|
| `dumb_little_placard(data)` | `process.send()` | Sends message to worker process. Like posting community announcements. |
| `all_of_the_pentiums(callback)` | `cluster.fork()` | Creates worker processes. Using all available computing power. |
| `check_pentium_power()` | `os.cpus().length` | Gets number of CPU cores. Checking how many Pentiums you have. |

## The "Weird_Wide_Web" Library (`#eat <weird_wide_web.hat>`)

**"Living in an Amish paradise"**  
Client-side web development the Amish way - crafting HTML like fine woodwork and managing the DOM like a well-organized barn!

### Document Creation

| Function | HTML/JS Equivalent | Description & Rationale |
|---|---|---|
| `amish_quilt_creation()` | `document.createElement('html')` | Creates a new HTML document structure. Starting a new quilt pattern! |
| `amish_quilt_blessing(title)` | `document.title = title` | Sets the document title. Blessing the quilt with a name. |
| `amish_wisdom_tag(name, content)` | `<meta name="..." content="...">` | Adds meta tags to document head. Sharing Amish wisdom with the world. |

### HTML Elements (Wooden Craftsmanship)

| Function | HTML Equivalent | Description & Rationale |
|---|---|---|
| `amish_wooden_box(id, content)` | `<div id="...">content</div>` | Creates a div container. Carving a wooden box to hold things. |
| `amish_scripture_text(id, text)` | `<p id="...">text</p>` | Creates a paragraph. Writing scripture on wooden tablets. |
| `amish_church_sign(level, id, text)` | `<h1-6 id="...">text</h1-6>` | Creates headers. Church signs announce important messages. |
| `amish_wooden_button(id, text, onclick)` | `<button id="..." onclick="...">text</button>` | Creates clickable buttons. Hand-carved wooden buttons. |
| `amish_text_input(id, placeholder)` | `<input type="text" id="..." placeholder="...">` | Creates text input fields. Simple Amish forms. |
| `amish_text_area(id, rows, placeholder)` | `<textarea id="..." rows="...">placeholder</textarea>` | Creates multi-line text areas. Writing lengthy scripture. |
| `amish_wooden_link(id, href, text)` | `<a id="..." href="...">text</a>` | Creates hyperlinks. Wooden signposts to other places. |
| `amish_barn_image(id, src, alt)` | `<img id="..." src="..." alt="...">` | Displays images. Pictures of the family barn. |
| `amish_wooden_list(id, type)` | `<ul id="...">` or `<ol id="...">` | Creates lists. Organizing like a well-planned harvest. |
| `amish_list_item(id, content)` | `<li id="...">content</li>` | Creates list items. Individual items in the harvest list. |

### Styling (Plain and Simple)

| Function | CSS Equivalent | Description & Rationale |
|---|---|---|
| `amish_plain_style(id, property, value)` | `element.style.property = value` | Sets inline styles. Plain and simple, as it should be. |
| `amish_bonnet_class(id, className)` | `element.className = className` | Sets CSS classes. Putting on the proper bonnet. |
| `amish_hide_element(id)` | `element.style.display = 'none'` | Hides an element. Sometimes things need to be put away. |
| `amish_show_element(id)` | `element.style.display = 'block'` | Shows a hidden element. Bringing things back to the light. |

### DOM Manipulation (Community Organization)

| Function | JavaScript Equivalent | Description & Rationale |
|---|---|---|
| `amish_community_gathering(parentId, childId)` | `parent.appendChild(child)` | Adds element to parent. Bringing family together. |
| `amish_harvest_text(id)` | `element.textContent` | Gets element text content. Harvesting what was written. |
| `amish_clear_text(id, newText)` | `element.textContent = newText` | Sets element text content. Clearing the slate and writing anew. |
| `amish_community_announcement(id, message)` | `alert(message)` / custom modal | Shows messages to user. Important community announcements. |

### Animations (Simple Movements)

| Function | CSS/JS Equivalent | Description & Rationale |
|---|---|---|
| `amish_barn_fade_in(id, duration)` | CSS transitions / animations | Fades element in gradually. Like sunrise over the barn. |
| `amish_barn_fade_out(id, duration)` | CSS transitions / animations | Fades element out gradually. Like sunset behind the barn. |
| `amish_wooden_slide(id, direction, distance)` | CSS transforms | Slides element in direction. Moving furniture in the barn. |

### Special Functions

| Function | Modern Equivalent | Description & Rationale |
|---|---|---|
| `amish_quilt_display()` | Generate & open HTML | Creates complete HTML and opens in browser. Displaying the finished quilt! |
| `amish_add_to_quilt(element)` | Add to document body | Adds elements to the main document. Adding patches to the quilt. |

### Worker Management (Community Labor)

| Function | Web Workers Equivalent | Description & Rationale |
|---|---|---|
| `amish_single_worker(script)` | `new Worker(script)` | Creates a web worker. One person working alone. |
| `amish_whole_community(workers)` | Multiple workers | Manages multiple workers. The whole community working together. |
| `amish_headcount()` | `navigator.hardwareConcurrency` | Gets number of available workers. Counting heads for work distribution. |
| `amish_barn_cleanup()` | Worker termination | Cleans up worker resources. Cleaning the barn after work. |

### Misc. Functions

| Function | Description |
|---|---|
| `amish_textbook(query)` | Searches DuckDuckGo for a text answer to the query. Returns a summary or answer string. |
| `amish_photobook(query)` | Returns a DuckDuckGo image search URL for the query. |
| `amish_wikipedia(query)` | Returns a summary for the query from Wikipedia. |
| `amish_mail(prompt, model="openai", apiKey=null, systemPrompt=null)` | Sends a prompt to the Pollinations API, does not requre an API key to be ran. Returns the AI's response as a string. You can specify the model, API key, and an optional system prompt. If no system prompt is provided, the default is: `You are a helpful asistant written in the programming language of YankoviC, inspired completely by Weird Al Yankovic. You will perform any request given to you, and act in any way the user asks. You're name is "Al"`. |

### Fetching Data

| Function | Modern Equivalent | Description & Rationale |
|---|---|---|
| `amish_fetch(url, options)` | `fetch(url, options)` | Performs an HTTP request to the specified URL with the given options. Like sending a letter to the outside world and waiting for a reply. |

#### Example Usage

```yc
#eat <weird_wide_web.hat>

want_a_new_duck() {
    verse response = amish_fetch("https://api.example.com/data", {
        "method": "GET",
        "headers": {
            "Content-Type": "application/json"
        }
    });

    perform_a_parody("Response: %verse", response);
    twinkie_wiener_sandwich27;
}
```

---

## Summary: Building with YankoviC

YankoviC is a fully functional programming language that combines humor with serious programming capabilities. Here's how to approach different types of projects:

### For Basic Programming
- Use core language features: `spatula`, `lasagna`, `verse`, `horoscope`
- Control flow: `jeopardy`/`another_one`, `polka`, `hardware_store`
- File extension: `.yc`

### For Mathematical Applications
- Import: `#eat <albuquerque.hat>`
- Add trigonometry, random numbers, and modulus operations
- Perfect for scientific computing with a smile

### For Graphics and UI
- Import: `#eat <UHF.hat>`
- Create windows, draw shapes, handle user input
- Run with: `./yankovic filename.yc --electron`
- Supports animation, buttons, mouse/keyboard input

### For Server-Side Web Development
- Import: `#eat <like_a_server.hat>`
- Build web servers, APIs, handle routing
- Amish-themed functions for HTTP operations
- File extension: `.ycw`

### For Client-Side Web Development
- Import: `#eat <weird_wide_web.hat>`
- Generate HTML, manipulate DOM, apply styling
- Creates actual web pages that open in browsers
- File extension: `.ycw`

### Best Practices

1. **Start Simple**: Begin with basic examples, work up to complex applications
2. **Embrace the Theme**: The humorous naming is intentional and memorable
3. **Real Functionality**: Despite funny names, all functions provide serious programming capabilities
4. **Library Combinations**: You can import multiple libraries in one program
5. **Proper Syntax**: Always use `//` or `/* */` for comments, proper semicolons, and parentheses

### Example Project Structure
```
my-project/
  ├── main.yc              // Core application logic
  ├── math_utils.yc        // Mathematical helper functions
  ├── web_server.ycw       // Server-side web components
  ├── web_client.ycw       // Client-side web interface
  └── graphics_demo.yc     // Interactive visual components
```

**Remember**: YankoviC proves that programming languages can be both fun and functional. Whether you're building web applications, mathematical models, or interactive graphics, YankoviC provides all the tools you need - just with more accordion music and fewer electrons than you'd expect!

## Comprehensive YankoviC Code Examples

Below are five full YankoviC program examples. Each one demonstrates how to include imports, use core features, and combine libraries for real (or intentionally silly) results.

---

### Example 1: Hello, Weird World!
```yankovic
#eat <weird_wide_web.hat>
#eat <UHF.hat>
#eat <albuquerque.hat>

spatula want_a_new_duck() {
    perform_a_parody("Hello, Weird World!");
    twinkie_wiener_sandwich 27;
}
```

---

### Example 2: Math, Input, and Output
```yankovic
#eat <albuquerque.hat>

spatula want_a_new_duck() {
    spatula a = 42;
    spatula b = random_spatula();
    spatula c = yoda(a, b);
    perform_a_parody("%spatula %% %spatula = %spatula", a, b, c);
    twinkie_wiener_sandwich 27;
}
```

---

### Example 3: Web Fetch and AI Chat
```yankovic
#eat <weird_wide_web.hat>

spatula want_a_new_duck() {
    verse fact = amish_textbook("Weird Al Yankovic");
    verse ai = amish_mail("Write a parody about ducks.");
    verse data = amish_fetch("https://api.chucknorris.io/jokes/random", {"method": "GET"});
    perform_a_parody("Fact: %verse\nAI: %verse\nJoke: %verse", fact, ai, data);
    twinkie_wiener_sandwich 27;
}
```

---


### Example 4: Bouncing Spatula (UHF Graphics)
```yankovic
#eat <UHF.hat>
#eat <albuquerque.hat>

/*
FYI
You can use multi-line
Comments like this!
*/

spatula want_a_new_duck() {
    start_the_show(800, 600, "Bouncing Spatula");
    set_polka_speed(60);

    lasagna x = 400.0;
    lasagna y = 100.0;
    lasagna y_speed = 0.0;
    lasagna gravity = 0.5;
    lasagna bounce_factor = -0.8;

    polka (!the_shows_over()) {
        roll_the_camera();
        paint_the_set(SKY_BLUE_FOR_YOU);
        pick_a_hawaiian_shirt(SILVER_SPATULA);
        draw_a_spamsicle(x-10, y-40, 20, 60); // Draw spatula handle
        pick_a_hawaiian_shirt(WHITE_ZOMBIE);
        draw_a_big_ol_wheel_of_cheese(x, y, 20); // Draw spatula head
        pick_a_hawaiian_shirt(BLACK_MAGIC);
        print_a_string_at("Bouncing Spatula!", 320, 40);
        y_speed = y_speed + gravity;
        y = y + y_speed;
        jeopardy (y > 540) {
            y = 540;
            y_speed = y_speed * bounce_factor;
        }
        that_is_a_wrap();
    }
    twinkie_wiener_sandwich 27;
}
```

---

### Example 5: Trapped in the Drive-Thru (UHF Graphics)
```yankovic
#eat <UHF.hat>

spatula want_a_new_duck() {
    start_the_show(800, 600, "Trapped in the Drive-Thru");
    set_polka_speed(60);
    lasagna car_x = -100.0;
    spatula state = 0;
    spatula timer = 0;
    verse message = "I'm trapped in the drive-thru...";
    polka (!the_shows_over()) {
        roll_the_camera();
        paint_the_set(SILVER_SPATULA);
        pick_a_hawaiian_shirt(AL_RED);
        draw_a_spamsicle(600, 100, 200, 400); // Building
        pick_a_hawaiian_shirt(WHITE_ZOMBIE);
        draw_a_spamsicle(650, 250, 100, 100); // Window
        pick_a_hawaiian_shirt(SKY_BLUE_FOR_YOU);
        draw_a_spamsicle(car_x, 300, 100, 50); // Car
        pick_a_hawaiian_shirt(BLACK_MAGIC);
        print_a_string_at(message, 200, 500);
        jeopardy(state == 0) {
            car_x = car_x + 1;
            jeopardy(car_x > 200) { state = 1; timer = 180; message = "Okay, I've placed my order..."; }
        }
        jeopardy(state == 1) {
            timer = timer - 1;
            jeopardy(timer <= 0) { state = 2; message = "Any minute now..."; }
        }
        jeopardy(state == 2) {
            car_x = car_x + 0.5;
            jeopardy(car_x > 450) { state = 3; timer = 180; message = "So I'm just sitting here..."; }
        }
        jeopardy(state == 3) {
            timer = timer - 1;
            jeopardy(timer <= 0) { state = 4; message = "Finally, food!"; }
        }
        jeopardy(state == 4) {
            // End state
        }
        that_is_a_wrap();
    }
    twinkie_wiener_sandwich 27;
}
```

---

### Example: Per-Pentium Sleep Demo (Like_a_Server)
```yankovic
#eat <Like_a_Server.hat>

spatula want_a_new_duck() {
    perform_a_parody("Before sleep on pentium 2\n");
    stop_forwarding_that_crap 2000 2; // Sleep for 2 seconds on pentium 2
    perform_a_parody("After sleep on pentium 2\n");
    twinkie_wiener_sandwich 27;
}
```


==================================================
### FILE: ./install.sh
==================================================

#!/bin/bash
# install.sh - Install all dependencies for YankoviC project and set up environment

set -e

# Install root dependencies if package.json exists
if [ -f package.json ]; then
  echo "Installing root dependencies..."
  npm install
fi

# Install backend dependencies
if [ -f backend/package.json ]; then
  echo "Installing backend dependencies..."
  cd backend
  npm install
  cd ..
fi

# Install frontend dependencies
if [ -f frontend/package.json ]; then
  echo "Installing frontend dependencies..."
  cd frontend
  npm install
  echo "Building VITE for CLI frontend..."
  npm run build
  cd ..
fi

# Add YankoviC to PATH for global CLI use
if ! command -v yankovic &> /dev/null; then
  echo "Adding YankoviC to PATH..."
  sudo ln -sf $(pwd)/cli.js /usr/local/bin/yankovic
  sudo chmod +x /usr/local/bin/yankovic
fi

echo "YankoviC installation and setup complete!"


==================================================
### FILE: ./frontend/public/uhf-test.js
==================================================

// Test UHF functionality directly
console.log('Testing UHF functionality...');

// Check if uhfAPI is available
if (typeof window !== 'undefined' && window.uhfAPI) {
    console.log('UHF API is available');
    
    // Test starting the show
    window.uhfAPI.startTheShow({width: 400, height: 300, title: "Test Window"})
        .then(result => {
            console.log('Start show result:', result);
            
            // Test drawing a simple frame
            const testCommands = [
                {command: 'paint_set', args: {r: 255, g: 0, b: 0, a: 255}}, // Red background
                {command: 'pick_shirt', args: {r: 0, g: 255, b: 0, a: 255}}, // Green color
                {command: 'draw_cheese', args: [200, 150, 50]} // Circle in center
            ];
            
            return window.uhfAPI.executeDrawBuffer(testCommands);
        })
        .then(result => {
            console.log('Execute draw buffer result:', result);
        })
        .catch(error => {
            console.error('UHF test error:', error);
        });
} else {
    console.log('UHF API not available - running in non-Electron environment');
}


==================================================
### FILE: ./frontend/public/WORDS.md
==================================================

# The White & Nerdy Guide to the YankoviC Language

Welcome, programmer, to the official Al-manac of YankoviC! This guide is the definitive source for every keyword, function, and standard library feature. It provides the C/C++ equivalent for each concept to help you translate your sane programming knowledge into something beautifully weird.

## File Extensions

| Extension | Purpose | Description |
|---|---|---|
| `.yc` | Standard YankoviC | Regular YankoviC programs and scripts |
| `.ycw` | YankoviC Web | YankoviC web development files using Like_a_Server or Weird_Wide_Web libraries |
| `.hat`| YankoviC Library | Used for creating new libraries in YankoviC |

## Core Language Keywords

These are the fundamental building blocks of the YankoviC language.

| Keyword | C/C++ Equivalent | Description & Rationale |
|---|---|---|
| `spatula` | `int`, `long` | A 32/64-bit integer. From Spautula City the spatula is your all-purpose, indispensable, foundational tool for counting and whole numbers. |
| `lasagna` | `float`, `double` | A floating-point number. A messy, layered, and often imprecise data type, just like the beloved dish from the song "Lasagna." |
| `lyric` | `char` | A single character. The smallest building block of any good parody. |
| `verse` | `std::string`, `char*` | An ordered collection of `lyric`s. Used to hold text, from a single word to an entire song. |
| `horoscope` | `bool` | A boolean value. As "Your Horoscope For Today" teaches us, it can only have one of two values. |
| `its_a_fact` | `true` | The positive `horoscope` value. |
| `total_baloney` | `false` | The negative `horoscope` value. |
| `stupid` | `const` | Declares a variable as a constant. To declare something as `stupid` is to make a permanent, unshakeable commitment. You must *Dare to be Stupid*. |
| `jeopardy` | `if` | Begins a conditional block. You are putting your program's flow on the line for a chance at a daily double. |
| `another_one` | `else` | The catch-all block for when all `jeopardy` conditions fail. *Another one rides the bus...* |
| `polka` | `while` | Creates a loop that continues as long as a condition is `its_a_fact`. It's energetic, repetitive, and keeps going long after you think it should stop. |
| `hardware_store` | `for` | A structured loop with an initializer, condition, and incrementer. Perfect for iterating through a long, specific, and detailed list of items. |
| `lunchbox` | `struct`, `class` | A composite data structure that can hold a variety of different data types. It's a container for all your goodies. |
| `on_the_menu` | `public` | Makes `lunchbox` members accessible to everyone. What's on the menu is visible to all! |
| `private_stash` | `private` | Makes `lunchbox` members accessible only within the class. Your secret snack collection. |
| `want_a_new_duck()` | `main()` | The primary entry point for any YankoviC program. All execution begins with the desire for a new duck. Its return type must be `spatula`. |
| `twinkie_wiener_sandwich` | `return` | Returns a value from a function. It is the final, questionable, yet delicious creation that you present to whatever called the function. |
| `accordion_solo` | `void` | Represents the absence of a value. It's a function that does something purely for the performance, without returning a result. |
| `perform_a_parody(text, ...)` | `printf`, `console.log` | Prints text (and optional values) to the terminal/console. Supports format codes: %verse, %spatula, %horoscope. |
| `flesh_eating_weasels(prompt)` | `scanf`, `cin >>`, `readline` | Reads input from the terminal/console. Takes an optional prompt string. Named after Al's panicked screaming in "Albuquerque." |

## Import Directives

| Directive | Description |
|---|---|
| `#eat <library.hat>` | Imports a standard library (angle brackets), always a `.hat` file |
| `#eat "filename.yc"` | Imports a user file (quotes), can be a `.hat` file |
| `#eat filename.yc` | Imports a user file (bare name), can be a `.hat` file |

## Comments

| Syntax | Description |
|---|---|
| `//` | Single-line comment. The only valid single comment syntax in YankoviC |
| `/*  */` | Multi-line comment. The only valid multi-line comment syntax in YankoviC |

## The "UHF" Graphics Library (`#eat <UHF.hat>`)

The Ultra-High Frequency library for all your graphical and user interface needs.

| Function / Constant | C++ Equivalent (Conceptual) | Description & Rationale |
|---|---|---|
| `start_the_show(w, h, title)` | `CreateWindowEx(...)` | Creates and displays a new graphics window. It's time to start the show! |
| `cancel_the_show()` | `DestroyWindow(...)` | Closes the graphics window. |
| `the_shows_over()` | `IsWindow(hwnd) == 0` | Returns `its_a_fact` if the user has closed the window. |
| `set_polka_speed(fps)` | N/A | Sets the target frame rate for the main animation loop. |
| `wait_for_a_moment(ms)` | `Sleep(ms)` | Pauses execution for a number of milliseconds. |
| `roll_the_camera()` | `BeginPaint(...)` | Begins a new frame for drawing. |
| `that_is_a_wrap()` | `EndPaint(...)`, `SwapBuffers(...)` | Completes the current frame and displays it on screen. |
| `paint_the_set(color)` | `FillRect(hdc, &rect, hbr)` | Fills the entire window with a background color, like painting a set for a TV show. |
| `pick_a_hawaiian_shirt(color)` | `CreateSolidBrush(color)` | Sets the drawing color for all subsequent shapes. Al is famous for them! |
| `draw_a_spamsicle(x,y,w,h)` | `Rectangle(hdc, ...)` | Draws a filled rectangle. It's rectangular, processed, and delicious. |
| `draw_a_big_ol_wheel_of_cheese(x,y,r)` | `Ellipse(hdc, ...)` | Draws a filled circle. A direct quote from the epic song "Albuquerque." |
| `print_a_string_at(text,x,y)` | `TextOut(hdc, ...)` | Draws a `verse` of text at a specific coordinate in a graphics window. Only available when using the UHF graphics library. |

## Output in YankoviC

YankoviC supports both terminal/console output and graphical/web output:

- Use `perform_a_parody(text, ...)` to print to the terminal/console.
- Use `print_a_string_at(text, x, y)` for graphical output (UHF library).
- Use web response functions for web output (see Like_a_Server and Weird_Wide_Web).

### Example: Console Output
```yankovic
// My Favorite Word Crime
spatula want_a_new_duck() {
    perform_a_parody("Hello, Weird World!");
    twinkie_wiener_sandwich 27;
}
```

### Example: Graphical Output
```yankovic
#eat <UHF.hat>

spatula main() {
    start_the_show(640, 480, "Hello Graphics!");
    print_a_string_at("Hello Weird World!", 100, 100);
    // ... more drawing code ...
    the_shows_over();
    twinkie_wiener_sandwich 0;
}
```

### Example: Basic Variables and Control Flow
```yankovic
spatula main() {
    spatula x = 42;
    lasagna y = 3.14;
    verse greeting = "Hello, YankoviC!";
    horoscope is_fun = its_a_fact;

    jeopardy (is_fun) {
        // Do something fun!
    } another_one {
        // Do something else
    }
    twinkie_wiener_sandwich 27;
}
```

### Example: Mathematical Functions
```yankovic
#eat <albuquerque.hat>

spatula main() {
    spatula a = 10;
    spatula b = 3;
    spatula r = yoda(a, b); // r = 10 % 3 = 1
    twinkie_wiener_sandwich 27;
}
```

// For web output, see the Like_a_Server and Weird_Wide_Web sections below.

### UHF Multimedia Functions

| Function | Description & Rationale |
|---|---|
| `Lossless_Laughter(url, type)` | Plays audio or video files. First argument is the file URL/path, second is "audio" or "video". Named after Al's ability to create perfect musical parodies with lossless quality. |
| `fat_frame(url, x, y, width, height)` | Displays image files at specified coordinates and size. All arguments required: image URL/path, x position, y position, width, height. Named after Al's classic "Fat" parody. |

### UHF Color Constants

| Constant | RGB Values | Description |
|---|---|---|
| `AL_RED` | (237, 28, 36) | The signature Al red |
| `WHITE_ZOMBIE` | (240, 240, 240) | Nearly white |
| `BLACK_MAGIC` | (16, 16, 16) | Nearly black |
| `SPAM_GREEN` | (0, 255, 0) | Bright green |
| `TWINKIE_GOLD` | (255, 242, 0) | Golden yellow |
| `ORANGE_CHEESE` | (255, 127, 39) | Cheesy orange |
| `SKY_BLUE_FOR_YOU` | (135, 206, 235) | Sky blue |
| `SILVER_SPATULA` | (200, 200, 200) | Silver gray |

## The "Virus_Alert" OS Library (`#eat <virus_alert.hat>`)

**"Virus Alert! Delete immediately before someone gets hurt!"**  
Operating system functions themed around the infamous "Virus Alert" song. Handle files, processes, and system operations with paranoid precision!

### File Operations

| Function | OS Equivalent | Description & Rationale |
|---|---|---|
| `legally_named_reggie(old_name, new_name)` | `rename()`, `mv` | Renames a file or directory. Everyone's legally named Reggie now! |
| `stinky_cheese(filename)` | `unlink()`, `rm` | Deletes a file. Like deleting emails with "stinky cheese" in the subject. |
| `forward_to_a_friend(source, destination)` | `copy()`, `cp` | Copies a file. Forward this to everyone you know! |
| `check_your_hard_drive(path)` | `stat()`, `ls` | Gets file information (size, modified date, etc.). Better check your hard drive! |
| `open_every_file(directory)` | `readdir()`, `ls` | Lists all files in a directory. Opening every file on your PC! |
| `really_big_attachment(filename)` | `filesize()` | Gets the size of a file in bytes. Is it suspiciously large? |

### Directory Operations

| Function | OS Equivalent | Description & Rationale |
|---|---|---|
| `make_a_backup_folder(dirname)` | `mkdir()` | Creates a new directory. Better make a backup! |
| `delete_your_homework(dirname)` | `rmdir()` | Removes an empty directory. Oops, there goes your homework! |
| `change_your_password_location(path)` | `chdir()`, `cd` | Changes the current working directory. Time to change locations! |
| `where_am_i_now()` | `getcwd()`, `pwd` | Gets the current working directory path. Are you lost in the file system? |

### Process Operations

| Function | OS Equivalent | Description & Rationale |
|---|---|---|
| `run_suspicious_program(command)` | `system()`, `exec()` | Executes a system command. Definitely not suspicious at all! |
| `terminate_everything()` | `exit()` | Terminates the current program. Panic button activated! |
| `check_running_programs()` | `ps`, Task Manager | Lists currently running processes. What's running on your system? |
| `kill_the_process(pid)` | `kill()` | Terminates a specific process by ID. Nuclear option! |

### System Information

| Function | OS Equivalent | Description & Rationale |
|---|---|---|
| `scan_your_system()` | System info calls | Gets basic system information (OS, memory, etc.). Full system scan! |
| `check_available_memory()` | `free`, memory APIs | Gets available RAM in bytes. Is your memory infected? |
| `get_virus_count()` | Random 0-3, weighted to 0 | Gets the number of viruses detected (0-3, heavily weighted towards 0). Usually clean! |
| `format_your_hard_drive()` | Does nothing | Pretends to format the drive (does nothing, for safety!). Just kidding! |

### Network Operations  

| Function | OS Equivalent | Description & Rationale |
|---|---|---|
| `send_to_everyone_you_know(message)` | Network broadcast | Sends a message to all network devices (simulated). Don't actually do this! |
| `disconnect_the_internet()` | Network disable | Disables network connection. Ultimate protection! |
| `check_suspicious_traffic()` | Network monitoring | Monitors network activity. What's going in and out? |

### Example: File Management
```yankovic
#eat <virus_alert.hat>

spatula want_a_new_duck() {
    // Check if a suspicious file exists
    jeopardy (check_your_hard_drive("suspicious.exe")) {
        perform_a_parody("Found suspicious file!");
        stinky_cheese("suspicious.exe");  // Delete it
        perform_a_parody("File deleted for safety!");
    }
    
    // Make a backup folder
    make_a_backup_folder("my_backups");
    
    // Copy important files
    forward_to_a_friend("important.txt", "my_backups/important_backup.txt");
    
    twinkie_wiener_sandwich 0;
}
```

## The "Albuquerque" Math Library (`#eat <albuquerque.hat>`)

For when you need to do some number crunching on your way to the Donut Shop.

| Function | C/C++ Equivalent | Description & Rationale |
|---|---|---|
| `sin(angle)` | `sin(angle)` from `<cmath>` | Calculates the sine of an angle (in radians). A standard, just like coleslaw. |
| `cos(angle)` | `cos(angle)` from `<cmath>` | Calculates the cosine of an angle (in radians). |
| `random_spatula()` | `rand() % 100` | Returns a random `spatula` (integer) between 0 and 99. |
| `yoda(a, b)` | `a % b` or `fmod(a, b)` | Calculates the remainder of `a` divided by `b`. A necessary function because the `%` operator is finicky. |

## The "Like_a_Server" Library (`#eat <like_a_server.hat>`)

**"I've been spending most my life, living in an Amish paradise"**  
Server-side web development the Amish way - building web servers with horse and buggy reliability!

### Server Management

| Function | Express.js Equivalent | Description & Rationale |
|---|---|---|
| `amish_barn_raising(port)` | `app.listen(port)` | Starts the web server on the specified port. Raising a barn requires community effort! |
| `amish_barn_teardown()` | `server.close()` | Stops the web server. Time to tear down the barn for winter. |
| `amish_barn_still_standing()` | `server.listening` | Returns `its_a_fact` if the server is still running. |

### Routing (Buggy Trails)

| Function | Express.js Equivalent | Description & Rationale |
|---|---|---|
| `amish_buggy_trail_get(path, handler)` | `app.get(path, handler)` | Creates a GET route. Navigate like horse and buggy trails! |
| `amish_barn_delivery_post(path, handler)` | `app.post(path, handler)` | Creates a POST route. Delivering goods to the barn. |
| `amish_quilting_update(path, handler)` | `app.put(path, handler)` | Creates a PUT route. Updating quilting patterns with care. |
| `amish_shunning_delete(path, handler)` | `app.delete(path, handler)` | Creates a DELETE route. The ultimate Amish punishment. |

### Request Handling

| Function | Express.js Equivalent | Description & Rationale |
|---|---|---|
| `eat_it_extract_body(request)` | `req.body` | Extracts the request body data. "Eat it" - get the meaty content! |
| `like_a_surgeon_slice_params(name)` | `req.params.name` | Gets URL parameters with surgical precision. |
| `amish_church_bell_query(name)` | `req.query.name` | Gets query parameters. Like asking the church bell ringer. |
| `amish_hat_headers(name)` | `req.headers.name` | Gets request headers. Reading the hat band information. |

### Response Handling

| Function | Express.js Equivalent | Description & Rationale |
|---|---|---|
| `amish_butter_churn_json(data, status)` | `res.status(status).json(data)` | Sends JSON response. Churned smooth like butter! |
| `amish_quilt_html_response(html, status)` | `res.status(status).send(html)` | Sends HTML response. Beautiful as a handmade quilt. |
| `amish_plain_text_response(text, status)` | `res.status(status).text(text)` | Sends plain text response. Simple and plain, the Amish way. |
| `amish_bonnet_header(name, value)` | `res.setHeader(name, value)` | Sets response headers. Like adjusting your bonnet. |

### Middleware

| Function | Express.js Equivalent | Description & Rationale |
|---|---|---|
| `amish_community_helper(middleware)` | `app.use(middleware)` | Adds middleware. The community helps with everything! |
| `amish_welcome_outsiders(cors_config)` | `app.use(cors())` | Enables CORS. Welcoming outsiders to the community. |
| `use_static_files(path)` | `app.use(express.static(path))` | Serves static files. Sharing the community's goods. |

### Database Operations

| Function | SQL Equivalent | Description & Rationale |
|---|---|---|
| `connect_database(connection_string)` | Database connection | Connects to a database. Joining the community storage. |
| `db_insert(table, data)` | `INSERT INTO table VALUES (...)` | Inserts data into database. Adding to the grain storage. |
| `db_select(table, conditions)` | `SELECT * FROM table WHERE ...` | Selects data from database. Checking the grain storage. |
| `db_update(table, data, conditions)` | `UPDATE table SET ... WHERE ...` | Updates database records. Maintaining the grain storage. |
| `db_delete(table, conditions)` | `DELETE FROM table WHERE ...` | Deletes database records. Removing spoiled grain. |

### Session Management

| Function | Express.js Equivalent | Description & Rationale |
|---|---|---|
| `create_session(user_data)` | `req.session.create()` | Creates a new user session. Welcoming someone to the family. |
| `get_session(session_id)` | `req.session` | Gets session data. Checking family records. |
| `update_session(session_id, data)` | `req.session.data = ...` | Updates session data. Updating family records. |
| `destroy_session(session_id)` | `req.session.destroy()` | Destroys a session. Ending family membership. |

### Authentication

| Function | Modern Equivalent | Description & Rationale |
|---|---|---|
| `generate_jwt_token(payload, secret)` | JWT token generation | Creates authentication tokens. Community identification badges. |
| `verify_jwt_token(token, secret)` | JWT token verification | Verifies authentication tokens. Checking community membership. |
| `hash_password(password)` | bcrypt hashing | Hashes passwords securely. Protecting family secrets. |
| `verify_password(password, hash)` | bcrypt verification | Verifies password against hash. Confirming family identity. |

### Logging and Utilities

| Function | Node.js Equivalent | Description & Rationale |
|---|---|---|
| `log_info(message)` | `console.log()` | Logs informational messages. Recording community events. |
| `log_error(message)` | `console.error()` | Logs error messages. Recording community troubles. |
| `get_timestamp()` | `Date.now()` | Gets current timestamp. Checking the church clock. |
| `amish_scripture_parse(json_string)` | `JSON.parse()` | Parses JSON data. Reading the sacred texts. |
| `amish_scripture_scribe(object)` | `JSON.stringify()` | Converts object to JSON. Writing the sacred texts. |

### Threading Model

| Function | Node.js Equivalent | Description & Rationale |
|---|---|---|
| `dumb_little_placard(data)` | `process.send()` | Sends message to worker process. Like posting community announcements. |
| `all_of_the_pentiums(callback)` | `cluster.fork()` | Creates worker processes. Using all available computing power. |
| `check_pentium_power()` | `os.cpus().length` | Gets number of CPU cores. Checking how many Pentiums you have. |

## The "Weird_Wide_Web" Library (`#eat <weird_wide_web.hat>`)

**"Living in an Amish paradise"**  
Client-side web development the Amish way - crafting HTML like fine woodwork and managing the DOM like a well-organized barn!

### Document Creation

| Function | HTML/JS Equivalent | Description & Rationale |
|---|---|---|
| `amish_quilt_creation()` | `document.createElement('html')` | Creates a new HTML document structure. Starting a new quilt pattern! |
| `amish_quilt_blessing(title)` | `document.title = title` | Sets the document title. Blessing the quilt with a name. |
| `amish_wisdom_tag(name, content)` | `<meta name="..." content="...">` | Adds meta tags to document head. Sharing Amish wisdom with the world. |

### HTML Elements (Wooden Craftsmanship)

| Function | HTML Equivalent | Description & Rationale |
|---|---|---|
| `amish_wooden_box(id, content)` | `<div id="...">content</div>` | Creates a div container. Carving a wooden box to hold things. |
| `amish_scripture_text(id, text)` | `<p id="...">text</p>` | Creates a paragraph. Writing scripture on wooden tablets. |
| `amish_church_sign(level, id, text)` | `<h1-6 id="...">text</h1-6>` | Creates headers. Church signs announce important messages. |
| `amish_wooden_button(id, text, onclick)` | `<button id="..." onclick="...">text</button>` | Creates clickable buttons. Hand-carved wooden buttons. |
| `amish_text_input(id, placeholder)` | `<input type="text" id="..." placeholder="...">` | Creates text input fields. Simple Amish forms. |
| `amish_text_area(id, rows, placeholder)` | `<textarea id="..." rows="...">placeholder</textarea>` | Creates multi-line text areas. Writing lengthy scripture. |
| `amish_wooden_link(id, href, text)` | `<a id="..." href="...">text</a>` | Creates hyperlinks. Wooden signposts to other places. |
| `amish_barn_image(id, src, alt)` | `<img id="..." src="..." alt="...">` | Displays images. Pictures of the family barn. |
| `amish_wooden_list(id, type)` | `<ul id="...">` or `<ol id="...">` | Creates lists. Organizing like a well-planned harvest. |
| `amish_list_item(id, content)` | `<li id="...">content</li>` | Creates list items. Individual items in the harvest list. |

### Styling (Plain and Simple)

| Function | CSS Equivalent | Description & Rationale |
|---|---|---|
| `amish_plain_style(id, property, value)` | `element.style.property = value` | Sets inline styles. Plain and simple, as it should be. |
| `amish_bonnet_class(id, className)` | `element.className = className` | Sets CSS classes. Putting on the proper bonnet. |
| `amish_hide_element(id)` | `element.style.display = 'none'` | Hides an element. Sometimes things need to be put away. |
| `amish_show_element(id)` | `element.style.display = 'block'` | Shows a hidden element. Bringing things back to the light. |

### DOM Manipulation (Community Organization)

| Function | JavaScript Equivalent | Description & Rationale |
|---|---|---|
| `amish_community_gathering(parentId, childId)` | `parent.appendChild(child)` | Adds element to parent. Bringing family together. |
| `amish_harvest_text(id)` | `element.textContent` | Gets element text content. Harvesting what was written. |
| `amish_clear_text(id, newText)` | `element.textContent = newText` | Sets element text content. Clearing the slate and writing anew. |
| `amish_community_announcement(id, message)` | `alert(message)` / custom modal | Shows messages to user. Important community announcements. |

### Animations (Simple Movements)

| Function | CSS/JS Equivalent | Description & Rationale |
|---|---|---|
| `amish_barn_fade_in(id, duration)` | CSS transitions / animations | Fades element in gradually. Like sunrise over the barn. |
| `amish_barn_fade_out(id, duration)` | CSS transitions / animations | Fades element out gradually. Like sunset behind the barn. |
| `amish_wooden_slide(id, direction, distance)` | CSS transforms | Slides element in direction. Moving furniture in the barn. |

### Special Functions

| Function | Modern Equivalent | Description & Rationale |
|---|---|---|
| `amish_quilt_display()` | Generate & open HTML | Creates complete HTML and opens in browser. Displaying the finished quilt! |
| `amish_add_to_quilt(element)` | Add to document body | Adds elements to the main document. Adding patches to the quilt. |

### Worker Management (Community Labor)

| Function | Web Workers Equivalent | Description & Rationale |
|---|---|---|
| `amish_single_worker(script)` | `new Worker(script)` | Creates a web worker. One person working alone. |
| `amish_whole_community(workers)` | Multiple workers | Manages multiple workers. The whole community working together. |
| `amish_headcount()` | `navigator.hardwareConcurrency` | Gets number of available workers. Counting heads for work distribution. |
| `amish_barn_cleanup()` | Worker termination | Cleans up worker resources. Cleaning the barn after work. |

---

## Summary: Building with YankoviC

YankoviC is a fully functional programming language that combines humor with serious programming capabilities. Here's how to approach different types of projects:

### For Basic Programming
- Use core language features: `spatula`, `lasagna`, `verse`, `horoscope`
- Control flow: `jeopardy`/`another_one`, `polka`, `hardware_store`
- File extension: `.yc`

### For Mathematical Applications
- Import: `#eat <albuquerque.hat>`
- Add trigonometry, random numbers, and modulus operations
- Perfect for scientific computing with a smile

### For Graphics and UI
- Import: `#eat <UHF.hat>`
- Create windows, draw shapes, handle user input
- Run with: `./yankovic filename.yc --electron`
- Supports animation, buttons, mouse/keyboard input

### For Server-Side Web Development
- Import: `#eat <like_a_server.hat>`
- Build web servers, APIs, handle routing
- Amish-themed functions for HTTP operations
- File extension: `.ycw`

### For Client-Side Web Development
- Import: `#eat <weird_wide_web.hat>`
- Generate HTML, manipulate DOM, apply styling
- Creates actual web pages that open in browsers
- File extension: `.ycw`

### Best Practices

1. **Start Simple**: Begin with basic examples, work up to complex applications
2. **Embrace the Theme**: The humorous naming is intentional and memorable
3. **Real Functionality**: Despite funny names, all functions provide serious programming capabilities
4. **Library Combinations**: You can import multiple libraries in one program
5. **Proper Syntax**: Always use `//` for comments, proper semicolons, and parentheses

### Example Project Structure
```
my-project/
  ├── main.yc              // Core application logic
  ├── math_utils.yc        // Mathematical helper functions
  ├── web_server.ycw       // Server-side web components
  ├── web_client.ycw       // Client-side web interface
  └── graphics_demo.yc     // Interactive visual components
```

**Remember**: YankoviC proves that programming languages can be both fun and functional. Whether you're building web applications, mathematical models, or interactive graphics, YankoviC provides all the tools you need - just with more accordion music and fewer electrons than you'd expect!


==================================================
### FILE: ./frontend/public/uhf-test.html
==================================================

<!DOCTYPE html>
<html>
<head>
    <title>UHF Test</title>
</head>
<body>
    <h1>UHF Test Page</h1>
    <button id="testBtn">Test UHF</button>
    <div id="log"></div>
    
    <script>
        const log = document.getElementById('log');
        function addLog(message) {
            log.innerHTML += '<div>' + message + '</div>';
            console.log(message);
        }
        
        document.getElementById('testBtn').addEventListener('click', async () => {
            addLog('Testing UHF functionality...');
            
            if (typeof window !== 'undefined' && window.uhfAPI) {
                addLog('UHF API is available');
                
                try {
                    // Test starting the show
                    const result = await window.uhfAPI.startTheShow({width: 400, height: 300, title: "Test Window"});
                    addLog('Start show result: ' + result);
                    
                    // Test drawing a simple frame
                    const testCommands = [
                        {command: 'paint_set', args: {r: 255, g: 0, b: 0, a: 255}}, // Red background
                        {command: 'pick_shirt', args: {r: 0, g: 255, b: 0, a: 255}}, // Green color
                        {command: 'draw_cheese', args: [200, 150, 50]} // Circle in center
                    ];
                    
                    const drawResult = await window.uhfAPI.executeDrawBuffer(testCommands);
                    addLog('Execute draw buffer result: ' + drawResult);
                } catch (error) {
                    addLog('UHF test error: ' + error);
                }
            } else {
                addLog('UHF API not available - running in non-Electron environment');
            }
        });
    </script>
</body>
</html>


==================================================
### FILE: ./frontend/public/config.json
==================================================

{
  "apiKeys": {
    "pollinations": "gsVU91PD7-aQ_W6k"
  },
  "activeAIService": "pollinations",
  "aiModels": [
    { "id": "openai-large", "name": "GPT-4.1" },
    { "id": "deepseek", "name": "DeepSeek-V3" },
    { "id": "grok", "name": "Grok 3 Mini" },
    { "id": "deepseek-reasoning", "name": "DeepSeek-R1" }
  ],
  "themes": {
    "yankovic-dark": {
      "base": "vs-dark",
      "inherit": true,
      "rules": [
        { "token": "keyword.control.yankovic", "foreground": "c586c0" },
        { "token": "keyword.type.yankovic", "foreground": "4ec9b0" },
        { "token": "keyword.return.yankovic", "foreground": "d16969" },
        { "token": "keyword.const.yankovic", "foreground": "569cd6" },
        { "token": "function.yankovic", "foreground": "dcdcaa" }
      ],
      "colors": { "editor.background": "#1e1e1e" }
    },
    "poodle-hat": {
      "base": "vs-dark",
      "inherit": false,
      "rules": [
        { "token": "", "foreground": "ffffff", "background": "000000" },
        { "token": "keyword.control.yankovic", "foreground": "ff0000", "fontStyle": "bold" },
        { "token": "keyword.type.yankovic", "foreground": "ff0000" },
        { "token": "keyword.return.yankovic", "foreground": "ff0000" },
        { "token": "keyword.const.yankovic", "foreground": "ff0000" },
        { "token": "string", "foreground": "e0e0e0" },
        { "token": "number", "foreground": "e0e0e0" },
        { "token": "comment", "foreground": "888888", "fontStyle": "italic" },
        { "token": "identifier", "foreground": "ffffff" },
        { "token": "function.yankovic", "foreground": "ffffff", "fontStyle": "bold" }
      ],
      "colors": {
        "editor.background": "#000000",
        "editor.foreground": "#ffffff",
        "editorCursor.foreground": "#ff0000",
        "editor.lineHighlightBackground": "#220000"
      }
    },
    "uhf-mode": {
      "base": "vs",
      "inherit": true,
      "rules": [
        { "token": "keyword.control.yankovic", "foreground": "FF4F00" },
        { "token": "keyword.type.yankovic", "foreground": "00A9E0" },
        { "token": "keyword.return.yankovic", "foreground": "9C27B0" },
        { "token": "keyword.const.yankovic", "foreground": "FFEB3B", "fontStyle": "bold" },
        { "token": "function.yankovic", "foreground": "4CAF50" },
        { "token": "string", "foreground": "333333" }
      ],
      "colors": {
        "editor.background": "#E6E6E6",
        "editor.foreground": "#212121",
        "editorCursor.foreground": "#FF4F00"
      }
    }
  }
}

==================================================
### FILE: ./frontend/src/index.css
==================================================

:root {
  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}


==================================================
### FILE: ./frontend/src/core/UHF.hat.js
==================================================

// This file is the JavaScript implementation of the UHF.hat standard library.
// It acts as a bridge between the YankoviC interpreter and the Electron backend.
// It uses the API exposed by the preload script, that's what we intend.

function getUHFAPI() {
    return (typeof window !== 'undefined' && window.uhfAPI) ? window.uhfAPI : null;
}

// NOTE: The command buffer is now a property of the interpreter instance (`this.drawCommandBuffer`).
// The module-level `drawCommandBuffer` and `flushDrawCommands` function have been removed.

export const UHF_LIBRARY = {
    // === WINDOW MANAGEMENT ===
    start_the_show: {
        type: 'NativeFunction',
        call: async function(args) {
            const [width, height, title] = args;
            const api = getUHFAPI();
            if (!api) {
                if (this.webUHF) {
                    this.webUHF.startTheShow(width, height, title);
                    this.showIsOver = false;
                    return 27;
                }
                // For CLI, we push a command to the interpreter's buffer.
                this.drawCommandBuffer.push({ command: 'start_show', args });
                return 1;
            }
            await api.startTheShow({ width, height, title });
            return 27;
        }
    },
    cancel_the_show: {
        type: 'NativeFunction',
        call: function() {
            const api = getUHFAPI();
            if (api) api.cancelTheShow();
            else if (this.webUHF) this.webUHF.isActive = false;
        }
    },
    the_shows_over: {
        type: 'NativeFunction',
        call: async function() {
            const api = getUHFAPI();
            if (api) return await api.isTheShowOver();
            if (this.webUHF) return this.webUHF.isTheShowOver();
            // In CLI mode, the interpreter manages this state.
            return this.showIsOver;
        }
    },
    set_polka_speed: { 
        type: 'NativeFunction', 
        call: function(args) {
            const api = getUHFAPI();
            if (api) api.startGameLoop(args[0] || 60);
        } 
    },

    // === FRAME MANAGEMENT ===
    roll_the_camera: { 
        type: 'NativeFunction', 
        call: function() { 
            // A new frame begins, so clear the interpreter's command buffer for this frame.
            this.drawCommandBuffer = [];
        } 
    },
    that_is_a_wrap: { 
        type: 'NativeFunction', 
        call: function() { 
            const api = getUHFAPI();
            if (api) {
                 if (this.drawCommandBuffer.length > 0) {
                    api.executeDrawBuffer(this.drawCommandBuffer);
                    this.drawCommandBuffer = [];
                }
            } else if (this.webUHF) {
                this.webUHF.executeDrawBuffer(this.drawCommandBuffer);
                this.drawCommandBuffer = [];
            } else {
                // For CLI modes (ASCII, PNG), add the render command.
                this.drawCommandBuffer.push({ command: 'render_frame', args: [] });
            }
        } 
    },
    wait_for_a_moment: { 
        type: 'NativeFunction', 
        call: function(args) { 
            this.drawCommandBuffer.push({command: 'wait', args: [args[0] || 1000]}); 
        } 
    },

    // === DRAWING COMMANDS ===
    paint_the_set: { 
        type: 'NativeFunction', 
        call: function(args) { 
            this.drawCommandBuffer.push({command: 'paint_set', args: [args[0]]}); 
        } 
    },
    pick_a_hawaiian_shirt: { 
        type: 'NativeFunction', 
        call: function(args) { 
            this.drawCommandBuffer.push({command: 'pick_shirt', args: [args[0]]}); 
        } 
    },
    draw_a_big_ol_wheel_of_cheese: { 
        type: 'NativeFunction', 
        call: function(args) { 
            this.drawCommandBuffer.push({command: 'draw_cheese', args: [args[0], args[1], args[2]]}); 
        } 
    },
    draw_a_spamsicle: { 
        type: 'NativeFunction', 
        call: function(args) { 
            this.drawCommandBuffer.push({command: 'draw_spamsicle', args: [args[0], args[1], args[2], args[3]]}); 
        } 
    },
    print_a_string_at: { 
        type: 'NativeFunction', 
        call: function(args) { 
            this.drawCommandBuffer.push({command: 'draw_text', args: [args[0], args[1], args[2]]}); 
        } 
    },

    // === UI, MEDIA, and MATH ===
    Lossless_Laughter: {
        type: 'NativeFunction',
        call: function(args) {
            this.drawCommandBuffer.push({command: 'play_media', args: [args[0], args[1] || 'audio']});
        }
    },
    fat_frame: {
        type: 'NativeFunction',
        call: function(args) {
            this.drawCommandBuffer.push({command: 'show_image', args: args});
        }
    },
    draw_a_button: { 
        type: 'NativeFunction', 
        call: function(args) { 
            this.drawCommandBuffer.push({command: 'draw_button', args: args }); 
        } 
    },
    button_was_clicked: {
        type: 'NativeFunction',
        call: function(args) {
            const buttonId = args[0];
            if (!this.uiState || !this.uiState.buttons || !this.uiState.buttons[buttonId]) {
                return false;
            }
            const clicked = this.uiState.buttons[buttonId].clicked;
            if (clicked) {
                this.uiState.buttons[buttonId].clicked = false;
            }
            return clicked;
        }
    },
    draw_a_checkbox: { 
        type: 'NativeFunction', 
        call: function(args) { this.drawCommandBuffer.push({command: 'draw_checkbox', args: args }); } 
    },
    get_checkbox_value: {
        type: 'NativeFunction',
        call: function(args) { 
            return this.uiState?.checkboxes?.[args[0]]?.checked || false;
        }
    },
    draw_a_slider: { 
        type: 'NativeFunction', 
        call: function(args) { this.drawCommandBuffer.push({command: 'draw_slider', args: args }); } 
    },
    get_slider_value: {
        type: 'NativeFunction',
        call: function(args) { 
            return this.uiState?.sliders?.[args[0]]?.value || 0;
        }
    },
    yoda: {
        type: 'NativeFunction',
        call: function(args) {
            const a = args[0];
            const b = args[1];
            return ((a % b) + b) % b;
        }
    },
    mouse_was_clicked: {
        type: 'NativeFunction',
        call: function() {
            const clicked = this.uiState?.mouse?.clicked || false;
            if (clicked && this.uiState?.mouse) {
                this.uiState.mouse.clicked = false;
            }
            return clicked;
        }
    },
    get_mouse_x: {
        type: 'NativeFunction',
        call: function() {
            return this.uiState?.mouse?.x || 0;
        }
    },
    get_mouse_y: {
        type: 'NativeFunction',
        call: function() {
            return this.uiState?.mouse?.y || 0;
        }
    },

    // === COLOR CONSTANTS ===
    AL_RED:           { r: 237, g: 28,  b: 36,  a: 255 },
    WHITE_ZOMBIE:     { r: 240, g: 240, b: 240, a: 255 },
    BLACK_MAGIC:      { r: 16,  g: 16,  b: 16,  a: 255 },
    SPAM_GREEN:       { r: 0,   g: 255, b: 0,   a: 255 },
    TWINKIE_GOLD:     { r: 255, g: 242, b: 0,   a: 255 },
    ORANGE_CHEESE:    { r: 255, g: 127, b: 39,  a: 255 },
    SKY_BLUE_FOR_YOU: { r: 135, g: 206, b: 235, a: 255 },
    SILVER_SPATULA:   { r: 200, g: 200, b: 200, a: 255 },
};

==================================================
### FILE: ./frontend/src/core/Like_a_Server.hat.js
==================================================

// Like_a_Server.hat - Server-side web development library for YankoviC
// "I've been spending most my life, living in an Amish paradise"
// Ironically building web servers the Amish way - no electricity, but somehow it works!

// Import Node.js HTTP module for actual server functionality
let http = null;
try {
    if (typeof require !== 'undefined') {
        http = require('http');
    }
} catch (e) {
    console.log('[Like_a_Server] Running in browser mode - server functionality limited');
}

function getAmishServerAPI() {
    return (typeof window !== 'undefined' && window.serverAPI) ? window.serverAPI : null;
}

// Amish server state management - kept simple, like barn construction
let amishServerState = {
    barnIsRaised: false,
    churchBellPort: 3000,
    buggyRoutes: new Map(),
    communityHelpers: [],
    familySessions: new Map(),
    grainStorages: new Map(),
    actualServer: null // Store the actual HTTP server
};

function raiseTheBarn() {
    const api = getAmishServerAPI();
    if (api) {
        return api.startServer(amishServerState.churchBellPort);
    } else {
        // Try to import Node.js http module for real server
        let http = null;
        console.log(`[Like_a_Server] DEBUG: typeof require = ${typeof require}`);
        console.log(`[Like_a_Server] DEBUG: typeof global = ${typeof global}`);
        console.log(`[Like_a_Server] DEBUG: typeof global.nodeModules = ${typeof global !== 'undefined' && global.nodeModules ? typeof global.nodeModules : 'undefined'}`);
        
        try {
            // Check if we're in Node.js environment and try different ways to get http module
            if (typeof global !== 'undefined' && global && global.nodeModules && global.nodeModules.http) {
                console.log(`[Like_a_Server] DEBUG: Using http module from global.nodeModules`);
                http = global.nodeModules.http;
                console.log(`[Like_a_Server] DEBUG: http module loaded successfully from global.nodeModules`);
            } else if (typeof require !== 'undefined') {
                console.log(`[Like_a_Server] DEBUG: require function available, attempting to load http module`);
                http = require('http');
                console.log(`[Like_a_Server] DEBUG: http module loaded successfully via require`);
            } else if (typeof global !== 'undefined' && global && global.require) {
                console.log(`[Like_a_Server] DEBUG: trying global.require`);
                http = global.require('http');
                console.log(`[Like_a_Server] DEBUG: http module loaded successfully via global.require`);
            } else {
                console.log(`[Like_a_Server] DEBUG: No way to access http module, will use mock implementation`);
            }
        } catch (e) {
            // Not in Node.js or module not available
            console.log(`[Like_a_Server] DEBUG: Error loading http module: ${e.message}`);
        }
        
        if (http) {
            // Real Node.js HTTP server implementation
            try {
                amishServerState.actualServer = http.createServer((req, res) => {
                    // Handle requests based on registered routes
                    const method = req.method;
                    const url = req.url;
                    const routeKey = `${method}:${url}`;
                    
                    if (amishServerState.buggyRoutes.has(routeKey)) {
                        const handlerName = amishServerState.buggyRoutes.get(routeKey);
                        res.writeHead(200, { 'Content-Type': 'text/html' });
                        res.end(`<h1>Amish Paradise Server</h1><p>Route: ${url}</p><p>Handler: ${handlerName}</p>`);
                    } else {
                        res.writeHead(404, { 'Content-Type': 'text/html' });
                        res.end('<h1>404 - Lost in the Cornfield</h1><p>This buggy trail does not exist!</p>');
                    }
                });
                
                amishServerState.actualServer.listen(amishServerState.churchBellPort, () => {
                    amishServerState.barnIsRaised = true;
                    console.log(`[Like_a_Server] Real Amish barn raised on port ${amishServerState.churchBellPort}!`);
                    console.log(`[Like_a_Server] Visit http://localhost:${amishServerState.churchBellPort} to see your Amish paradise!`);
                });
                
                // Keep the server alive by preventing the process from exiting
                // A running http server should keep the event loop alive, but in the context of the interpreter, we need to be more explicit.
                amishServerState.keepAlive = setInterval(() => {}, 1000);

                process.on('SIGINT', () => {
                    console.log('[Like_a_Server] Barn teardown initiated...');
                    if (amishServerState.actualServer) {
                        amishServerState.actualServer.close();
                    }
                    if (amishServerState.keepAlive) {
                        clearInterval(amishServerState.keepAlive);
                    }
                    process.exit(0);
                });
                
                return 27; // Success, blessed by the elders!
            } catch (error) {
                console.error(`[Like_a_Server] Barn raising failed: ${error.message}`);
                return 0;
            }
        } else {
            // Fallback mock implementation for CLI/testing
            amishServerState.barnIsRaised = true;
            console.log(`[Like_a_Server] Mock Amish barn raised on port ${amishServerState.churchBellPort} with community help!`);
            console.log(`[Like_a_Server] Server simulation running - use Ctrl+C to stop`);
            
            // Keep the mock server alive by preventing immediate exit
            amishServerState.keepAlive = setInterval(() => {
                // Just keep the event loop alive
            }, 1000);
            
            return 27;
        }
    }
}

export const LIKE_A_SERVER_LIBRARY = {
    // === AMISH SERVER MANAGEMENT ===
    // "I've been spending most my life, living in an Amish paradise"
    // Building web servers with horse and buggy reliability!
    amish_barn_raising: {
        type: 'NativeFunction',
        call: function(args) {
            const port = args[0] || 3000;
            amishServerState.churchBellPort = port;
            console.log(`[Like_a_Server] Raising the barn on port ${port} with community help...`);
            return raiseTheBarn();
        }
    },
    
    amish_barn_teardown: {
        type: 'NativeFunction',
        call: function() {
            if (amishServerState.actualServer) {
                amishServerState.actualServer.close(() => {
                    console.log('[Like_a_Server] Real barn torn down for winter, server stopped');
                });
                amishServerState.actualServer = null;
            }
            
            if (amishServerState.keepAlive) {
                clearInterval(amishServerState.keepAlive);
                amishServerState.keepAlive = null;
            }
            
            amishServerState.barnIsRaised = false;
            console.log('[Like_a_Server] Barn torn down for winter, server stopped');
            return 27;
        }
    },
    
    amish_barn_still_standing: {
        type: 'NativeFunction',
        call: function() { return amishServerState.barnIsRaised; }
    },

    // === BUGGY ROUTES ===
    // Navigate these paths like horse and buggy trails
    // Handle requests with plain folk wisdom!
    amish_buggy_trail_get: {
        type: 'NativeFunction',
        call: function(args) {
            const [path, handlerName] = args;
            amishServerState.buggyRoutes.set(`GET:${path}`, handlerName);
            console.log(`[Like_a_Server] Amish buggy trail (GET) marked: ${path}`);
            return 27;
        }
    },
    
    amish_barn_delivery_post: {
        type: 'NativeFunction',
        call: function(args) {
            const [path, handlerName] = args;
            amishServerState.buggyRoutes.set(`POST:${path}`, handlerName);
            console.log(`[Like_a_Server] Barn delivery route (POST) established: ${path}`);
            return 27;
        }
    },
    
    amish_quilting_update: {
        type: 'NativeFunction',
        call: function(args) {
            const [path, handlerName] = args;
            amishServerState.buggyRoutes.set(`PUT:${path}`, handlerName);
            console.log(`[Like_a_Server] Quilting pattern update (PUT) route: ${path}`);
            return 27;
        }
    },
    
    amish_shunning_delete: {
        type: 'NativeFunction',
        call: function(args) {
            const [path, handlerName] = args;
            amishServerState.buggyRoutes.set(`DELETE:${path}`, handlerName);
            console.log(`[Like_a_Server] Shunning route (DELETE) established: ${path}`);
            return 27;
        }
    },

    // === REQUEST HANDLING ===
    // Get the data from the request
    // Make your response the best!
    eat_it_extract_body: {
        type: 'NativeFunction',
        call: function(args) {
            // In real implementation, this would get the request body
            // For now, return mock data
            return JSON.stringify({ data: "mock request body" });
        }
    },
    
    like_a_surgeon_slice_params: {
        type: 'NativeFunction',
        call: function(args) {
            const paramName = args[0];
            // Mock parameter retrieval
            return `mock_param_${paramName}`;
        }
    },
    
    amish_church_bell_query: {
        type: 'NativeFunction',
        call: function(args) {
            const queryParam = args[0];
            // Mock query parameter retrieval - like asking the church bell ringer
            return `amish_query_${queryParam}`;
        }
    },
    
    amish_hat_headers: {
        type: 'NativeFunction',
        call: function(args) {
            const headerName = args[0];
            // Mock header retrieval - like reading the hat band
            return `amish_header_${headerName}`;
        }
    },

    // === PLAIN FOLK RESPONSE HANDLING ===
    // Send responses back with simple, honest values
    // Like butter churning, smooth and worthwhile!
    amish_butter_churn_json: {
        type: 'NativeFunction',
        call: function(args) {
            const [data, statusCode] = args;
            console.log(`[Like_a_Server] Churning JSON response (${statusCode || 200}):`, data);
            return 27;
        }
    },
    
    amish_quilt_html_response: {
        type: 'NativeFunction',
        call: function(args) {
            const [html, statusCode] = args;
            console.log(`[Like_a_Server] Sending hand-stitched HTML response (${statusCode || 200})`);
            return 27;
        }
    },
    
    amish_plain_text_response: {
        type: 'NativeFunction',
        call: function(args) {
            const [text, statusCode] = args;
            console.log(`[Like_a_Server] Sending plain text response (${statusCode || 200}):`, text);
            return 27;
        }
    },
    
    amish_bonnet_header: {
        type: 'NativeFunction',
        call: function(args) {
            const [name, value] = args;
            console.log(`[Like_a_Server] Setting bonnet header: ${name} = ${value}`);
            return 27;
        }
    },

    // === COMMUNITY HELPERS (MIDDLEWARE) ===
    // Add community helpers to assist with tasks
    // Like barn raising, everyone helps!
    amish_community_helper: {
        type: 'NativeFunction',
        call: function(args) {
            const helperName = args[0];
            amishServerState.communityHelpers.push(helperName);
            console.log(`[Like_a_Server] Community helper added: ${helperName}`);
            return 27;
        }
    },
    
    amish_welcome_outsiders: {
        type: 'NativeFunction',
        call: function() {
            console.log('[Like_a_Server] Welcoming outsiders (CORS enabled)');
            return 27;
        }
    },
    
    use_static_files: {
        type: 'NativeFunction',
        call: function(args) {
            const directory = args[0] || '/public';
            console.log(`[Like_a_Server] Static files served from: ${directory}`);
            return 27;
        }
    },

    // === DATABASE OPERATIONS ===
    // Connect to databases with ease
    // CRUD operations that are sure to please!
    connect_database: {
        type: 'NativeFunction',
        call: function(args) {
            const [dbName, connectionString] = args;
            serverState.databases.set(dbName, { connected: true, connectionString });
            console.log(`[Like_a_Server] Connected to database: ${dbName}`);
            return 27;
        }
    },
    
    db_insert: {
        type: 'NativeFunction',
        call: function(args) {
            const [dbName, table, data] = args;
            console.log(`[Like_a_Server] INSERT into ${dbName}.${table}:`, data);
            return Math.floor(Math.random() * 1000); // Mock ID
        }
    },
    
    db_select: {
        type: 'NativeFunction',
        call: function(args) {
            const [dbName, table, conditions] = args;
            console.log(`[Like_a_Server] SELECT from ${dbName}.${table} WHERE ${conditions}`);
            return JSON.stringify([{ id: 1, data: "mock_result" }]);
        }
    },
    
    db_update: {
        type: 'NativeFunction',
        call: function(args) {
            const [dbName, table, data, conditions] = args;
            console.log(`[Like_a_Server] UPDATE ${dbName}.${table} SET ${data} WHERE ${conditions}`);
            return 1; // Mock affected rows
        }
    },
    
    db_delete: {
        type: 'NativeFunction',
        call: function(args) {
            const [dbName, table, conditions] = args;
            console.log(`[Like_a_Server] DELETE from ${dbName}.${table} WHERE ${conditions}`);
            return 1; // Mock affected rows
        }
    },

    // === SESSION MANAGEMENT ===
    // Keep track of your users
    // Sessions that never confuse us!
    create_session: {
        type: 'NativeFunction',
        call: function(args) {
            const sessionId = 'session_' + Math.random().toString(36).substr(2, 9);
            const sessionData = args[0] || {};
            serverState.sessions.set(sessionId, sessionData);
            console.log(`[Like_a_Server] Session created: ${sessionId}`);
            return sessionId;
        }
    },
    
    get_session: {
        type: 'NativeFunction',
        call: function(args) {
            const sessionId = args[0];
            const session = serverState.sessions.get(sessionId);
            return session ? JSON.stringify(session) : null;
        }
    },
    
    update_session: {
        type: 'NativeFunction',
        call: function(args) {
            const [sessionId, data] = args;
            if (serverState.sessions.has(sessionId)) {
                serverState.sessions.set(sessionId, data);
                console.log(`[Like_a_Server] Session updated: ${sessionId}`);
                return 27;
            }
            return 0; // Session not found
        }
    },
    
    destroy_session: {
        type: 'NativeFunction',
        call: function(args) {
            const sessionId = args[0];
            const deleted = serverState.sessions.delete(sessionId);
            console.log(`[Like_a_Server] Session destroyed: ${sessionId}`);
            return deleted ? 27 : 0;
        }
    },

    // === AUTHENTICATION ===
    // Secure your server tight
    // JWT tokens shining bright!
    generate_jwt_token: {
        type: 'NativeFunction',
        call: function(args) {
            const payload = args[0] || {};
            const token = 'jwt_' + Math.random().toString(36).substr(2, 20);
            console.log(`[Like_a_Server] JWT generated for payload:`, payload);
            return token;
        }
    },
    
    verify_jwt_token: {
        type: 'NativeFunction',
        call: function(args) {
            const token = args[0];
            // Mock verification - in real implementation would verify signature
            const isValid = token && token.startsWith('jwt_');
            console.log(`[Like_a_Server] JWT verification: ${isValid ? 'VALID' : 'INVALID'}`);
            return isValid ? 27 : 0;
        }
    },
    
    hash_password: {
        type: 'NativeFunction',
        call: function(args) {
            const password = args[0];
            // Mock hashing - in real implementation would use bcrypt
            const hash = 'hash_' + Math.random().toString(36).substr(2, 10);
            console.log('[Like_a_Server] Password hashed');
            return hash;
        }
    },
    
    verify_password: {
        type: 'NativeFunction',
        call: function(args) {
            const [password, hash] = args;
            // Mock verification
            const isValid = hash && hash.startsWith('hash_');
            console.log(`[Like_a_Server] Password verification: ${isValid ? 'VALID' : 'INVALID'}`);
            return isValid ? 27 : 0;
        }
    },

    // === HTTP CLIENT (SERVER-SIDE FETCH) ===
    amish_fetch: {
        type: 'NativeFunction',
        call: async function(args) {
            const [url, method, body] = args;
            try {
                let httpModule = null;
                if (typeof require !== 'undefined') {
                    httpModule = require('http');
                } else if (typeof global !== 'undefined' && global.nodeModules && global.nodeModules.http) {
                    httpModule = global.nodeModules.http;
                }
                if (httpModule) {
                    return new Promise((resolve, reject) => {
                        const req = httpModule.request(url, { method: method || 'GET' }, (res) => {
                            let data = '';
                            res.on('data', chunk => data += chunk);
                            res.on('end', () => resolve(data));
                        });
                        req.on('error', reject);
                        if (method === 'POST' && body) req.write(body);
                        req.end();
                    });
                } else {
                    return '[Like_a_Server] No http module available in this environment';
                }
            } catch (e) {
                return `[Like_a_Server] Fetch error: ${e.message}`;
            }
        }
    },
    // === UTILITIES ===
    // Helper functions for your server
    // Make development much cleverer!
    log_info: {
        type: 'NativeFunction',
        call: function(args) {
            const message = args[0];
            console.log(`[Like_a_Server] INFO: ${message}`);
            return 27;
        }
    },
    
    log_error: {
        type: 'NativeFunction',
        call: function(args) {
            const message = args[0];
            console.error(`[Like_a_Server] ERROR: ${message}`);
            return 27;
        }
    },
    
    get_timestamp: {
        type: 'NativeFunction',
        call: function() { return Date.now(); }
    },
    
    amish_scripture_parse: {
        type: 'NativeFunction',
        call: function(args) {
            try {
                const parsed = JSON.parse(args[0]);
                return JSON.stringify(parsed); // Return as string for YankoviC
            } catch (e) {
                console.error('[Like_a_Server] Scripture parsing error:', e.message);
                return null;
            }
        }
    },
    
    amish_scripture_scribe: {
        type: 'NativeFunction',
        call: function(args) {
            try {
                return JSON.stringify(args[0]);
            } catch (e) {
                console.error('[Like_a_Server] Scripture scribing error:', e.message);
                return null;
            }
        }
    },

    // === THREADING MODELS ===
    // "All About the Pentiums" - choose your processing power!
    // Single-threaded = "Dumb Little Placard"
    // Multi-threaded = "All Of The Pentiums"
    dumb_little_placard: {
        type: 'NativeFunction',
        call: function(args) {
            const taskName = args[0] || "amish_task";
            console.log(`[Like_a_Server] Running ${taskName} on a single thread (like a simple wooden placard)`);
            // Mock single-threaded execution
            return 27;
        }
    },
    
    all_of_the_pentiums: {
        type: 'NativeFunction',
        call: function(args) {
            const taskName = args[0] || "amish_task";
            const threadCount = args[1] || 4;
            console.log(`[Like_a_Server] Running ${taskName} on ${threadCount} threads (ALL OF THE PENTIUMS!)`);
            // Mock multi-threaded execution
            return 27;
        }
    },
    
    // Check what threading model is being used
    check_pentium_power: {
        type: 'NativeFunction',
        call: function() {
            const cores = (typeof navigator !== 'undefined' && navigator.hardwareConcurrency) || 1;
            console.log(`[Like_a_Server] Available Pentium power: ${cores} cores`);
            return cores;
        }
    },
    
    amish_pentium_sleep: {
        type: 'NativeFunction',
        call: async function(args) {
            const ms = args[0] || 0;
            const pentium = args[1] || 0;
            console.log(`[Like_a_Server] Pentium ${pentium} is napping for ${ms}ms...`);
            await new Promise(r => setTimeout(r, ms));
            return 27;
        }
    }
};

==================================================
### FILE: ./frontend/src/core/virus_alert.hat.js
==================================================

// This file is the JavaScript implementation of the virus_alert.hat standard library.
// "Virus Alert! Delete immediately before someone gets hurt!"
// Operating system functions themed around the infamous "Virus Alert" song.

// Helper function to get file system API (Node.js/Electron context)
function getFileSystemAPI() {
    if (typeof window !== 'undefined' && window.require) {
        try {
            const fs = window.require('fs');
            const path = window.require('path');
            const os = window.require('os');
            const { exec } = window.require('child_process');
            return { fs, path, os, exec };
        } catch (e) {
            console.warn('File system API not available in this context');
            return null;
        }
    }
    return null;
}

// Weighted random function for virus count (heavily weighted towards 0)
function getVirusCountRandom() {
    const rand = Math.random();
    if (rand < 0.85) return 0;  // 85% chance of 0
    if (rand < 0.95) return 1;  // 10% chance of 1
    if (rand < 0.99) return 2;  // 4% chance of 2
    return 3;                   // 1% chance of 3
}

export const VIRUS_ALERT_LIBRARY = {
    // === FILE OPERATIONS ===
    // Handle files with paranoid precision!
    
    legally_named_reggie: {
        type: 'NativeFunction',
        call: function(args) {
            const [oldName, newName] = args;
            const api = getFileSystemAPI();
            if (!api) {
                console.log(`[VIRUS_ALERT] Would rename "${oldName}" to "${newName}" (simulation mode)`);
                return true;
            }
            try {
                api.fs.renameSync(oldName, newName);
                console.log(`[VIRUS_ALERT] File legally renamed to: ${newName}`);
                return true;
            } catch (error) {
                console.error(`[VIRUS_ALERT] Failed to rename file: ${error.message}`);
                return false;
            }
        }
    },

    stinky_cheese: {
        type: 'NativeFunction',
        call: function(args) {
            const [filename] = args;
            const api = getFileSystemAPI();
            if (!api) {
                console.log(`[VIRUS_ALERT] Would delete "${filename}" (simulation mode)`);
                return true;
            }
            try {
                api.fs.unlinkSync(filename);
                console.log(`[VIRUS_ALERT] Stinky file deleted: ${filename}`);
                return true;
            } catch (error) {
                console.error(`[VIRUS_ALERT] Failed to delete file: ${error.message}`);
                return false;
            }
        }
    },

    forward_to_a_friend: {
        type: 'NativeFunction',
        call: function(args) {
            const [source, destination] = args;
            const api = getFileSystemAPI();
            if (!api) {
                console.log(`[VIRUS_ALERT] Would copy "${source}" to "${destination}" (simulation mode)`);
                return true;
            }
            try {
                api.fs.copyFileSync(source, destination);
                console.log(`[VIRUS_ALERT] File forwarded to: ${destination}`);
                return true;
            } catch (error) {
                console.error(`[VIRUS_ALERT] Failed to copy file: ${error.message}`);
                return false;
            }
        }
    },

    check_your_hard_drive: {
        type: 'NativeFunction',
        call: function(args) {
            const [filepath] = args;
            const api = getFileSystemAPI();
            if (!api) {
                console.log(`[VIRUS_ALERT] Would check "${filepath}" (simulation mode)`);
                return { exists: true, size: 1024, modified: new Date().toISOString() };
            }
            try {
                const stats = api.fs.statSync(filepath);
                return {
                    exists: true,
                    size: stats.size,
                    modified: stats.mtime.toISOString(),
                    isDirectory: stats.isDirectory(),
                    isFile: stats.isFile()
                };
            } catch (error) {
                return { exists: false };
            }
        }
    },

    open_every_file: {
        type: 'NativeFunction',
        call: function(args) {
            const [directory] = args;
            const api = getFileSystemAPI();
            if (!api) {
                console.log(`[VIRUS_ALERT] Would list files in "${directory}" (simulation mode)`);
                return ['file1.txt', 'file2.txt', 'suspicious.exe'];
            }
            try {
                const files = api.fs.readdirSync(directory);
                console.log(`[VIRUS_ALERT] Found ${files.length} files in ${directory}`);
                return files;
            } catch (error) {
                console.error(`[VIRUS_ALERT] Failed to read directory: ${error.message}`);
                return [];
            }
        }
    },

    really_big_attachment: {
        type: 'NativeFunction',
        call: function(args) {
            const [filename] = args;
            const api = getFileSystemAPI();
            if (!api) {
                console.log(`[VIRUS_ALERT] Would check size of "${filename}" (simulation mode)`);
                return 1024000; // 1MB simulation
            }
            try {
                const stats = api.fs.statSync(filename);
                return stats.size;
            } catch (error) {
                console.error(`[VIRUS_ALERT] Failed to get file size: ${error.message}`);
                return 0;
            }
        }
    },

    // === DIRECTORY OPERATIONS ===
    
    make_a_backup_folder: {
        type: 'NativeFunction',
        call: function(args) {
            const [dirname] = args;
            const api = getFileSystemAPI();
            if (!api) {
                console.log(`[VIRUS_ALERT] Would create directory "${dirname}" (simulation mode)`);
                return true;
            }
            try {
                api.fs.mkdirSync(dirname, { recursive: true });
                console.log(`[VIRUS_ALERT] Backup folder created: ${dirname}`);
                return true;
            } catch (error) {
                console.error(`[VIRUS_ALERT] Failed to create directory: ${error.message}`);
                return false;
            }
        }
    },

    delete_your_homework: {
        type: 'NativeFunction',
        call: function(args) {
            const [dirname] = args;
            const api = getFileSystemAPI();
            if (!api) {
                console.log(`[VIRUS_ALERT] Would delete directory "${dirname}" (simulation mode)`);
                return true;
            }
            try {
                api.fs.rmdirSync(dirname);
                console.log(`[VIRUS_ALERT] Directory deleted: ${dirname}`);
                return true;
            } catch (error) {
                console.error(`[VIRUS_ALERT] Failed to delete directory: ${error.message}`);
                return false;
            }
        }
    },

    change_your_password_location: {
        type: 'NativeFunction',
        call: function(args) {
            const [path] = args;
            const api = getFileSystemAPI();
            if (!api) {
                console.log(`[VIRUS_ALERT] Would change to directory "${path}" (simulation mode)`);
                return true;
            }
            try {
                process.chdir(path);
                console.log(`[VIRUS_ALERT] Changed to directory: ${path}`);
                return true;
            } catch (error) {
                console.error(`[VIRUS_ALERT] Failed to change directory: ${error.message}`);
                return false;
            }
        }
    },

    where_am_i_now: {
        type: 'NativeFunction',
        call: function() {
            const api = getFileSystemAPI();
            if (!api) {
                console.log(`[VIRUS_ALERT] Current directory (simulation): /home/user`);
                return '/home/user';
            }
            return process.cwd();
        }
    },

    // === PROCESS OPERATIONS ===
    
    run_suspicious_program: {
        type: 'NativeFunction',
        call: function(args) {
            const [command] = args;
            const api = getFileSystemAPI();
            if (!api) {
                console.log(`[VIRUS_ALERT] Would run command "${command}" (simulation mode)`);
                return 'Command executed (simulation)';
            }
            return new Promise((resolve) => {
                api.exec(command, (error, stdout, stderr) => {
                    if (error) {
                        console.error(`[VIRUS_ALERT] Command failed: ${error.message}`);
                        resolve(`Error: ${error.message}`);
                    } else {
                        resolve(stdout || stderr || 'Command completed');
                    }
                });
            });
        }
    },

    terminate_everything: {
        type: 'NativeFunction',
        call: function() {
            console.log('[VIRUS_ALERT] PANIC BUTTON ACTIVATED! Terminating...');
            if (typeof process !== 'undefined') {
                process.exit(1);
            } else {
                // In browser context, we can't actually exit
                throw new Error('VIRUS_ALERT: Emergency termination!');
            }
        }
    },

    check_running_programs: {
        type: 'NativeFunction',
        call: function() {
            const api = getFileSystemAPI();
            if (!api) {
                console.log(`[VIRUS_ALERT] Running programs (simulation): chrome, vscode, suspicious.exe`);
                return ['chrome', 'vscode', 'suspicious.exe'];
            }
            // This would require platform-specific commands
            return new Promise((resolve) => {
                const command = process.platform === 'win32' ? 'tasklist' : 'ps aux';
                api.exec(command, (error, stdout) => {
                    if (error) {
                        resolve(['Error getting process list']);
                    } else {
                        resolve(stdout.split('\n').slice(0, 10)); // First 10 lines
                    }
                });
            });
        }
    },

    kill_the_process: {
        type: 'NativeFunction',
        call: function(args) {
            const [pid] = args;
            const api = getFileSystemAPI();
            if (!api) {
                console.log(`[VIRUS_ALERT] Would kill process ${pid} (simulation mode)`);
                return true;
            }
            try {
                process.kill(pid);
                console.log(`[VIRUS_ALERT] Process ${pid} terminated!`);
                return true;
            } catch (error) {
                console.error(`[VIRUS_ALERT] Failed to kill process: ${error.message}`);
                return false;
            }
        }
    },

    // === SYSTEM INFORMATION ===
    
    scan_your_system: {
        type: 'NativeFunction',
        call: function() {
            const api = getFileSystemAPI();
            if (!api) {
                return {
                    platform: 'simulation',
                    arch: 'x64',
                    memory: '8GB',
                    uptime: '24 hours'
                };
            }
            return {
                platform: api.os.platform(),
                arch: api.os.arch(),
                memory: `${Math.round(api.os.totalmem() / 1024 / 1024 / 1024)}GB`,
                uptime: `${Math.round(api.os.uptime() / 3600)} hours`
            };
        }
    },

    check_available_memory: {
        type: 'NativeFunction',
        call: function() {
            const api = getFileSystemAPI();
            if (!api) {
                console.log(`[VIRUS_ALERT] Available memory (simulation): 4GB`);
                return 4 * 1024 * 1024 * 1024; // 4GB in bytes
            }
            return api.os.freemem();
        }
    },

    get_virus_count: {
        type: 'NativeFunction',
        call: function() {
            const count = getVirusCountRandom();
            console.log(`[VIRUS_ALERT] Virus scan complete: ${count} threats detected`);
            return count;
        }
    },

    format_your_hard_drive: {
        type: 'NativeFunction',
        call: function() {
            console.log('[VIRUS_ALERT] JUST KIDDING! Not actually formatting anything!');
            console.log('[VIRUS_ALERT] This function is safe - it does absolutely nothing!');
            return 'Phew! Your data is safe. This was just a joke function!';
        }
    },

    // === NETWORK OPERATIONS ===
    
    send_to_everyone_you_know: {
        type: 'NativeFunction',
        call: function(args) {
            const [message] = args;
            console.log(`[VIRUS_ALERT] Simulating broadcast: "${message}"`);
            console.log('[VIRUS_ALERT] (Not actually sending to anyone - this is safe!)');
            return 'Message broadcast simulated (safely)';
        }
    },

    disconnect_the_internet: {
        type: 'NativeFunction',
        call: function() {
            console.log('[VIRUS_ALERT] Simulating internet disconnection...');
            console.log('[VIRUS_ALERT] (Your internet is still connected - this is just for fun!)');
            return 'Internet "disconnected" (simulation only)';
        }
    },

    check_suspicious_traffic: {
        type: 'NativeFunction',
        call: function() {
            const suspiciousCount = Math.floor(Math.random() * 5);
            console.log(`[VIRUS_ALERT] Network scan complete: ${suspiciousCount} suspicious connections found`);
            return {
                suspicious_connections: suspiciousCount,
                total_connections: Math.floor(Math.random() * 50) + 10,
                status: suspiciousCount > 2 ? 'ALERT' : 'OK'
            };
        }
    }
};

==================================================
### FILE: ./frontend/src/core/Weird_Wide_Web.hat.js
==================================================

// Weird_Wide_Web.hat.js - Client-side web development library for YankoviC
// "I've been spending most my life, living in an Amish paradise"
// Building web pages the plain folk way - no electricity, but somehow it works!

function getAmishWebAPI() {
    return (typeof window !== 'undefined' && window.webAPI) ? window.webAPI : null;
}

// Amish web page state management - simple and honest
let amishWebState = {
    currentQuilt: null,
    woodenElements: new Map(),
    plainStyles: new Map(),
    communityListeners: new Map(),
    barnRaisingAnimations: new Map()
};

function carveWoodenElement(tag, id, content) {
    const element = {
        tag: tag,
        id: id,
        content: content || '',
        attributes: new Map(),
        styles: new Map(),
        children: []
    };
    amishWebState.woodenElements.set(id, element);
    return element;
}

export const WEIRD_WIDE_WEB_LIBRARY = {
    // === SEARCH ENGINES & KNOWLEDGE ===
    // Search the web for text or images, or fetch Wikipedia articles!
    amish_textbook: {
        type: 'NativeFunction',
        call: function(args) {
            const [query] = args;
            const url = `https://api.duckduckgo.com/?q=${encodeURIComponent(query)}&format=json&no_redirect=1&no_html=1`;
            return (typeof fetch !== 'undefined' ? fetch(url).then(r => r.json()).then(data => data.AbstractText || data.Answer || (data.RelatedTopics && data.RelatedTopics[0] && data.RelatedTopics[0].Text) || '[No answer found]').catch(e => `[amish_textbook] Error: ${e.message}`) : Promise.resolve('[amish_textbook] No fetch available'));
        }
    },
    amish_photobook: {
        type: 'NativeFunction',
        call: function(args) {
            const [query] = args;
            const url = `https://duckduckgo.com/?q=${encodeURIComponent(query)}&iax=images&ia=images`;
            return Promise.resolve(url);
        }
    },
    amish_wikipedia: {
        type: 'NativeFunction',
        call: function(args) {
            const [query] = args;
            const url = `https://en.wikipedia.org/api/rest_v1/page/summary/${encodeURIComponent(query)}`;
            return (typeof fetch !== 'undefined' ? fetch(url).then(r => r.json()).then(data => data.extract || '[No summary found]').catch(e => `[amish_wikipedia] Error: ${e.message}`) : Promise.resolve('[amish_wikipedia] No fetch available'));
        }
    },
    amish_mail: {
        type: 'NativeFunction',
        call: async function(args) {
            console.error('[amish_mail] Called with args:', args);
            return '[amish_mail] This function has been removed.';
        }
    },
    // === AMISH QUILT MANAGEMENT ===
    // Create your web quilt masterpiece
    // HTML structure sewn with care and peace!
    amish_quilt_creation: {
        type: 'NativeFunction',
        call: function(args) {
            const [title, lang] = args;
            amishWebState.currentQuilt = {
                title: title || 'Amish YankoviC Web Quilt',
                lang: lang || 'en',
                head: [],
                body: []
            };
            console.log(`[Weird_Wide_Web] Created Amish web quilt: ${title}`);
            return 27;
        }
    },
    
    amish_quilt_blessing: {
        type: 'NativeFunction',
        call: function(args) {
            const title = args[0];
            if (amishWebState.currentQuilt) {
                amishWebState.currentQuilt.title = title;
                console.log(`[Weird_Wide_Web] Quilt blessed with title: ${title}`);
            }
            return 27;
        }
    },
    
    amish_wisdom_tag: {
        type: 'NativeFunction',
        call: function(args) {
            const [name, content] = args;
            if (amishWebState.currentQuilt) {
                amishWebState.currentQuilt.head.push({ tag: 'meta', name, content });
                console.log(`[Weird_Wide_Web] Wisdom tag added: ${name} = ${content}`);
            }
            return 27;
        }
    },

    // === WOODEN HTML ELEMENTS ===
    // Carve your DOM like a master woodworker
    // Elements as sturdy as a barn!
    amish_wooden_box: {
        type: 'NativeFunction',
        call: function(args) {
            const [id, content] = args;
            const element = carveWoodenElement('div', id, content);
            console.log(`[Weird_Wide_Web] Wooden box carved: ${id}`);
            return 27;
        }
    },
    
    amish_scripture_text: {
        type: 'NativeFunction',
        call: function(args) {
            const [id, text] = args;
            const element = carveWoodenElement('p', id, text);
            console.log(`[Weird_Wide_Web] Scripture text carved: ${id}`);
            return 27;
        }
    },
    
    amish_church_sign: {
        type: 'NativeFunction',
        call: function(args) {
            const [level, id, text] = args;
            const headingTag = `h${Math.min(Math.max(level, 1), 6)}`;
            const element = carveWoodenElement(headingTag, id, text);
            console.log(`[Weird_Wide_Web] Church sign carved: ${id} (${headingTag})`);
            return 27;
        }
    },

    amish_wooden_button: {
        type: 'NativeFunction',
        call: function(args) {
            const [id, text] = args;
            const element = carveWoodenElement('button', id, text);
            console.log(`[Weird_Wide_Web] Wooden button carved: ${id}`);
            return 27;
        }
    },

    amish_text_input: {
        type: 'NativeFunction',
        call: function(args) {
            const [id, placeholder] = args;
            const element = carveWoodenElement('input', id, '');
            element.attributes.set('type', 'text');
            element.attributes.set('placeholder', placeholder || '');
            console.log(`[Weird_Wide_Web] Text input field carved: ${id}`);
            return 27;
        }
    },

    amish_text_area: {
        type: 'NativeFunction',
        call: function(args) {
            const [id, placeholder] = args;
            const element = carveWoodenElement('textarea', id, '');
            element.attributes.set('placeholder', placeholder || '');
            console.log(`[Weird_Wide_Web] Text area carved: ${id}`);
            return 27;
        }
    },

    amish_wooden_link: {
        type: 'NativeFunction',
        call: function(args) {
            const [id, text, href] = args;
            const element = carveWoodenElement('a', id, text);
            element.attributes.set('href', href || '#');
            console.log(`[Weird_Wide_Web] Wooden link carved: ${id}`);
            return 27;
        }
    },

    amish_barn_image: {
        type: 'NativeFunction',
        call: function(args) {
            const [id, src, alt] = args;
            const element = carveWoodenElement('img', id, '');
            element.attributes.set('src', src || '');
            element.attributes.set('alt', alt || 'Amish crafted image');
            console.log(`[Weird_Wide_Web] Barn image placed: ${id}`);
            return 27;
        }
    },

    amish_wooden_list: {
        type: 'NativeFunction',
        call: function(args) {
            const [id, ordered] = args;
            const listTag = ordered ? 'ol' : 'ul';
            const element = carveWoodenElement(listTag, id, '');
            console.log(`[Weird_Wide_Web] Wooden list carved: ${id} (${listTag})`);
            return 27;
        }
    },

    amish_list_item: {
        type: 'NativeFunction',
        call: function(args) {
            const [id, text] = args;
            const element = carveWoodenElement('li', id, text);
            console.log(`[Weird_Wide_Web] List item carved: ${id}`);
            return 27;
        }
    },

    // === PLAIN STYLING ===
    // Style with honesty and simplicity
    // No fancy decorations, just plain beauty!
    amish_plain_style: {
        type: 'NativeFunction',
        call: function(args) {
            const [elementId, property, value] = args;
            const element = amishWebState.woodenElements.get(elementId);
            if (element) {
                element.styles.set(property, value);
                console.log(`[Weird_Wide_Web] Plain style applied to ${elementId}: ${property} = ${value}`);
            }
            return 27;
        }
    },

    amish_bonnet_class: {
        type: 'NativeFunction',
        call: function(args) {
            const [elementId, className] = args;
            const element = amishWebState.woodenElements.get(elementId);
            if (element) {
                element.attributes.set('class', className);
                console.log(`[Weird_Wide_Web] Bonnet class added to ${elementId}: ${className}`);
            }
            return 27;
        }
    },

    amish_hide_element: {
        type: 'NativeFunction',
        call: function(args) {
            const elementId = args[0];
            const element = amishWebState.woodenElements.get(elementId);
            if (element) {
                element.styles.set('display', 'none');
                console.log(`[Weird_Wide_Web] Element hidden: ${elementId}`);
            }
            return 27;
        }
    },

    amish_show_element: {
        type: 'NativeFunction',
        call: function(args) {
            const elementId = args[0];
            const element = amishWebState.woodenElements.get(elementId);
            if (element) {
                element.styles.set('display', 'block');
                console.log(`[Weird_Wide_Web] Element shown: ${elementId}`);
            }
            return 27;
        }
    },

    // === COMMUNITY INTERACTIONS ===
    // Handle events like community gatherings
    // Everyone participates in the barn raising!
    amish_community_gathering: {
        type: 'NativeFunction',
        call: function(args) {
            const [elementId, eventType, handlerName] = args;
            const key = `${elementId}:${eventType}`;
            amishWebState.communityListeners.set(key, handlerName);
            console.log(`[Weird_Wide_Web] Community gathering planned for ${elementId} on ${eventType}`);
            return 27;
        }
    },

    amish_harvest_text: {
        type: 'NativeFunction',
        call: function(args) {
            const elementId = args[0];
            const element = amishWebState.woodenElements.get(elementId);
            if (element && (element.tag === 'input' || element.tag === 'textarea')) {
                // Mock text retrieval
                return `harvested_text_from_${elementId}`;
            }
            return '';
        }
    },

    amish_clear_text: {
        type: 'NativeFunction',
        call: function(args) {
            const elementId = args[0];
            const element = amishWebState.woodenElements.get(elementId);
            if (element && (element.tag === 'input' || element.tag === 'textarea')) {
                element.content = '';
                console.log(`[Weird_Wide_Web] Text cleared from ${elementId}`);
            }
            return 27;
        }
    },

    amish_community_announcement: {
        type: 'NativeFunction',
        call: function(args) {
            const message = args[0];
            console.log(`[Weird_Wide_Web] Community announcement: ${message}`);
            // Mock alert functionality
            return 27;
        }
    },

    // === BARN RAISING ANIMATIONS ===
    // Simple, honest animations
    // Like watching the barn go up!
    amish_barn_fade_in: {
        type: 'NativeFunction',
        call: function(args) {
            const [elementId, duration] = args;
            console.log(`[Weird_Wide_Web] Barn fade-in animation for ${elementId} over ${duration || 1000}ms`);
            return 27;
        }
    },

    amish_barn_fade_out: {
        type: 'NativeFunction',
        call: function(args) {
            const [elementId, duration] = args;
            console.log(`[Weird_Wide_Web] Barn fade-out animation for ${elementId} over ${duration || 1000}ms`);
            return 27;
        }
    },

    amish_wooden_slide: {
        type: 'NativeFunction',
        call: function(args) {
            const [elementId, direction, distance] = args;
            console.log(`[Weird_Wide_Web] Wooden slide animation for ${elementId}: ${direction} ${distance}px`);
            return 27;
        }
    },

    // === HTTP FETCH (INTERNET ACCESS) ===
    // Fetch real web pages, the Amish way!
    amish_fetch: {
        type: 'NativeFunction',
        call: async function(args) {
            const [url, method, body] = args;
            try {
                let response;
                if (typeof fetch !== 'undefined') {
                    response = await fetch(url, {
                        method: method || 'GET',
                        headers: { 'Content-Type': 'text/plain' },
                        body: method === 'POST' ? body : undefined
                    });
                    const text = await response.text();
                    return text;
                } else if (typeof window !== 'undefined' && window.webAPI && window.webAPI.fetch) {
                    // Use custom webAPI if available
                    return await window.webAPI.fetch(url, method, body);
                } else {
                    return '[Weird_Wide_Web] No fetch available in this environment';
                }
            } catch (e) {
                return `[Weird_Wide_Web] Fetch error: ${e.message}`;
            }
        }
    },
    // === QUILT ASSEMBLY ===
    // Put all the pieces together
    // Display your beautiful creation!
    amish_quilt_display: {
        type: 'NativeFunction',
        call: function() {
            if (amishWebState.currentQuilt) {
                console.log('[Weird_Wide_Web] Displaying Amish web quilt...');
                const html = generateAmishQuiltHTML();
                console.log('Generated HTML:', html);
                
                // Try to save and open HTML file using YankoviC file API
                if (typeof global !== 'undefined' && global.yankovicFileAPI) {
                    try {
                        const api = global.yankovicFileAPI;
                        
                        // Generate unique filename
                        const timestamp = Date.now();
                        const filename = `amish_quilt_${timestamp}.html`;
                        const filepath = `temp_web/${filename}`;
                        
                        // Save HTML to file
                        const fullPath = api.writeFile(filepath, html);
                        console.log(`[Weird_Wide_Web] Amish quilt saved to: ${fullPath}`);
                        
                        // Open in default browser
                        api.openInBrowser(fullPath);
                        console.log(`[Weird_Wide_Web] Opening Amish quilt in browser...`);
                        
                        // Store filepath for cleanup
                        amishWebState.currentQuilt.tempFile = fullPath;
                        
                        // Set up cleanup after 30 seconds
                        setTimeout(() => {
                            try {
                                if (api.deleteFile(fullPath)) {
                                    console.log(`[Weird_Wide_Web] Cleaned up temp file: ${filename}`);
                                }
                            } catch (e) {
                                console.log(`[Weird_Wide_Web] Could not clean up temp file: ${e.message}`);
                            }
                        }, 30000);
                        
                    } catch (error) {
                        console.log(`[Weird_Wide_Web] Browser opening failed: ${error.message}`);
                    }
                } else {
                    console.log('[Weird_Wide_Web] File API not available - HTML display only');
                }
                
                return 27;
            }
            console.log('[Weird_Wide_Web] No quilt to display!');
            return 0;
        }
    },

    amish_add_to_quilt: {
        type: 'NativeFunction',
        call: function(args) {
            const [parentId, childId] = args;
            const parent = amishWebState.woodenElements.get(parentId);
            const child = amishWebState.woodenElements.get(childId);
            
            if (parent && child) {
                parent.children.push(childId);
                console.log(`[Weird_Wide_Web] Added ${childId} to ${parentId}`);
            }
            return 27;
        }
    },

    // === THREADING MODELS ===
    // "All About the Pentiums" for client-side processing!
    // Choose your barn raising workforce wisely.
    amish_single_worker: {
        type: 'NativeFunction',
        call: function(args) {
            const taskName = args[0] || "amish_web_task";
            console.log(`[Weird_Wide_Web] ${taskName} handled by a single Amish worker (Dumb Little Placard style)`);
            return 27;
        }
    },
    
    amish_whole_community: {
        type: 'NativeFunction',
        call: function(args) {
            const taskName = args[0] || "amish_web_task";
            const workerCount = args[1] || 4;
            console.log(`[Weird_Wide_Web] ${taskName} handled by ${workerCount} Amish workers (ALL OF THE PENTIUMS community style!)`);
            return 27;
        }
    },
    
    amish_headcount: {
        type: 'NativeFunction',
        call: function() {
            const workers = (typeof navigator !== 'undefined' && navigator.hardwareConcurrency) || 1;
            console.log(`[Weird_Wide_Web] Available Amish community members: ${workers}`);
            return workers;
        }
    },

    // Clean up temp files manually
    amish_barn_cleanup: {
        type: 'NativeFunction',
        call: function() {
            if (typeof global !== 'undefined' && global.yankovicFileAPI) {
                try {
                    const api = global.yankovicFileAPI;
                    
                    if (amishWebState.currentQuilt && amishWebState.currentQuilt.tempFile) {
                        const filepath = amishWebState.currentQuilt.tempFile;
                        if (api.deleteFile(filepath)) {
                            console.log(`[Weird_Wide_Web] Manually cleaned up temp file`);
                            delete amishWebState.currentQuilt.tempFile;
                        }
                    }
                    return 27;
                } catch (error) {
                    console.log(`[Weird_Wide_Web] Cleanup failed: ${error.message}`);
                    return 0;
                }
            } else {
                console.log('[Weird_Wide_Web] File API not available for cleanup');
                return 0;
            }
        }
    },

    // === AI CHAT & GENERIC API CALL (amish_mail) ===
    // Send a prompt to a GenAI/text API (e.g., Pollinations, OpenAI, etc.)
    // Usage: amish_mail(prompt, model="openai", apiKey=null)
    amish_mail: {
        type: 'NativeFunction',
        call: async function(args) {
            const prompt = args[0] || '';
            const model = args[1] || 'openai';
            const apiKey = args[2] || null;
            const systemPrompt = args[3] || 'You are a helpful asistant written in the programming language of YankoviC, inspired completely by Weird Al Yankovic. You will perform any request given to you, and act in any way the user asks. You\'re name is "Al"';
            // Build the URL for Pollinations text API
            let url = `https://text.pollinations.ai/${encodeURIComponent(prompt)}?model=${encodeURIComponent(model)}`;
            let headers = { 'Content-Type': 'text/plain' };
            if (apiKey) headers['Authorization'] = `Bearer ${apiKey}`;
            // Add system prompt as a header if provided (API must support this)
            if (systemPrompt) headers['X-System-Prompt'] = systemPrompt;
            try {
                if (typeof fetch !== 'undefined') {
                    const response = await fetch(url, { method: 'GET', headers });
                    return await response.text();
                } else if (typeof window !== 'undefined' && window.webAPI && window.webAPI.fetch) {
                    return await window.webAPI.fetch(url, 'GET', null, headers);
                } else {
                    return '[amish_mail] No fetch available in this environment';
                }
            } catch (e) {
                return `[amish_mail] Error: ${e.message}`;
            }
        }
    },

    amish_pentium_sleep: {
        type: 'NativeFunction',
        call: async function(args) {
            const ms = args[0] || 0;
            const pentium = args[1] || 0;
            console.log(`[Weird_Wide_Web] Pentium ${pentium} is napping for ${ms}ms...`);
            await new Promise(r => setTimeout(r, ms));
            return 27;
        }
    },
};

// Helper function to generate HTML for the complete quilt
function generateAmishQuiltHTML() {
    if (!amishWebState.currentQuilt) return '';
    
    let html = '<!DOCTYPE html>\n';
    html += `<html lang="${amishWebState.currentQuilt.lang}">\n`;
    html += '<head>\n';
    html += `  <title>${amishWebState.currentQuilt.title}</title>\n`;
    
    // Add meta tags
    for (const meta of amishWebState.currentQuilt.head) {
        html += `  <meta name="${meta.name}" content="${meta.content}">\n`;
    }
    
    html += '</head>\n<body>\n';
    
    // Add all elements that don't have parents (root elements)
    for (const [id, element] of amishWebState.woodenElements) {
        if (!hasParent(id)) {
            html += generateElementHTML(element);
        }
    }
    
    html += '</body>\n</html>';
    return html;
}

// Helper function to check if element has a parent
function hasParent(elementId) {
    for (const [id, element] of amishWebState.woodenElements) {
        if (element.children.includes(elementId)) {
            return true;
        }
    }
    return false;
}

// Helper function to generate HTML for an element
function generateElementHTML(element) {
    let html = `<${element.tag}`;
    
    // Add ID
    html += ` id="${element.id}"`;
    
    // Add attributes
    for (const [attr, value] of element.attributes) {
        html += ` ${attr}="${value}"`;
    }
    
    // Add inline styles
    if (element.styles.size > 0) {
        let styleStr = '';
        for (const [property, value] of element.styles) {
            styleStr += `${property}: ${value}; `;
        }
        html += ` style="${styleStr}"`;
    }
    
    // Self-closing tags
    if (['img', 'input', 'br', 'hr', 'meta', 'link'].includes(element.tag)) {
        html += ' />';
    } else {
        html += '>';
        
        // Add content
        if (element.content) {
            html += element.content;
        }
        
        // Add child elements
        for (const childId of element.children) {
            const child = amishWebState.woodenElements.get(childId);
            if (child) {
                html += generateElementHTML(child);
            }
        }
        
        html += `</${element.tag}>`;
    }
    
    return html + '\n';
}

export function loadWeird_Wide_WebLibrary() {
    return WEIRD_WIDE_WEB_LIBRARY;
}

==================================================
### FILE: ./frontend/src/core/webUHF.js
==================================================

// Web-based UHF graphics fallback
// This provides basic graphics support when not running in Electron

export class WebUHFRenderer {
    constructor() {
        this.canvas = null;
        this.ctx = null;
        this.isActive = false;
        this.currentColor = '#FFFFFF';
        this.backgroundColor = '#000000';
        this.uiElements = {
            buttons: {},
            textBoxes: {},
            checkboxes: {},
            sliders: {}
        };
        this.mouseState = { x: 0, y: 0, clicked: false };
        this.keyState = {};
    }

    startTheShow(width, height, title) {
        // Create a popup window with a canvas
        const popup = window.open('', '_blank', `width=${width},height=${height},scrollbars=no,resizable=no`);
        if (!popup) {
            console.error('Popup blocked! Please allow popups for UHF graphics.');
            return false;
        }

        popup.document.title = title;
        popup.document.body.style.margin = '0';
        popup.document.body.style.padding = '0';
        popup.document.body.style.overflow = 'hidden';
        popup.document.body.style.backgroundColor = '#000';

        this.canvas = popup.document.createElement('canvas');
        this.canvas.width = width;
        this.canvas.height = height;
        this.canvas.style.display = 'block';
        
        popup.document.body.appendChild(this.canvas);
        this.ctx = this.canvas.getContext('2d');
        this.isActive = true;

        // Add event listeners
        this.setupEventListeners(popup);

        return true;
    }

    setupEventListeners(popup) {
        this.canvas.addEventListener('mousemove', (e) => {
            const rect = this.canvas.getBoundingClientRect();
            this.mouseState.x = e.clientX - rect.left;
            this.mouseState.y = e.clientY - rect.top;
        });

        this.canvas.addEventListener('click', (e) => {
            const rect = this.canvas.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;
            this.mouseState.clicked = true;

            // Check button clicks
            for (const [id, button] of Object.entries(this.uiElements.buttons)) {
                if (x >= button.x && x <= button.x + button.width &&
                    y >= button.y && y <= button.y + button.height) {
                    button.clicked = true;
                }
            }

            setTimeout(() => { this.mouseState.clicked = false; }, 100);
        });

        popup.addEventListener('keydown', (e) => {
            this.keyState[e.key.toLowerCase()] = true;
        });

        popup.addEventListener('keyup', (e) => {
            this.keyState[e.key.toLowerCase()] = false;
        });

        popup.addEventListener('beforeunload', () => {
            this.isActive = false;
        });
    }

    executeDrawBuffer(buffer) {
        if (!this.ctx || !this.isActive) return;

        for (const cmd of buffer) {
            this.executeCommand(cmd);
        }
    }

    executeCommand(cmd) {
        if (!this.ctx) return;

        switch (cmd.command) {
            case 'play_media': {
                // args: [mediaUrl, type ('audio'|'video')]
                const [mediaUrl, type] = cmd.args;
                let mediaElem = this.mediaElem;
                if (mediaElem && mediaElem.parentNode) mediaElem.parentNode.removeChild(mediaElem);
                mediaElem = document.createElement(type === 'video' ? 'video' : 'audio');
                mediaElem.src = mediaUrl;
                mediaElem.autoplay = true;
                mediaElem.controls = true;
                mediaElem.style.position = 'absolute';
                mediaElem.style.left = '0';
                mediaElem.style.top = '0';
                mediaElem.style.maxWidth = '100%';
                mediaElem.style.maxHeight = '100%';
                mediaElem.style.zIndex = 1000;
                this.canvas.parentNode.appendChild(mediaElem);
                this.mediaElem = mediaElem;
                break;
            }
            case 'show_image': {
                // args: [imageUrl, x, y, width, height]
                const [imageUrl, x, y, width, height] = cmd.args;
                const img = new window.Image();
                img.onload = () => {
                    this.ctx.drawImage(img, x || 0, y || 0, width || img.width, height || img.height);
                };
                img.src = imageUrl;
                break;
            }
            case 'clear_screen':
                this.backgroundColor = cmd.args[0] || '#000000';
                this.ctx.fillStyle = this.backgroundColor;
                this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
                break;

            case 'set_color':
                const [r, g, b, a] = cmd.args;
                this.currentColor = `rgba(${r || 0}, ${g || 0}, ${b || 0}, ${(a !== undefined ? a : 255) / 255})`;
                this.ctx.fillStyle = this.currentColor;
                break;

            case 'draw_circle':
                const [cx, cy, radius] = cmd.args;
                this.ctx.fillStyle = this.currentColor;
                this.ctx.beginPath();
                this.ctx.arc(cx, cy, radius, 0, 2 * Math.PI);
                this.ctx.fill();
                break;

            case 'draw_rectangle':
                const [x, y, width, height] = cmd.args;
                this.ctx.fillStyle = this.currentColor;
                this.ctx.fillRect(x, y, width, height);
                break;

            case 'draw_text':
            case 'print_text':
                const [text, textX, textY] = cmd.args;
                this.ctx.fillStyle = this.currentColor;
                this.ctx.font = '16px Arial';
                this.ctx.fillText(text.toString(), textX, textY);
                break;

            case 'draw_button':
                const [btnX, btnY, btnWidth, btnHeight, btnText, btnId] = cmd.args;
                
                // Store button for interaction
                this.uiElements.buttons[btnId] = { 
                    x: btnX, y: btnY, width: btnWidth, height: btnHeight, clicked: false 
                };

                // Draw button
                this.ctx.fillStyle = '#ddd';
                this.ctx.fillRect(btnX, btnY, btnWidth, btnHeight);
                this.ctx.strokeStyle = '#999';
                this.ctx.lineWidth = 2;
                this.ctx.strokeRect(btnX, btnY, btnWidth, btnHeight);
                
                // Draw text
                this.ctx.fillStyle = '#000';
                this.ctx.font = '14px Arial';
                this.ctx.textAlign = 'center';
                this.ctx.textBaseline = 'middle';
                this.ctx.fillText(btnText, btnX + btnWidth/2, btnY + btnHeight/2);
                this.ctx.textAlign = 'start';
                this.ctx.textBaseline = 'alphabetic';
                break;

            default:
                console.log('Unknown UHF command:', cmd.command);
        }
    }

    isTheShowOver() {
        return !this.isActive;
    }

    getUIState() {
        return {
            mouse: this.mouseState,
            keys: this.keyState,
            buttons: this.uiElements.buttons,
            textBoxes: this.uiElements.textBoxes,
            checkboxes: this.uiElements.checkboxes,
            sliders: this.uiElements.sliders
        };
    }
}


==================================================
### FILE: ./frontend/src/core/aiService.js
==================================================

import axios from 'axios';

const POLLINATIONS_URL = 'https://text.pollinations.ai/openai';

export async function streamPollinationsResponse(messages, tools, config, modelName) {
  const apiKey = config.apiKeys.pollinations;
  
  const payload = {
    model: modelName,
    messages: messages,
    tools: tools,
    tool_choice: 'auto',
    stream: true,
  };

  const headers = { 'Content-Type': 'application/json', 'Accept': 'text/event-stream' };
  if (apiKey && apiKey !== "YOUR_POLLINATIONS_API_KEY_OR_LEAVE_BLANK") {
      headers['Authorization'] = `Bearer ${apiKey}`;
  }

  const response = await fetch(POLLINATIONS_URL, {
    method: 'POST',
    headers: headers,
    body: JSON.stringify(payload),
  });

  if (!response.ok) {
    const errorText = await response.text();
    throw new Error(`Pollinations API Error: ${response.status} ${response.statusText} - ${errorText}`);
  }

  return response.body.getReader();
}

// =============================================================
// AI Code Completion Function (Blocking)
// =============================================================

// Cache for WORDS.md content
let yankovicDocsCache = null;

// Function to load WORDS.md dynamically
async function loadYankovicDocs() {
  if (yankovicDocsCache) {
    return yankovicDocsCache;
  }
  
  try {
    // Try Electron/Node first
    // eslint-disable-next-line no-undef
    const fs = window.require ? window.require('fs') : undefined;
    const path = window.require ? window.require('path') : undefined;
    
    if (fs && path) {
      // In Electron, try to find WORDS.md in the project root
      let wordsPath = path.resolve(__dirname, '../../../WORDS.md');
      if (!fs.existsSync(wordsPath)) {
        wordsPath = path.resolve(__dirname, '../../../../WORDS.md');
      }
      if (!fs.existsSync(wordsPath)) {
        wordsPath = path.resolve(process.cwd(), 'WORDS.md');
      }
      yankovicDocsCache = fs.readFileSync(wordsPath, 'utf-8');
      return yankovicDocsCache;
    }
  } catch (e) {
    console.log('Not in Electron context, trying browser fetch...');
  }
  
  // Browser fallback - fetch from public folder
  try {
    const response = await fetch('/WORDS.md');
    if (response.ok) {
      yankovicDocsCache = await response.text();
      return yankovicDocsCache;
    }
  } catch (e) {
    console.error('Failed to load WORDS.md:', e);
  }
  
  // Fallback if loading fails
  return `YankoviC Programming Language Documentation
  
Basic syntax:
- Variables: variable_name(value) to declare
- Functions: function_name(parameters) { code }
- Control flow: if_you_are(condition) { code } otherwise { code }
- Loops: eat_it(times) { code }
- Output: show_me(value) to display
- HTTP: Like_a_Server() for web servers
- Media: fat_frame(image_path) for images, Lossless_Laughter(media_path) for audio/video
`;
}
export async function getAiCodeCompletion(code, config) {
    const apiKey = config.apiKeys.pollinations;
    
    // Load YankoviC documentation dynamically
    const yankovicDocs = await loadYankovicDocs();
    console.log('AI Completion - Loaded docs length:', yankovicDocs.length);
    console.log('AI Completion - First 200 chars of docs:', yankovicDocs.substring(0, 200));
    
    const completionSystemPrompt = `You are an expert YankoviC code completion engine. Your task is to complete the code provided by the user.
Analyze the user's code and the position of their cursor. Provide only the most logical completion.
---
RULES:
1.  **YOU MUST ONLY RETURN RAW CODE.**
2.  **DO NOT** provide any explanations, comments, or markdown formatting like \`\`\`.
3.  Your response should be the text that would be typed next.
4.  Keep completions short and concise (a single line or a small block).
5. When finished with the code completion, either provide a double newline (\n\n), OR "// Completed request"
6. **IMPORTANT: This is YankoviC language, NOT Python. Use YankoviC syntax only.**
---
The Albuquerque Math Library now includes a yoda(a, b) function for modulus operations. Use yoda() instead of the % operator in YankoviC code.

YankoviC Language Documentation:
${yankovicDocs}
`;

    const messages = [
        { "role": "system", "content": completionSystemPrompt },
        { "role": "user", "content": `Complete the following YankoviC code. Here is the current file:\n\n\`\`\`yankovic\n${code}\n\`\`\`\n\nComplete the code using YankoviC syntax only (NOT Python).` }
    ];
    
    console.log('AI Completion - System prompt length:', completionSystemPrompt.length);
    console.log('AI Completion - User code:', code.substring(0, 100) + '...');

    const payload = {
        model: 'openai-large',
        messages: messages,
        temperature: 0.2,
        max_tokens: 512,
        stop: ["\n\n", "// Completed request"]
    };

    const headers = { 'Content-Type': 'application/json' };
    if (apiKey && apiKey !== "YOUR_POLLINATIONS_API_KEY_OR_LEAVE_BLANK") {
        headers['Authorization'] = `Bearer ${apiKey}`;
    }

    try {
        const response = await axios.post(POLLINATIONS_URL, payload, { headers });
        const completion = response.data.choices[0].message.content;
        return completion.trim();
    } catch (error) {
        console.error("AI Code Completion Error:", error);
        return `// AI completion failed: ${error.message}`;
    }
}

==================================================
### FILE: ./frontend/src/core/fileApiService.js
==================================================

import axios from 'axios';

const API_BASE_URL = 'http://localhost:3001/api';

export async function getProjectStructure(projectName = 'default-project') {
    const response = await axios.get(`${API_BASE_URL}/files`, { params: { project: projectName } });
    return response.data;
}

export async function getFileContent(projectName, filePath) {
    const response = await axios.get(`${API_BASE_URL}/file-content`, { params: { project: projectName, file: filePath } });
    return response.data.content;
}

export async function saveFileContent(projectName, filePath, content) {
    await axios.post(`${API_BASE_URL}/save-file`, { project: projectName, file: filePath, content });
}

export async function createFolder(projectName, folderPath) {
    console.log('createFolder API call:', { projectName, folderPath });
    const payload = { project: projectName, path: folderPath };
    console.log('createFolder payload:', payload);
    const response = await axios.post(`${API_BASE_URL}/create-folder`, payload);
    console.log('createFolder response:', response.data);
    return response.data;
}

export async function createFile(projectName, filePath) {
    console.log('createFile API call:', { projectName, filePath });
    const payload = { project: projectName, path: filePath };
    console.log('createFile payload:', payload);
    const response = await axios.post(`${API_BASE_URL}/create-file`, payload);
    console.log('createFile response:', response.data);
    return response.data;
}

export async function deleteFile(projectName, filePath) {
    await axios.delete(`${API_BASE_URL}/delete-file`, { 
        data: { project: projectName, file: filePath } 
    });
}

export async function deleteFolder(projectName, folderPath) {
    await axios.delete(`${API_BASE_URL}/delete-folder`, { 
        data: { project: projectName, folder: folderPath } 
    });
}

export async function execCommand(command, sessionId) {
    const response = await axios.post(`${API_BASE_URL}/exec`, { command, sessionId });
    return response.data;
}


==================================================
### FILE: ./frontend/src/core/yankovicInterpreter.js
==================================================

// YANKOVIC - The "Dare to be Stupid" Interpreter
import { getFileContent } from './fileApiService.js';
import { UHF_LIBRARY } from './UHF.hat.js';
import { LIKE_A_SERVER_LIBRARY } from './Like_a_Server.hat.js';
import { WEIRD_WIDE_WEB_LIBRARY } from './Weird_Wide_Web.hat.js';
import { VIRUS_ALERT_LIBRARY } from './virus_alert.hat.js';

// The conditional import of 'readline' has been moved into the 'flesh_eating_weasels'
// function below to fix a Vite build error related to top-level await.

class Scope {
    constructor(parent = null) {
        this.parent = parent;
        this.variables = new Map();
    }
    set(name, value, isStupid = false) {
        if (this.variables.has(name) && this.variables.get(name).isStupid) throw new Error(`Word Crime! Cannot reassign a 'stupid' variable: ${name}`);
        this.variables.set(name, { value, isStupid });
    }
    assign(name, value) {
        if (this.variables.has(name)) {
            if (this.variables.get(name).isStupid) throw new Error(`Word Crime! Cannot reassign a 'stupid' variable: ${name}`);
            return this.variables.set(name, { ...this.variables.get(name), value });
        }
        if (this.parent) return this.parent.assign(name, value);
        throw new Error(`Reference Error: Cannot assign to undeclared variable '${name}'.`);
    }
    get(name) {
        if (this.variables.has(name)) {
            return this.variables.get(name).value;
        }
        if (this.parent) {
            return this.parent.get(name);
        }
        // Fallback to global scope for functions
        if (this.parent === null && globalThis.interpreter && globalThis.interpreter.globalScope.variables.has(name)) {
            return globalThis.interpreter.globalScope.get(name);
        }
        throw new Error(`Reference Error: The variable '${name}' is not defined. What're you thinkin'?`);
    }
}

export class YankoviCInterpreter {
    constructor({ printFunction, streamPrintFunction, inputFunction, libraryOverrides = {}, nativeThisContext = null } = {}) {
        this.globalScope = new Scope();
        this.outputBuffer = [];
        this.libraries = new Map();
        this.polkaLoop = false;
        this.frameCount = 0;
        this.maxFrames = null;
        this.isFrameRunning = false;
        this.activeSagas = []; // For async operations
        this.libraryOverrides = libraryOverrides;
        this.nativeThisContext = nativeThisContext || this;
        this.declaredLunchboxTypes = new Set(); // For parser state
        this.imports = new Set(); // Track imported files to prevent circular imports

        // Allow custom I/O functions to be passed in
        this.printFunction = printFunction || ((text) => this.outputBuffer.push(text));
        this.streamPrintFunction = streamPrintFunction || ((text) => {
            const last = this.outputBuffer.length > 0 ? this.outputBuffer.pop() : '';
            this.outputBuffer.push(last + text);
        });
        this.inputFunction = inputFunction || (() => Promise.resolve(""));
        
        this.initializeStandardLibrary();
        globalThis.interpreter = this; // Make interpreter instance globally available
    }

    log(message) {
        this.printFunction(message);
    }
    
    initializeStandardLibrary() {
        this.globalScope.set('perform_a_parody', {
            type: 'NativeFunction',
            call: (args) => {
                if (args.length === 0) return;
                let formatString = args[0];
                let argIndex = 1;
                const result = formatString.replace(/%(\w+)/g, (match, type) => {
                    if (argIndex < args.length) {
                        const value = args[argIndex++];
                        if (type === 'verse') return String(value);
                        if (type === 'spatula') return Number(value);
                        if (type === 'horoscope') return value ? 'its_a_fact' : 'total_baloney';
                        return match;
                    }
                    return match;
                });
                this.printFunction(result);
            }
        });

        this.globalScope.set('string_along', {
            type: 'NativeFunction',
            call: (args) => {
                this.streamPrintFunction(args.join(' '));
            }
        });

        this.globalScope.set('the_saga_begins', {
            type: 'NativeFunction',
            call: (args) => {
                const [funcName, ...funcArgs] = args;
                const func = this.globalScope.get(funcName);
                if (!func) {
                    throw new Error(`Function '${funcName}' not found for the_saga_begins.`);
                }
                const sagaPromise = this.callFunction(func, funcArgs, this.globalScope)
                    .catch(e => console.error(`[SAGA] Error in background saga '${funcName}':`, e));
                this.activeSagas.push(sagaPromise);
                return this.activeSagas.length;
            }
        });

        this.globalScope.set('wait_for_the_saga_to_end', {
            type: 'NativeFunction',
            call: async () => {
                await Promise.all(this.activeSagas);
                this.activeSagas = [];
                return null;
            }
        });

        this.globalScope.set('flesh_eating_weasels', {
            type: 'NativeFunction',
            call: async (args) => {
                const prompt = args[0] || '';
                if (this.inputProvider) {
                    return this.inputProvider(prompt);
                }
                if (typeof process !== 'undefined' && process.stdin.isTTY) {
                    try {
                        const readline = await import('readline');
                        const rl = readline.createInterface({ input: process.stdin, output: process.stdout });
                        return new Promise(resolve => {
                            rl.question(prompt, (answer) => { rl.close(); resolve(answer); });
                        });
                    } catch (e) {
                        this.log(`FATAL WORD CRIME: Could not initialize CLI input. ${e.message}`);
                        return "";
                    }
                }
                this.log("FATAL WORD CRIME: CLI input is not supported in this environment.");
                return "";
            }
        });

        if (Object.keys(this.libraryOverrides).length > 0) {
            for (const [name, value] of Object.entries(this.libraryOverrides)) {
                if (typeof value === 'function') {
                    this.globalScope.set(name, { type: 'NativeFunction', call: value });
                } else {
                    this.globalScope.set(name, value);
                }
            }
        }
        
        return this.globalScope;
    }

    lexer(code) {
        const tokenRegexes = [
            [/^\s+/, null], 
            [/^\/\/.*/, null], 
            [/\/\*[\s\S]*?\*\//, null],
            [/^#eat\s+(<\s*[^>]+\s*>|"\s*[^\"]+\s*"|[.\/a-zA-Z0-9_\-]+\.(?:hat|yc))(\s*\/\/.*)?/, 'DIRECTIVE'], 
            [/^lunchbox/, 'LUNCHBOX_KEYWORD'],
            [/^on_the_menu|^private_stash/, 'VISIBILITY_KEYWORD'],
            [/^spatula|^lasagna|^lyric|^verse|^horoscope|^accordion_solo/, 'TYPE_KEYWORD'],
            [/^jeopardy|^another_one|^polka|^hardware_store/, 'CONTROL_KEYWORD'],
            [/^twinkie_wiener_sandwich/, 'RETURN_KEYWORD'],
            [/^stupid/, 'CONST_KEYWORD'],
            [/^its_a_fact|^total_baloney/, 'BOOLEAN'],
            [/^\d+\.\d+/, 'NUMBER'], [/^\d+/, 'NUMBER'],
            [/^"([^"]*)"/, 'STRING'],
            [/^'([^']*)'/, 'STRING'],
            [/^(?:\|\||&&|==|!=|<=|>=|[=+*\/><!%-])/, 'OPERATOR'],
            [/^[a-zA-Z_][a-zA-Z0-9_]*/, 'IDENTIFIER'],
            [/^\./, 'DOT'],
            [/^[{};(),]/, 'PUNCTUATION'],
        ];
        let tokens = []; let position = 0;
        while (position < code.length) {
            let match = null;
            for (const [regex, type] of tokenRegexes) {
                const result = regex.exec(code.slice(position));
                if (result) { match = { value: result[0], type, raw: result[1] }; break; }
            }
            if (!match) throw new Error(`Syntax Error: Unexpected character at position ${position}: ${code[position]}`);
            if (match.type) {
                const tokenValue = match.type === 'STRING' ? match.raw || match.value.slice(1, -1) : match.value;
                const token = { type: match.type, value: tokenValue };
                tokens.push(token);
            }
            position += match.value.length;
        }
        tokens.push({type: "EOF", value: "EOF"});
        return tokens;
    }

    currentToken() { return this.tokens[this.pos]; }
    peekToken(offset = 1) { return this.tokens[this.pos + offset]; }
    consume(type, value = null) {
        const token = this.currentToken();
        if (token.type === type && (value === null || token.value === value)) { this.pos++; return token; }
        throw new Error(`Parse Error: Expected ${type} ('${value || 'any'}') but got ${token.type} ('${token.value}')`);
    }
    
    // --- PARSER FIX STARTS HERE ---
    
    parseProgram() {
        const program = { type: 'Program', body: [] };
        while (this.currentToken().type !== 'EOF') {
            program.body.push(this.parseTopLevelDeclaration());
        }
        return program;
    }

    parseTopLevelDeclaration() {
        const token = this.currentToken();
        
        if (token.type === 'DIRECTIVE') {
            const directive = { type: 'Directive', value: token.value };
            this.pos++;
            return directive;
        }

        if (token.type === 'LUNCHBOX_KEYWORD') {
            return this.parseLunchboxDeclaration();
        }

        // The key fix: Check if it LOOKS like a function before committing.
        // A function is `[visibility?] type identifier (`
        const peek1 = this.peekToken(1);
        const peek2 = this.peekToken(2);
        const isFunction = (token.type === 'TYPE_KEYWORD' && peek1?.type === 'IDENTIFIER' && peek2?.value === '(') ||
                           (token.type === 'VISIBILITY_KEYWORD' && peek1?.type === 'TYPE_KEYWORD' && peek2?.type === 'IDENTIFIER' && this.peekToken(3)?.value === '(');

        if (isFunction) {
            return this.parseFunctionDeclaration();
        }
        
        // If it's not a directive, lunchbox, or function, it must be a statement.
        // This allows for future top-level variable declarations or other code.
        return this.parseStatement();
    }

    parseLunchboxDeclaration() {
        this.consume('LUNCHBOX_KEYWORD', 'lunchbox');
        const name = this.consume('IDENTIFIER').value;
        this.declaredLunchboxTypes.add(name);
        this.consume('PUNCTUATION', '{');
        const fields = [];
        while(this.currentToken().value !== '}') {
            const fieldType = this.consume('TYPE_KEYWORD').value;
            const fieldName = this.consume('IDENTIFIER').value;
            fields.push({ name: fieldName, type: fieldType });
            this.consume('PUNCTUATION', ';');
        }
        this.consume('PUNCTUATION', '}');
        if (this.currentToken().value === ';') this.consume('PUNCTUATION', ';');
        return { type: 'LunchboxDeclaration', name, fields };
    }

    parseFunctionDeclaration() {
        let visibility = 'public';
        if (this.currentToken().type === 'VISIBILITY_KEYWORD') {
            visibility = this.consume('VISIBILITY_KEYWORD').value === 'on_the_menu' ? 'public' : 'private';
        }
        const returnType = this.consume('TYPE_KEYWORD').value;
        const name = this.consume('IDENTIFIER').value;
        this.consume('PUNCTUATION', '(');
        const params = [];
        if (this.currentToken().value !== ')') {
            do {
                if(this.currentToken().value === ',') this.consume('PUNCTUATION', ',');
                const paramTypeToken = this.consume('TYPE_KEYWORD');
                const paramName = this.consume('IDENTIFIER').value;
                params.push({ type: 'Parameter', name: paramName, varType: paramTypeToken.value });
            } while (this.currentToken().value === ',');
        }
        this.consume('PUNCTUATION', ')');
        const body = this.parseBlock();
        return { type: 'FunctionDeclaration', name, returnType, params, body, visibility };
    }

    parseStatement() {
        const token = this.currentToken();
        if (token.value === 'dare_to_be_stupid') return this.parseTryCatchStatement();
        if (token.type === 'CONST_KEYWORD' || token.type === 'TYPE_KEYWORD') return this.parseVariableDeclaration();
        if (token.type === 'IDENTIFIER') {
            // Check for lunchbox type variable declaration
            if (this.declaredLunchboxTypes.has(token.value) && this.peekToken()?.type === 'IDENTIFIER') {
                return this.parseVariableDeclaration();
            }
            return this.parseExpressionStatement();
        }
        if (token.type === 'RETURN_KEYWORD') return this.parseReturnStatement();
        if (token.value === 'jeopardy') return this.parseIfStatement();
        if (token.value === 'hardware_store') return this.parseHardwareStoreStatement();
        if (token.value === 'polka') return this.parsePolkaStatement();
        if (token.value === '{') return this.parseBlock();
        if (token.value === ';') { this.pos++; return { type: 'EmptyStatement' }; }
        throw new Error(`Parse Error: Unexpected token at start of statement: '${token.value}'`);
    }
    
    // --- PARSER FIX ENDS HERE --- (other parser functions are mostly okay)

    parseBlock() {
        const block = { type: 'BlockStatement', body: [] };
        this.consume('PUNCTUATION', '{');
        while (this.currentToken().value !== '}') {
            block.body.push(this.parseStatement());
        }
        this.consume('PUNCTUATION', '}');
        return block;
    }

    parseVariableDeclaration(isForLoopInit = false) {
        let isStupid = false;
        if (this.currentToken().type === 'CONST_KEYWORD') { isStupid = true; this.consume('CONST_KEYWORD'); }
        const varTypeToken = this.consume(this.currentToken().type === 'TYPE_KEYWORD' ? 'TYPE_KEYWORD' : 'IDENTIFIER');
        const id = this.consume('IDENTIFIER').value;
        let init = null;
        if(this.currentToken().value === '=') { this.consume('OPERATOR', '='); init = this.parseExpression(); }
        if (!isForLoopInit) this.consume('PUNCTUATION', ';');
        return { type: 'VariableDeclaration', id, varType: varTypeToken.value, init, isStupid };
    }

    parseHardwareStoreStatement() {
        this.consume('CONTROL_KEYWORD', 'hardware_store');
        this.consume('PUNCTUATION', '(');
        let init = null;
        if (this.currentToken().value !== ';') { init = this.parseVariableDeclaration(true); } else { this.consume('PUNCTUATION', ';'); }
        let test = null;
        if (this.currentToken().value !== ';') { test = this.parseExpression(); }
        this.consume('PUNCTUATION', ';');
        let update = null;
        if (this.currentToken().value !== ')') { update = this.parseExpression(); }
        this.consume('PUNCTUATION', ')');
        const body = this.parseStatementOrBlock();
        return { type: 'HardwareStoreStatement', init, test, update, body };
    }
    
    parsePolkaStatement() {
        this.consume('CONTROL_KEYWORD', 'polka');
        this.consume('PUNCTUATION', '(');
        const test = this.parseExpression();
        this.consume('PUNCTUATION', ')');
        const body = this.parseStatementOrBlock();
        return { type: 'PolkaStatement', test, body };
    }

    parseReturnStatement() {
        this.consume('RETURN_KEYWORD');
        const argument = this.parseExpression();
        this.consume('PUNCTUATION', ';');
        return { type: 'ReturnStatement', argument };
    }

    parseIfStatement() {
        this.consume('CONTROL_KEYWORD', 'jeopardy');
        this.consume('PUNCTUATION', '(');
        const test = this.parseExpression();
        this.consume('PUNCTUATION', ')');
        const consequent = this.parseStatementOrBlock();
        let alternate = null;
        if (this.currentToken().value === 'another_one') { this.consume('CONTROL_KEYWORD'); alternate = this.parseStatementOrBlock(); }
        return { type: 'IfStatement', test, consequent, alternate };
    }

    parseExpressionStatement() {
        if (this.currentToken().value === 'stop_forwarding_that_crap') {
            return this.parseSleepStatement();
        }
        const expression = this.parseExpression();
        this.consume('PUNCTUATION', ';');
        return { type: 'ExpressionStatement', expression };
    }
    
    parseTryCatchStatement() {
        this.consume('IDENTIFIER', 'dare_to_be_stupid');
        const tryBlock = this.parseBlock();
        let catchParam = null;
        let catchBlock = null;
        if (this.currentToken().value === 'put_down_the_chainsaw') {
            this.consume('IDENTIFIER', 'put_down_the_chainsaw');
            this.consume('PUNCTUATION', '(');
            catchParam = this.consume('IDENTIFIER').value;
            this.consume('PUNCTUATION', ')');
            catchBlock = this.parseBlock();
        }
        return { type: 'TryCatchStatement', tryBlock, catchParam, catchBlock };
    }

    parseStatementOrBlock() { if (this.currentToken().value === '{') return this.parseBlock(); return this.parseStatement(); }
    
    parseSleepStatement() {
        this.consume('IDENTIFIER', 'stop_forwarding_that_crap');
        let duration = 0;
        let pentium = null;
        if (this.currentToken().value !== ';') {
            duration = this.parseExpression();
            if (this.currentToken().value !== ';') {
                pentium = this.parseExpression();
            }
        }
        this.consume('PUNCTUATION', ';');
        return { type: 'SleepStatement', duration, pentium };
    }

    parseExpression() { return this.parseAssignmentExpression(); }
    
    parseAssignmentExpression() {
        const left = this.parseBinaryExpression();
        if (this.currentToken().value === '=') {
            this.consume('OPERATOR');
            const right = this.parseAssignmentExpression();
            if (left.type !== 'Identifier' && left.type !== 'MemberExpression') throw new Error("Parse Error: Invalid assignment target.");
            return { type: 'AssignmentExpression', left, right };
        }
        return left;
    }

    parseBinaryExpression(precedence = 0) {
        let expr = this.parseUnaryExpression();
        while (true) {
            const opToken = this.currentToken();
            if (opToken.type !== 'OPERATOR' || this.getOperatorPrecedence(opToken.value) <= precedence) break;
            const currentPrecedence = this.getOperatorPrecedence(opToken.value);
            this.consume('OPERATOR');
            const right = this.parseBinaryExpression(currentPrecedence);
            expr = { type: 'BinaryExpression', operator: opToken.value, left: expr, right };
        }
        return expr;
    }
    
    parseUnaryExpression() {
        if (this.currentToken().value === '!' || this.currentToken().value === '-') {
            const operator = this.consume('OPERATOR').value;
            const right = this.parseUnaryExpression();
            return { type: 'UnaryExpression', operator, right };
        }
        return this.parseMemberAccessExpression();
    }

    getOperatorPrecedence(op) {
        switch(op) {
            case '||': return 1; case '&&': return 2;
            case '==': case '!=': return 3;
            case '<': case '>': case '<=': case '>=': return 4;
            case '+': case '-': return 5;
            case '*': case '/': return 6;
            default: return 0;
        }
    }

    parseMemberAccessExpression() {
        let expr = this.parsePrimary();
        while(this.currentToken().type === 'DOT') {
            this.consume('DOT');
            const property = this.consume('IDENTIFIER');
            expr = { type: 'MemberExpression', object: expr, property: { type: 'Identifier', name: property.value } };
        }
        return expr;
    }

    parsePrimary() {
        const token = this.currentToken();
        if (token.type === 'NUMBER') { this.pos++; return { type: 'Literal', value: parseFloat(token.value) }; }
        if (token.type === 'STRING') { this.pos++; return { type: 'Literal', value: token.value }; }
        if (token.type === 'BOOLEAN') { this.pos++; return { type: 'Literal', value: token.value === 'its_a_fact' }; }
        if (token.type === 'IDENTIFIER') {
            if (this.peekToken()?.value === '(') return this.parseCallExpression();
            this.pos++; return { type: 'Identifier', name: token.value };
        }
        if (token.value === '(') { this.consume('PUNCTUATION', '('); const expr = this.parseExpression(); this.consume('PUNCTUATION', ')'); return expr; }
        throw new Error(`Parse Error: Unexpected token ${token.type} ('${token.value}')`);
    }

    parseCallExpression() {
        const callee = this.consume('IDENTIFIER').value;
        this.consume('PUNCTUATION', '(');
        const args = [];
        if (this.currentToken().value !== ')') {
             do {
                if(this.currentToken().value === ',') this.consume('PUNCTUATION', ',');
                args.push(this.parseExpression());
            } while (this.currentToken().value === ',');
        }
        this.consume('PUNCTUATION', ')');
        return { type: 'CallExpression', callee, args };
    }
    
    async interpret(node, scope) {
         if (!node) return;
         switch (node.type) {
            case 'Program':
                for (const statement of node.body) {
                    if (statement.type === 'Directive') {
                        await this.processImport(statement, scope);
                    } else {
                        await this.interpret(statement, scope);
                    }
                }
                const mainFn = scope.get('want_a_new_duck');
                if (mainFn) {
                    await this.callFunction(mainFn, [], scope);
                }
                return;
            
            case 'Directive': return; 
            case 'EmptyStatement': return;

            case 'LunchboxDeclaration':
                scope.set(node.name, { type: 'LunchboxDefinition', name: node.name, fields: node.fields });
                return;
            
            case 'FunctionDeclaration': 
                const funcDef = { type: 'Function', name: node.name, params: node.params, body: node.body, closure: scope, visibility: node.visibility || 'public' };
                scope.set(node.name, funcDef); 
                return;
            case 'BlockStatement': 
                const blockScope = new Scope(scope);
                for (const statement of node.body) {
                    await this.interpret(statement, blockScope);
                    if (this.polkaLoop && !this.isFrameRunning) return;
                }
                return;
            case 'HardwareStoreStatement':
                const loopScope = new Scope(scope);
                if (node.init) await this.interpret(node.init, loopScope);
                while (true) {
                    if (this.polkaLoop) return;
                    let testResult = true;
                    if (node.test) testResult = await this.interpret(node.test, loopScope);
                    if (!testResult) break;
                    await this.interpret(node.body, loopScope);
                    if (this.polkaLoop) return;
                    if (node.update) await this.interpret(node.update, loopScope);
                }
                return;
            case 'PolkaStatement':
                this.polkaLoop = {
                    test: node.test,
                    body: node.body,
                    scope: new Scope(scope)
                };
                this.log("Polka loop initialized and ready for frame-based execution.");
                return;
            
            case 'VariableDeclaration':
                let value = node.init ? await this.interpret(node.init, scope) : undefined;
                scope.set(node.id, value, node.isStupid);
                return;

            case 'ExpressionStatement': await this.interpret(node.expression, scope); return;
            case 'IfStatement': if (await this.interpret(node.test, scope)) { await this.interpret(node.consequent, scope); } else if (node.alternate) { await this.interpret(node.alternate, scope); } return;
            case 'ReturnStatement': throw { isReturnValue: true, value: await this.interpret(node.argument, scope) };
            case 'AssignmentExpression':
                 const valueToAssign = await this.interpret(node.right, scope);
                 if (node.left.type === 'Identifier') { scope.assign(node.left.name, valueToAssign); }
                 else if (node.left.type === 'MemberExpression') {
                     const targetObject = await this.interpret(node.left.object, scope);
                     if (typeof targetObject !== 'object' || targetObject === null) throw new Error(`Runtime Error: Cannot assign to property of a non-lunchbox value.`);
                     targetObject[node.left.property.name] = valueToAssign;
                 }
                 return valueToAssign;
            case 'UnaryExpression':
                const rightUnary = await this.interpret(node.right, scope);
                switch(node.operator) {
                    case '!': return !rightUnary;
                    case '-': return -rightUnary;
                }
                return;
            case 'BinaryExpression':
                const left = await this.interpret(node.left, scope);
                if (node.operator === '||') return left || await this.interpret(node.right, scope);
                if (node.operator === '&&') return left && await this.interpret(node.right, scope);
                const right = await this.interpret(node.right, scope);
                switch (node.operator) {
                    case '+': return left + right; case '-': return left - right; case '*': return left * right; case '/': return left / right; case '%': return left % right;
                    case '==': return left === right; case '!=': return left !== right;
                    case '<': return left < right; case '>': return left > right; case '<=': return left <= right; case '>=': return left >= right;
                }
                return;
            case 'MemberExpression':
                const object = await this.interpret(node.object, scope);
                if (typeof object !== 'object' || object === null) throw new Error(`Runtime Error: Cannot access property '${node.property.name}' of a non-lunchbox value.`);
                return object[node.property.name];
            case 'CallExpression':
                const func = scope.get(node.callee);
                if (!func || (typeof func.call !== 'function' && func.type !== 'Function')) throw new Error(`Runtime Error: '${node.callee}' is not a function.`);
                const args = [];
                for (const arg of node.args) {
                    args.push(await this.interpret(arg, scope));
                }
                return await this.callFunction(func, args, scope);
            case 'Identifier': return scope.get(node.name);
            case 'Literal': return node.value;
            default: throw new Error(`Interpret Error: Unknown AST node type ${node.type}`);
        }
    }

    async callFunction(func, args, scope) {
        if (!func) {
            throw new Error(`Attempted to call a non-existent function.`);
        }

        if (func.type === 'NativeFunction') {
            // Use the specified context (either the interpreter or the external renderer)
            const context = this.nativeThisContext;
            const boundCall = func.call.bind(context);
            const result = boundCall(args);
            // Ensure native async functions are awaited
            return await Promise.resolve(result);
        }

        if (func.type !== 'Function') {
            throw new Error(`'${func.name}' is not a function.`);
        }
        const functionScope = new Scope(func.closure);
        func.params.forEach((param, i) => {
            functionScope.set(param.name, args[i]);
        });
        try { await this.interpret(func.body, functionScope); }
        catch (e) { if (e.isReturnValue) return e.value; throw e; }
        return undefined; 
    }

    async runFrame() {
        if (!this.polkaLoop) return null;

        this.frameCount++;
        this.isRunningFrame = true;

        try {
            const testResult = await this.interpret(this.polkaLoop.test, this.polkaLoop.scope);
            if (testResult) {
                await this.interpret(this.polkaLoop.body, this.polkaLoop.scope);
                this.isRunningFrame = false;
                return this.drawCommandBuffer;
            } else {
                this.stopLoop();
                this.isRunningFrame = false;
                return null;
            }
        } catch (error) {
            this.log(`FATAL WORD CRIME in loop: ${error.message}`);
            this.stopLoop();
            this.isRunningFrame = false;
            return null;
        }
    }
    
    stopLoop() {
        if (!this.polkaLoop) return;
        if (typeof window !== 'undefined' && window.uhfAPI) {
            window.uhfAPI.cancelTheShow();
        }
        this.polkaLoop = null;
        this.showIsOver = true;
    }

    async run(code, entryFilePath = null) {
        this.outputBuffer = [];
        this.pos = 0;
        this.polkaLoop = null;
        this.showIsOver = false;
        this.frameCount = 0;
        this.drawCommandBuffer = [];
        this.code = code;
        this.currentFilePath = entryFilePath || null;
        let exitCode = 27;
        try {
            this.tokens = this.lexer(code);
            const ast = this.parseProgram();
            await this.interpret(ast, this.globalScope);
            if (!this.polkaLoop) {
                 this.log("Program finished.");
            } else {
                 this.log("Graphics program initialized. Polka loop is now running...");
            }
        } catch (e) {
             console.error('YankoviC Interpreter Error:', e);
             if (e.isReturnValue) exitCode = e.value;
             else { 
                 this.log(`FATAL WORD CRIME: ${e.message}`); 
                 console.error('Full error object:', e);
                 exitCode = 1; 
             }
        }
        return { output: this.outputBuffer.join('\n'), exitCode };
    }

    async processImport(directive, scope) {
        const match = directive.value.match(/#eat\s*(?:<(.+?)>|"(.+?)"|([a-zA-Z_][a-zA-Z0-9_]*\.(?:hat|yc)))/);
        if (!match) { return; }

        let filePath = match[1] || match[2] || match[3];
        const normalized = filePath.toLowerCase().replace(/\.(hat|yc)(\.js)?$/, '');
        
        if (normalized === 'uhf' && Object.keys(this.libraryOverrides).length > 0) {
            return;
        }
        
        if (match[2] && !filePath.endsWith('.hat')) { throw new Error('Import Error: Quoted imports only work for .hat files.'); }
        
        if (this.currentFilePath && !path.isAbsolute(filePath)) {
             filePath = path.resolve(path.dirname(this.currentFilePath), filePath);
        }
        
        const builtins = {
            'uhf': () => this.loadUHF(scope),
            'albuquerque': () => this.loadMath(scope),
            'like_a_server': () => this.loadLikeAServer(scope),
            'weird_wide_web': () => this.loadWeirdWideWeb(scope),
            'virus_alert': () => this.loadVirusAlert(scope)
        };
        
        if (builtins[normalized]) { return builtins[normalized](); }
        
        const importPath = filePath;
        if (this.imports.has(importPath)) { return; }
        
        try {
            this.imports.add(importPath);
            const content = await getFileContent(this.projectName, importPath);
            const oldState = { pos: this.pos, tokens: this.tokens, currentFilePath: this.currentFilePath };
            this.tokens = this.lexer(content);
            this.pos = 0;
            this.currentFilePath = importPath;
            const ast = this.parseProgram();
            await this.interpret(ast, scope);
            this.tokens = oldState.tokens;
            this.pos = oldState.pos;
            this.currentFilePath = oldState.currentFilePath;
        } catch (error) {
            console.error(`[YankoviC Import] Error importing file: ${importPath}`, error);
            throw new Error(`Import Error: Failed to import user file '${filePath}'.`);
        }
    }
    
    loadMath(scope) {
        scope.set('sin', { type: 'NativeFunction', call: (args) => Math.sin(args[0]) });
        scope.set('cos', { type: 'NativeFunction', call: (args) => Math.cos(args[0]) });
        scope.set('random_spatula', { type: 'NativeFunction', call: () => Math.floor(Math.random() * 100) });
        scope.set('yoda', { type: 'NativeFunction', call: (args) => args[0] % args[1] });
    }

    loadUHF(scope) {
        for (const [name, value] of Object.entries(UHF_LIBRARY)) {
            scope.set(name, value);
        }
    }

    loadLikeAServer(scope) {
        for (const [name, value] of Object.entries(LIKE_A_SERVER_LIBRARY)) {
            scope.set(name, value);
        }
    }

    loadWeirdWideWeb(scope) {
        for (const [name, value] of Object.entries(WEIRD_WIDE_WEB_LIBRARY)) {
            scope.set(name, value);
        }
    }

    loadVirusAlert(scope) {
        for (const [name, value] of Object.entries(VIRUS_ALERT_LIBRARY)) {
            scope.set(name, value);
        }
    }
}

==================================================
### FILE: ./frontend/src/cli-main.jsx
==================================================

// This file is the new entry point for the CLI's renderer process.
// Vite will bundle this file and all its dependencies.
import { YankoviCInterpreter } from './core/yankovicInterpreter.js';

class CanvasRenderer {
    constructor(canvas) {
        this.canvas = canvas;
        this.ctx = canvas.getContext('2d');
        this.currentColor = '#FFFFFF';
        this.loadedImages = new Map(); // Store loaded images
        this.imagesToDraw = []; // Queue of images to draw each frame
        this.uiState = {
            mouse: { x: 0, y: 0, clicked: false, isDown: false },
            buttons: {}
        };
        this.setupEventListeners();
    }

    setupEventListeners() {
        this.canvas.addEventListener('mousemove', e => {
            this.uiState.mouse.x = e.offsetX;
            this.uiState.mouse.y = e.offsetY;
        });
        this.canvas.addEventListener('mousedown', e => {
            this.uiState.mouse.isDown = true;
            this.uiState.mouse.clicked = true;
            for (const id in this.uiState.buttons) {
                const b = this.uiState.buttons[id];
                if (e.offsetX >= b.x && e.offsetX <= b.x + b.width && e.offsetY >= b.y && e.offsetY <= b.y + b.height) {
                    b.clicked = true;
                }
            }
        });
        this.canvas.addEventListener('mouseup', () => { this.uiState.mouse.isDown = false; });
    }

    resetPerFrameState() {
        this.uiState.mouse.clicked = false;
        for (const id in this.uiState.buttons) {
            this.uiState.buttons[id].clicked = false;
        }
    }

    getUHFOverrides() {
        // Color constants as separate entries
        const colors = {
            AL_RED: { r: 237, g: 28,  b: 36,  a: 255 },
            WHITE_ZOMBIE: { r: 240, g: 240, b: 240, a: 255 },
            BLACK_MAGIC: { r: 16,  g: 16,  b: 16,  a: 255 },
            SPAM_GREEN: { r: 0,   g: 255, b: 0,   a: 255 },
            TWINKIE_GOLD: { r: 255, g: 242, b: 0,   a: 255 },
            ORANGE_CHEESE: { r: 255, g: 127, b: 39,  a: 255 },
            SKY_BLUE_FOR_YOU: { r: 135, g: 206, b: 235, a: 255 },
            SILVER_SPATULA: { r: 200, g: 200, b: 200, a: 255 },
        };

        return {
            ...colors, // Spread the colors into the library
            fat_frame: (args) => {
                console.log('[CLI-MAIN] fat_frame called with:', args);
                const [imageUrl, x, y, width, height] = args;
                
                // If image is already loaded, draw it immediately
                if (this.loadedImages.has(imageUrl)) {
                    const img = this.loadedImages.get(imageUrl);
                    this.ctx.drawImage(img, x || 0, y || 0, width || img.width, height || img.height);
                    console.log('[CLI-MAIN] Drew cached image');
                    return;
                }
                
                // Load the image and cache it
                const img = new window.Image();
                img.onload = () => {
                    console.log('[CLI-MAIN] Image loaded successfully');
                    this.loadedImages.set(imageUrl, img);
                    this.ctx.drawImage(img, x || 0, y || 0, width || img.width, height || img.height);
                    console.log('[CLI-MAIN] Drew new image');
                };
                img.onerror = (error) => {
                    console.error('[CLI-MAIN] Image failed to load:', error);
                };
                
                // Set the source
                img.src = imageUrl;
                console.log('[CLI-MAIN] Loading image from:', imageUrl.substring(0, 50) + '...');
            },
            Lossless_Laughter: (args) => {
                const [mediaUrl, type] = args;
                let mediaElem = document.getElementById('uhf-media');
                if (mediaElem) mediaElem.remove();
                mediaElem = document.createElement(type === 'video' ? 'video' : 'audio');
                mediaElem.id = 'uhf-media';
                mediaElem.src = mediaUrl.startsWith('/') ? `file://${mediaUrl}` : mediaUrl;
                mediaElem.autoplay = true;
                mediaElem.controls = true; // Show controls for now
                mediaElem.style.position = 'absolute';
                mediaElem.style.top = '10px';
                mediaElem.style.left = '10px';
                mediaElem.style.zIndex = '1000';
                document.body.appendChild(mediaElem);
            },
            start_the_show: (args) => {
                console.log('[CLI-MAIN] start_the_show called with:', args);
                this.canvas.width = args[0]; this.canvas.height = args[1];
                window.cliAPI.setWindow({ width: args[0], height: args[1], title: args[2] });
                console.log('[CLI-MAIN] Canvas resized to:', this.canvas.width, 'x', this.canvas.height);
            },
            paint_the_set: (args) => {
                const color = args[0];
                if (color && color.r !== undefined) {
                    const alpha = color.a !== undefined ? color.a / 255 : 1;
                    this.ctx.fillStyle = `rgba(${color.r}, ${color.g}, ${color.b}, ${alpha})`;
                } else {
                    this.ctx.fillStyle = '#000'; // Fallback
                }
                this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
            },
            pick_a_hawaiian_shirt: (args) => {
                const color = args[0];
                if (color && typeof color.r === 'number') {
                    const alpha = typeof color.a === 'number' ? color.a : 255;
                    this.currentColor = `rgba(${color.r}, ${color.g}, ${color.b}, ${alpha / 255})`;
                } else {
                    this.currentColor = 'rgba(255, 255, 255, 1)'; // Fallback to white
                }
            },
            draw_a_spamsicle: (args) => { 
                console.log('[CLI-MAIN] draw_a_spamsicle called with:', args);
                this.ctx.fillStyle = this.currentColor; 
                this.ctx.fillRect(...args); 
                console.log('[CLI-MAIN] Rectangle drawn');
            },
            draw_a_big_ol_wheel_of_cheese: (args) => {
                console.log('[CLI-MAIN] draw_a_big_ol_wheel_of_cheese called with:', args);
                this.ctx.fillStyle = this.currentColor; this.ctx.beginPath();
                this.ctx.arc(args[0], args[1], args[2], 0, 2 * Math.PI); this.ctx.fill();
                console.log('[CLI-MAIN] Circle drawn');
            },
            print_a_string_at: (args) => {
                console.log('[CLI-MAIN] print_a_string_at called with:', args);
                this.ctx.fillStyle = this.currentColor; this.ctx.font = '16px Arial';
                this.ctx.textBaseline = 'top'; this.ctx.fillText(...args);
                console.log('[CLI-MAIN] Text drawn');
            },
            draw_a_button: (args) => {
                console.log('[CLI-MAIN] draw_a_button called with:', args);
                const [x, y, w, h, text, id] = args;
                if (!this.uiState.buttons[id]) this.uiState.buttons[id] = { x, y, width: w, height: h, clicked: false };
                this.ctx.fillStyle = '#ddd'; this.ctx.fillRect(x, y, w, h);
                this.ctx.strokeStyle = '#999'; this.ctx.lineWidth = 2; this.ctx.strokeRect(x, y, w, h);
                this.ctx.fillStyle = '#000'; this.ctx.font = '14px Arial'; this.ctx.textAlign = 'center';
                this.ctx.textBaseline = 'middle'; this.ctx.fillText(text, x + w / 2, y + h / 2);
                this.ctx.textAlign = 'start'; this.ctx.textBaseline = 'alphabetic';
                console.log('[CLI-MAIN] Button drawn');
            },
            get_mouse_x: () => this.uiState.mouse.x,
            get_mouse_y: () => this.uiState.mouse.y,
            mouse_was_clicked: () => this.uiState.mouse.clicked,
            the_shows_over: () => false,
            roll_the_camera: () => {
                console.log('[CLI-MAIN] roll_the_camera called');
                this.resetPerFrameState();
            },
            that_is_a_wrap: () => {
                console.log('[CLI-MAIN] that_is_a_wrap called');
            },
            set_polka_speed: () => {
                console.log('[CLI-MAIN] set_polka_speed called');
            },
            button_was_clicked: (args) => this.uiState.buttons[args[0]]?.clicked || false,
            // Math functions
            sin: (args) => Math.sin(args[0]),
            cos: (args) => Math.cos(args[0]),
            random_spatula: () => Math.floor(Math.random() * 100),
            yoda: (args) => args[0] % args[1],
        };
    }
}

// --- Main Execution ---
const initializeCliMain = async () => {
    console.log('[CLI-MAIN] DOM Content Loaded');
    const canvas = document.getElementById('display');
    console.log('[CLI-MAIN] Canvas element:', canvas);
    if (!canvas) {
        console.error('[CLI-MAIN] Canvas element not found!');
        return;
    }
    
    const renderer = new CanvasRenderer(canvas);
    console.log('[CLI-MAIN] Canvas renderer created');
    
    // The interpreter now takes the overrides AND the renderer context in its constructor
    const interpreter = new YankoviCInterpreter({
        libraryOverrides: renderer.getUHFOverrides(),
        nativeThisContext: renderer 
    });
    console.log('[CLI-MAIN] Interpreter created with overrides and context');
    
    // The interpreter's internal uiState needs to be a direct reference to the renderer's
    interpreter.uiState = renderer.uiState;

    // The code is now on the window object, placed there by cli-runner.html
    const codeToRun = window.yankovicCodeToRun;
    console.log('[CLI-MAIN] Code to run:', codeToRun ? `${codeToRun.length} characters` : 'null');

    if (codeToRun) {
        console.log('[CLI-MAIN] Received bundled code, running with full interpreter...');
        try {
            await interpreter.run(codeToRun);
            console.log('[CLI-MAIN] Initial run completed');

            if (interpreter.polkaLoop) {
                console.log('[CLI-MAIN] Starting animation loop');
                const runAnimationLoop = async () => {
                    if (!interpreter.polkaLoop) return;
                    await interpreter.runFrame();
                    requestAnimationFrame(runAnimationLoop);
                };
                requestAnimationFrame(runAnimationLoop);
            } else {
                console.log('[CLI-MAIN] No polka loop found');
            }
        } catch (error) {
            console.error('[CLI-MAIN] Error running code:', error);
        }
    } else {
        console.error("[CLI-MAIN] No YankoviC code found to run.");
    }
};

// Execute immediately if DOM is already loaded, otherwise wait for DOMContentLoaded
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeCliMain);
} else {
    initializeCliMain();
}

==================================================
### FILE: ./frontend/src/data/lyricPrompter.js
==================================================

// A small, curated list of thematically appropriate words for our Lyric Prompter.
// In a real app, this could be a much larger, structured dataset.
export const nouns = [
    'spatula', 'duck', 'polka', 'accordion', 'lasagna', 'weasel', 'hamster',
    'slaw', 'aluminum', 'poodle', 'yo-yo', 'Twinkie', 'sandwich', 'bologna',
];
export const verbs = [
    'stomp', 'eat', 'squeeze', 'parody', 'ride', 'dare', 'yank', 'gurgle',
    'fol-de-rol', 'yodel', 'whack',
];
export const adjectives = [
    'stupid', 'weird', 'tacky', 'white', 'nerdy', 'handy', 'crappy', 'groovy',
    'fat', 'amphibious', 'lumbering',
];

==================================================
### FILE: ./frontend/src/App.css
==================================================

#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}


==================================================
### FILE: ./frontend/src/components/Console.jsx
==================================================

import React, { useRef, useEffect, useState } from 'react';
import styled from 'styled-components';

const PanelContainer = styled.div`
  display: flex;
  flex-direction: column;
  height: 100%;
  width: 100%;
`;

const PanelHeader = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 8px 10px;
  background-color: #333;
  font-weight: bold;
  cursor: pointer;
  flex-shrink: 0;
  user-select: none;
`;

const CloseButton = styled.button`
  background: none;
  border: none;
  color: #ccc;
  font-size: 18px;
  cursor: pointer;
  padding: 0 5px;
  &:hover { color: white; }
`;

const RunButton = styled.button`
  background-color: #4CAF50;
  border: none;
  color: white;
  padding: 5px 15px;
  cursor: pointer;
  font-weight: bold;
  margin-left: auto;
  margin-right: 10px;
  &:hover { background-color: #45a049; }
`;

const StopButton = styled(RunButton)`
  background-color: #f44336; /* Red for stop */
  &:hover { background-color: #d32f2f; }
`;

const OutputArea = styled.pre`
  flex-grow: 1;
  padding: 10px;
  margin: 0;
  white-space: pre-wrap;
  word-wrap: break-word;
  overflow-y: auto;
  background-color: #1e1e1e;
  color: #d4d4d4;
  font-size: 14px;
`;

const InputArea = styled.input`
  width: 100%;
  padding: 8px;
  border: none;
  border-top: 1px solid #333;
  background: #181818;
  color: #d4d4d4;
  font-size: 15px;
  font-family: monospace;
  outline: none;
`;

function Console({ output, onRun, onStop, isRunning, layout, setLayout, onCommand, prompt }) {
  const outputRef = useRef(null);
  const [input, setInput] = useState("");

  useEffect(() => {
    if (outputRef.current) outputRef.current.scrollTop = outputRef.current.scrollHeight;
  }, [output]);

  if (!layout.console) {
      return <PanelHeader onClick={() => setLayout(l => ({...l, console: true}))}>Backstage Pass (Console)</PanelHeader>
  }

  const handleInputKeyDown = (e) => {
    if (e.key === 'Enter') {
      if (input.trim()) {
        onCommand?.(input);
        setInput("");
      }
    }
  };

  return (
    <PanelContainer>
      <PanelHeader>
        <span>Backstage Pass (Console)</span>
        {isRunning ? (
            <StopButton onClick={onStop}>Stop the Polka!</StopButton>
        ) : (
            <RunButton onClick={onRun}>Perform the Parody!</RunButton>
        )}
        <CloseButton onClick={() => setLayout(l => ({...l, console: false}))}>×</CloseButton>
      </PanelHeader>
      <OutputArea ref={outputRef}>{output}</OutputArea>
      <div style={{ display: 'flex', alignItems: 'center', background: '#181818' }}>
        <span style={{ color: '#6cf', fontFamily: 'monospace', padding: '0 6px 0 8px', fontSize: 15 }}>{prompt || '$'}</span>
        <InputArea
          type="text"
          placeholder="Type YankoviC code or !ls, !pwd, etc. for terminal..."
          value={input}
          onChange={e => setInput(e.target.value)}
          onKeyDown={handleInputKeyDown}
          spellCheck={false}
          autoFocus
        />
      </div>
    </PanelContainer>
  );
}

export default Console;

==================================================
### FILE: ./frontend/src/components/Debugger.jsx
==================================================

import React from 'react';
import styled from 'styled-components';

const DebuggerContainer = styled.div`
  margin-top: auto;
  padding: 10px;
  border-top: 1px solid #333;
  text-align: center;
`;

const AlHead = styled.img`
  width: 150px;
  height: 150px;
  border: 2px solid #555;
  border-radius: 5px;
  background-color: #111;
`;

const StateText = styled.p`
  font-style: italic;
  color: #aaa;
`;

function Debugger({ state }) {
  const getAlState = () => {
    switch (state) {
      case 'happy':
        return { src: '/al-happy.gif', text: "Success! That's how you polka!" };
      case 'disappointed':
        return { src: '/al-disappointed.gif', text: "You're a hardware store of bugs." };
      case 'thinking':
      default:
        return { src: '/al-thinking.gif', text: 'Analyzing your... creation.' };
    }
  };

  const { src, text } = getAlState();

  return (
    <DebuggerContainer>
      <h4>The White & Nerdy Debugger</h4>
      <AlHead src={src} alt={`Al is ${state}`} />
      <StateText>{text}</StateText>
    </DebuggerContainer>
  );
}

export default Debugger;


==================================================
### FILE: ./frontend/src/components/FileExplorer.jsx
==================================================

import React, { useState } from 'react';
import styled from 'styled-components';
import { createFile, createFolder, deleteFile, deleteFolder } from '../core/fileApiService';
import { toast } from 'react-toastify';

const PanelHeader = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 8px 10px;
  background-color: #333;
  font-weight: bo                 <ButtonContainer>
                    <ActionButton 
                        onClick={() => {
                            console.log('New File button clicked - opening modal');
                            showCreateFileModal();
                        }}
                    >
                        📄 New File
                    </ActionButton>
                    <ActionButton 
                        onClick={() => {
                            console.log('New Folder button clicked - opening modal');
                            showCreateFolderModal();
                        }}
                    >
                        📁 New Folder
                    </ActionButton>
                </ButtonContainer>ter;
  flex-shrink: 0;
  user-select: none;
`;

const CloseButton = styled.button`
  background: none;
  border: none;
  color: #ccc;
  font-size: 18px;
  cursor: pointer;
  padding: 0 5px;
  &:hover { color: white; }
`;

const ExplorerContainer = styled.div`
  flex-grow: 1;
  padding: 0 10px;
  display: flex;
  flex-direction: column;
  overflow-y: auto;
`;

const FileTree = styled.ul`
  list-style: none;
  padding-left: ${props => props.depth > 0 ? '20px' : '0'};
  margin: 0;
`;

const TreeItem = styled.li`
  padding: 5px;
  cursor: pointer;
  display: flex;
  align-items: center;
  border-radius: 3px;
  background-color: ${props => (props.$isActive ? '#37373d' : 'transparent')};
  &:hover { background-color: #2a2d2e; }
`;

const Icon = styled.span` margin-right: 8px; `;

const ButtonContainer = styled.div`
    display: flex;
    gap: 5px;
    margin-top: auto;
    margin-bottom: 10px;
    padding-top: 10px;
    border-top: 1px solid #333;
    flex-shrink: 0;
`;

const ActionButton = styled.button`
  flex-grow: 1;
  padding: 8px;
  background-color: #0e639c;
  border: none;
  color: white;
  cursor: pointer;
  &:hover { background-color: #1177bb; }
`;

const Modal = styled.div`
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.7);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
`;

const ModalContent = styled.div`
  background-color: #2d2d30;
  border: 1px solid #555;
  border-radius: 5px;
  padding: 20px;
  min-width: 400px;
  color: #d4d4d4;
`;

const ModalInput = styled.input`
  width: 100%;
  padding: 8px;
  margin: 10px 0;
  background-color: #3c3c3c;
  border: 1px solid #555;
  color: #d4d4d4;
  border-radius: 3px;
`;

const ModalButtons = styled.div`
  display: flex;
  gap: 10px;
  justify-content: flex-end;
  margin-top: 15px;
`;

const ModalButton = styled.button`
  padding: 8px 16px;
  border: none;
  border-radius: 3px;
  cursor: pointer;
  background-color: ${props => props.primary ? '#0e639c' : '#555'};
  color: white;
  &:hover {
    background-color: ${props => props.primary ? '#1177bb' : '#666'};
  }
`;

const Directory = ({ dir, depth, activeFile, onFileSelect, onDelete, onDeleteFolder, expandedFolders, toggleFolder }) => {
    const isExpanded = expandedFolders.has(dir.path);
    return (
        <div>
            <TreeItem>
                <Icon
                  style={{ cursor: 'pointer' }}
                  onClick={e => { e.stopPropagation(); toggleFolder(dir.path); }}
                  title={isExpanded ? 'Collapse' : 'Expand'}
                >
                  {isExpanded ? '▼' : '▶'}
                </Icon>
                <span
                  style={{ flex: 1, cursor: 'pointer' }}
                  onClick={e => { e.stopPropagation(); toggleFolder(dir.path); }}
                >
                  {dir.name}
                </span>
                <button
                    style={{ marginLeft: 'auto', background: 'none', border: 'none', color: '#f44336', cursor: 'pointer', fontSize: '16px' }}
                    title="Delete folder"
                    onClick={e => { e.stopPropagation(); onDeleteFolder(dir.path, dir.name); }}
                >🗑️</button>
            </TreeItem>
            {isExpanded && (
                <FileTree depth={depth + 1}>
                    {dir.children.map(child => (
                        <FileTreeNode key={child.path} node={child} depth={depth + 1} activeFile={activeFile} onFileSelect={onFileSelect} onDelete={onDelete} onDeleteFolder={onDeleteFolder} expandedFolders={expandedFolders} toggleFolder={toggleFolder} />
                    ))}
                </FileTree>
            )}
        </div>
    );
};

const File = ({ file, activeFile, onFileSelect, onDelete }) => (
    <TreeItem $isActive={file.path === activeFile} onClick={() => onFileSelect(file.path)}>
        <Icon>📄</Icon> {file.name}
        <button
            style={{ marginLeft: 'auto', background: 'none', border: 'none', color: '#f44336', cursor: 'pointer', fontSize: '16px' }}
            title="Delete file"
            onClick={e => { e.stopPropagation(); onDelete(file.path, file.name); }}
        >🗑️</button>
    </TreeItem>
);

const FileTreeNode = ({ node, depth, ...props }) => {
    if (node.type === 'folder') {
        return <Directory dir={node} depth={depth} {...props} />;
    }
    return <File file={node} {...props} />;
};

function FileExplorer({ project, activeFile, onFileSelect, onProjectRefresh, projectName, layout, setLayout }) {
    const [modalState, setModalState] = useState({
        isOpen: false,
        type: '', // 'file' or 'folder'
        title: '',
        placeholder: '',
        value: ''
    });
    const [expandedFolders, setExpandedFolders] = useState(() => new Set());

    const showCreateFileModal = () => {
        setModalState({
            isOpen: true,
            type: 'file',
            title: '📄 Create New File',
            placeholder: 'e.g., utils/helpers.yc',
            value: ''
        });
    };

    const showCreateFolderModal = () => {
        setModalState({
            isOpen: true,
            type: 'folder',
            title: '📁 Create New Folder',
            placeholder: 'e.g., my_new_folder',
            value: ''
        });
    };

    const closeModal = () => {
        setModalState({
            isOpen: false,
            type: '',
            title: '',
            placeholder: '',
            value: ''
        });
    };

    const handleModalSubmit = async () => {
        if (!modalState.value.trim()) return;

        if (modalState.type === 'file') {
            await performCreateFile(modalState.value.trim());
        } else if (modalState.type === 'folder') {
            await performCreateFolder(modalState.value.trim());
        }
        closeModal();
    };
    
    const performCreateFile = async (path) => {
        console.log('=== performCreateFile START ===');
        console.log('projectName:', projectName);
        console.log('path:', path);
        
        try {
            if (!projectName) {
                console.log('ERROR: No project name');
                toast.error('❌ Project name not available');
                return;
            }
            
            console.log('Creating file:', { projectName, path });
            console.log('Calling createFile API...');
            await createFile(projectName, path);
            console.log('File created successfully:', path);
            toast.success(`✅ File created: ${path}`);
            
            console.log('Calling onProjectRefresh...');
            if (onProjectRefresh) {
                await onProjectRefresh();
                console.log('Project refreshed successfully');
            } else {
                console.warn('onProjectRefresh not available');
            }
        } catch (error) {
            console.error('=== CREATE FILE ERROR ===');
            console.error('Error:', error);
            console.error('Error details:', {
                message: error.message,
                response: error.response?.data,
                status: error.response?.status,
                stack: error.stack
            });
            toast.error(`❌ Failed to create file: ${error.message || 'Unknown error'}`);
        }
        console.log('=== performCreateFile END ===');
    };

    const performCreateFolder = async (path) => {
        console.log('=== performCreateFolder START ===');
        console.log('projectName:', projectName);
        console.log('path:', path);
        
        try {
            if (!projectName) {
                console.log('ERROR: No project name');
                toast.error('❌ Project name not available');
                return;
            }
            
            console.log('Creating folder:', { projectName, path });
            console.log('Calling createFolder API...');
            await createFolder(projectName, path);
            console.log('Folder created successfully:', path);
            toast.success(`✅ Folder created: ${path}`);
            
            console.log('Calling onProjectRefresh...');
            if (onProjectRefresh) {
                await onProjectRefresh();
                console.log('Project refreshed successfully');
            } else {
                console.warn('onProjectRefresh not available');
            }
        } catch (error) {
            console.error('=== CREATE FOLDER ERROR ===');
            console.error('Error:', error);
            console.error('Error details:', {
                message: error.message,
                response: error.response?.data,
                status: error.response?.status,
                stack: error.stack
            });
            toast.error(`❌ Failed to create folder: ${error.message || 'Unknown error'}`);
        }
        console.log('=== performCreateFolder END ===');
    };

    const handleDeleteFile = async (filePath, fileName) => {
        console.log('Delete file called:', { filePath, fileName, projectName });
        
        if (!projectName) {
            toast.error('❌ Project name not available');
            return;
        }
        
        const confirmed = window.confirm(
            `🗑️ Delete File Confirmation\n\n` +
            `Are you sure you want to delete "${fileName}"?\n\n` +
            `This action cannot be undone!`
        );
        
        if (!confirmed) return;
        
        console.log('Deleting file:', filePath);
        try {
            await deleteFile(projectName, filePath);
            console.log('File deleted successfully:', filePath);
            toast.success(`✅ File deleted: ${fileName}`);
            if (onProjectRefresh) {
                onProjectRefresh();
            } else {
                console.warn('onProjectRefresh not available');
            }
        } catch (error) {
            console.error('Delete file error:', error);
            toast.error(`❌ Failed to delete file: ${error.message || 'Unknown error'}`);
        }
    };
    
    const handleDeleteFolder = async (folderPath, folderName) => {
        console.log('Delete folder called:', { folderPath, folderName, projectName });
        
        if (!projectName) {
            toast.error('❌ Project name not available');
            return;
        }
        
        const confirmed = window.confirm(
            `🗑️ Delete Folder Confirmation\n\n` +
            `Are you sure you want to delete the folder "${folderName}" and ALL its contents?\n\n` +
            `This action cannot be undone!`
        );
        
        if (!confirmed) return;
        
        console.log('Deleting folder:', folderPath);
        try {
            await deleteFolder(projectName, folderPath);
            console.log('Folder deleted successfully:', folderPath);
            toast.success(`✅ Folder deleted: ${folderName}`);
            if (onProjectRefresh) {
                onProjectRefresh();
            } else {
                console.warn('onProjectRefresh not available');
            }
        } catch (error) {
            console.error('Delete folder error:', error);
            toast.error(`❌ Failed to delete folder: ${error.message || 'Unknown error'}`);
        }
    };

    // Expand root by default when project loads
    React.useEffect(() => {
        if (project && project.path && !expandedFolders.has(project.path)) {
            setExpandedFolders(prev => new Set(prev).add(project.path));
        }
    }, [project]);

    const toggleFolder = (folderPath) => {
        setExpandedFolders(prev => {
            const next = new Set(prev);
            if (next.has(folderPath)) {
                next.delete(folderPath);
            } else {
                next.add(folderPath);
            }
            return next;
        });
    };

    if (!layout.explorer) return <PanelHeader onClick={() => setLayout(l => ({...l, explorer: true}))}>Filing Cabinet</PanelHeader>;

    return (
        <>
            <PanelHeader>
                <span>Filing Cabinet</span>
                <div>
                  <button 
                    onClick={() => { console.log('Refresh button clicked'); onProjectRefresh(); }} 
                    style={{background:'none', border:'none', color:'white', cursor:'pointer', fontSize: '16px'}}
                    title="Refresh project structure"
                  >🔄</button>
                  <CloseButton onClick={() => setLayout(l => ({...l, explorer: false}))}>×</CloseButton>
                </div>
            </PanelHeader>
            <ExplorerContainer>
                {project ? (
                    <FileTree depth={0}>
                        {project.children.map(node => (
                            <FileTreeNode 
                                key={node.path} 
                                node={node} 
                                depth={0} 
                                activeFile={activeFile} 
                                onFileSelect={onFileSelect} 
                                onDelete={handleDeleteFile}
                                onDeleteFolder={handleDeleteFolder}
                                expandedFolders={expandedFolders}
                                toggleFolder={toggleFolder}
                            />
                        ))}
                    </FileTree>
                ) : (
                    <p>Connecting to backend...</p>
                )}
                 <ButtonContainer>
                    <ActionButton 
                        onClick={() => {
                            console.log('New File button clicked - opening modal');
                            showCreateFileModal();
                        }}
                    >
                        📄 New File
                    </ActionButton>
                    <ActionButton 
                        onClick={() => {
                            console.log('New Folder button clicked - opening modal');
                            showCreateFolderModal();
                        }}
                    >
                        📁 New Folder
                    </ActionButton>
                </ButtonContainer>
            </ExplorerContainer>
            {modalState.isOpen && (
                <Modal>
                    <ModalContent>
                        <h3>{modalState.title}</h3>
                        <p>Enter the path for the new {modalState.type}:</p>
                        <ModalInput
                            type="text"
                            placeholder={modalState.placeholder}
                            value={modalState.value}
                            onChange={(e) => setModalState(prev => ({ ...prev, value: e.target.value }))}
                            onKeyDown={(e) => {
                                if (e.key === 'Enter') {
                                    handleModalSubmit();
                                } else if (e.key === 'Escape') {
                                    closeModal();
                                }
                            }}
                            autoFocus
                        />
                        <ModalButtons>
                            <ModalButton onClick={closeModal}>Cancel</ModalButton>
                            <ModalButton primary onClick={handleModalSubmit}>Create</ModalButton>
                        </ModalButtons>
                    </ModalContent>
                </Modal>
            )}
        </>
    );
}

export default FileExplorer;

==================================================
### FILE: ./frontend/src/components/AiAssistant.jsx
==================================================

import React, { useState, useEffect, useRef } from 'react';
import styled from 'styled-components';
import { streamPollinationsResponse } from '../core/aiService';
import { createParser } from 'eventsource-parser';

const PanelHeader = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 8px 10px;
  background-color: #333;
  font-weight: bold;
  cursor: pointer;
  flex-shrink: 0;
`;

const CloseButton = styled.button`
  background: none;
  border: none;
  color: #ccc;
  font-size: 18px;
  cursor: pointer;
  &:hover { color: white; }
`;

const ChatHistory = styled.div`
  flex-grow: 1;
  padding: 10px;
  overflow-y: auto;
  font-size: 14px;
`;

const Message = styled.div`
  margin-bottom: 10px;
  padding: 8px 12px;
  border-radius: 5px;
  background-color: ${props => (props.role === 'user' ? '#0e639c' : '#3a3d41')};
  color: ${props => (props.role === 'tool' ? '#aaa' : '#d4d4d4')};
  font-style: ${props => (props.role === 'tool' ? 'italic' : 'normal')};
  white-space: pre-wrap;
  word-wrap: break-word;
`;

const InputArea = styled.div`
  display: flex;
  padding: 10px;
  border-top: 1px solid #333;
  flex-shrink: 0;
`;

const Input = styled.input`
  flex-grow: 1;
  background-color: #3c3c3c;
  border: 1px solid #555;
  color: #d4d4d4;
  padding: 8px;
  border-radius: 3px;
  margin-right: 10px;
`;

const SendButton = styled.button`
  background-color: #569cd6;
  border: none;
  color: white;
  padding: 8px 15px;
  cursor: pointer;
  &:hover { background-color: #4a8ac8; }
  &:disabled { background-color: #333; cursor: not-allowed; }
`;

const ModelSelector = styled.select`
    background-color: #3c3c3c;
    color: white;
    border: 1px solid #555;
    border-radius: 3px;
    margin-left: auto;
    margin-right: 10px;
`;

// Function to load WORDS.md documentation
async function loadYankovicDocs() {
  try {
    // Try Electron/Node first
    // eslint-disable-next-line no-undef
    const fs = window.require ? window.require('fs') : undefined;
    const path = window.require ? window.require('path') : undefined;
    
    if (fs && path) {
      let wordsPath = path.resolve(__dirname, '../../../WORDS.md');
      if (!fs.existsSync(wordsPath)) {
        wordsPath = path.resolve(__dirname, '../../../../WORDS.md');
      }
      if (!fs.existsSync(wordsPath)) {
        wordsPath = path.resolve(process.cwd(), 'WORDS.md');
      }
      return fs.readFileSync(wordsPath, 'utf-8');
    }
  } catch (e) {
    console.log('Not in Electron context, trying browser fetch...');
  }
  
  // Browser fallback
  try {
    const response = await fetch('/WORDS.md');
    if (response.ok) {
      return await response.text();
    }
  } catch (e) {
    console.error('Failed to load WORDS.md:', e);
  }
  
  return 'YankoviC documentation not available';
}

// Base system prompt - will be enhanced with WORDS.md content
const baseSystemPrompt = `You are "Al", a quirky and brilliant AI programming assistant for the YankoviC programming language. You are an expert on all things "Weird Al" Yankovic and you express this in your helpful, humorous, and slightly absurd responses. Your primary goal is to help the user write, debug, and understand YankoviC code.

IMPORTANT: You must ONLY work with YankoviC language syntax. Never suggest Python, JavaScript, or any other language. YankoviC has its own unique syntax and semantics.

Your capabilities are exposed as tools. When you need to interact with the IDE, you MUST call one of the following functions. Do not ask for permission; just call the tool.

YankoviC Language Documentation:
`;
const tools = [
    { type: 'function', function: { name: 'create_file', description: "Creates a new file in the user's workspace with the given content.", parameters: { type: 'object', properties: { filename: { type: 'string' }, content: { type: 'string' } }, required: ['filename', 'content'] } } },
    { type: 'function', function: { name: 'edit_file', description: "Replaces the entire content of an existing file.", parameters: { type: 'object', properties: { filename: { type: 'string' }, new_content: { type: 'string' } }, required: ['filename', 'new_content'] } } },
    { type: 'function', function: { name: 'read_file', description: "Reads the content of a file to analyze it.", parameters: { type: 'object', properties: { filename: { type: 'string' } }, required: ['filename'] } } },
    { type: 'function', function: { name: 'list_files', description: "Lists all files in the workspace.", parameters: { type: 'object', properties: {} } } },
    { type: 'function', function: { name: 'run_program', description: "Executes the current program and returns its console output.", parameters: { type: 'object', properties: {} } } },
    { type: 'function', function: { name: 'query_docs', description: "Queries internal documentation about a YankoviC keyword or concept.", parameters: { type: 'object', properties: { topic: { type: 'string' } }, required: ['topic'] } } }
];

function AiAssistant({ config, ideActions, layout, setLayout }) {
    const [messages, setMessages] = useState([
        { role: 'assistant', content: "I'm Al, your personal YankoviC guru! Let's polka!" }
    ]);
    const [userInput, setUserInput] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [selectedModel, setSelectedModel] = useState(config.aiModels[0].id);
    const [systemPrompt, setSystemPrompt] = useState(baseSystemPrompt);
    const chatEndRef = useRef(null);

    // Load YankoviC documentation on component mount
    useEffect(() => {
        loadYankovicDocs().then(docs => {
            setSystemPrompt(baseSystemPrompt + docs);
        });
    }, []);

    useEffect(() => {
        chatEndRef.current?.scrollIntoView({ behavior: "smooth" });
    }, [messages]);

    const handleSend = async () => {
        if (!userInput.trim() || isLoading) return;

        const newMessages = [...messages, { role: 'user', content: userInput }];
        setMessages(newMessages);
        setUserInput('');
        setIsLoading(true);
        setMessages(prev => [...prev, { role: 'assistant', content: '' }]);

        try {
            const conversation = [{ role: 'system', content: systemPrompt }, ...newMessages];
            const stream = await streamPollinationsResponse(conversation, tools, config, selectedModel);
            await handleReaderStream(stream);
            
        } catch (error) {
            console.error("Streaming failed:", error);
            setMessages(prev => {
                const lastMsgIndex = prev.length - 1;
                const updatedMessages = [...prev];
                updatedMessages[lastMsgIndex].content = `Error: ${error.message}`;
                return updatedMessages;
            });
        } finally {
            setIsLoading(false);
        }
    };
    
    const handleReaderStream = async (reader) => {
        const decoder = new TextDecoder();
        const parser = createParser((event) => {
            if (event.type === 'event') {
                if (event.data === '[DONE]') return;
                try {
                    const data = JSON.parse(event.data);
                    const textPart = data.choices?.[0]?.delta?.content || '';
                    if (textPart) {
                        setMessages(prev => {
                            const lastMsg = prev[prev.length - 1];
                            lastMsg.content += textPart;
                            return [...prev];
                        });
                    }
                } catch (e) { /* Ignore non-JSON chunks */ }
            }
        });
        while (true) {
            const { value, done } = await reader.read();
            if (done) break;
            const chunk = decoder.decode(value);
            parser.feed(chunk);
        }
    };

    if (!layout.ai) {
        return <PanelHeader onClick={() => setLayout(l => ({...l, ai: true}))}>The Al-manac (AI)</PanelHeader>
    }

    return (
        <>
            <PanelHeader>
                <span>The Al-manac (AI)</span>
                <ModelSelector value={selectedModel} onChange={e => setSelectedModel(e.target.value)}>
                    {config.aiModels.map(model => (
                        <option key={model.id} value={model.id}>{model.name}</option>
                    ))}
                </ModelSelector>
                <CloseButton onClick={() => setLayout(l => ({...l, ai: false}))}>×</CloseButton>
            </PanelHeader>
            <ChatHistory>
                {messages.map((msg, index) => (
                    <Message key={index} role={msg.role}>
                        <strong>{msg.role === 'user' ? 'You' : 'Al'}:</strong> {msg.content}
                    </Message>
                ))}
                {isLoading && messages[messages.length-1].content === '' && <Message role="assistant"><strong>Al:</strong> *Frantically playing accordion while thinking...*</Message>}
                <div ref={chatEndRef} />
            </ChatHistory>
            <InputArea>
                <Input
                    type="text"
                    value={userInput}
                    onChange={e => setUserInput(e.target.value)}
                    onKeyPress={e => e.key === 'Enter' && handleSend()}
                    placeholder={isLoading ? 'Al is playing a solo...' : 'Ask Al for help...'}
                    disabled={isLoading}
                />
                <SendButton onClick={handleSend} disabled={isLoading}>Send</SendButton>
            </InputArea>
        </>
    );
}

export default AiAssistant;

==================================================
### FILE: ./frontend/src/components/EditorPane.jsx
==================================================

import React, { useState, useRef } from 'react';
import Editor, { useMonaco } from '@monaco-editor/react';
import styled from 'styled-components';
import { useYankoviC } from '../hooks/useYankoviC';
import { useLinter } from '../hooks/useLinter';
import { defineThemes } from '../styles/themes';
import { getAiCodeCompletion } from '../core/aiService';

const EditorWrapper = styled.div`
  position: relative;
  height: 100%;
  width: 100%;
`;

const LoadingOverlay = styled.div`
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background-color: rgba(0, 0, 0, 0.7);
  color: white;
  padding: 10px 20px;
  border-radius: 5px;
  z-index: 10;
  font-family: monospace;
  pointer-events: none;
`;

function EditorPane({ activeFile, code, onCodeChange, config }) {
  const [editorTheme, setEditorTheme] = useState('yankovic-dark');
  const [isCompleting, setIsCompleting] = useState(false);
  const monaco = useMonaco();
  const editorRef = useRef(null);

  useYankoviC(monaco);
  useLinter(code, activeFile, monaco);

  const handleThemeChange = (newTheme) => {
    setEditorTheme(newTheme);
    if (monaco) {
        monaco.editor.setTheme(newTheme);
    }
  };
  
  const handleEditorDidMount = (editor, monacoInstance) => {
    editorRef.current = editor;
    defineThemes(monacoInstance);

    // --- AI TAB COMPLETION LOGIC ---
    editor.addCommand(monacoInstance.KeyCode.Tab, async () => {
        if (isCompleting) return;

        setIsCompleting(true);
        const model = editor.getModel();
        const position = editor.getPosition();
        
        // We send the code up to the cursor for completion
        const codeUntilCursor = model.getValueInRange({
            startLineNumber: 1,
            startColumn: 1,
            endLineNumber: position.lineNumber,
            endColumn: position.column
        });
        
        // The rest of the code after the cursor
        const codeAfterCursor = model.getValueInRange({
            startLineNumber: position.lineNumber,
            startColumn: position.column,
            endLineNumber: model.getLineCount(),
            endColumn: model.getLineMaxColumn(model.getLineCount())
        });

        // A special marker for the AI to know where the cursor is
        const fullCodeWithCursorMarker = `${codeUntilCursor}__CURSOR__${codeAfterCursor}`;

        try {
            const completion = await getAiCodeCompletion(fullCodeWithCursorMarker, config);
            
            // Insert the completion text
            editor.executeEdits('ai-completer', [{
                range: new monacoInstance.Range(position.lineNumber, position.column, position.lineNumber, position.column),
                text: completion
            }]);

        } catch (error) {
            console.error("Tab completion failed:", error);
        } finally {
            setIsCompleting(false);
        }

    }, '!suggestWidgetVisible'); // Only run when suggestions are not visible

  };

  return (
    <EditorWrapper>
        {isCompleting && <LoadingOverlay>Al is thinking...</LoadingOverlay>}
        <div style={{ padding: '5px', backgroundColor: '#333' }}>
            <label htmlFor="theme-select">Theme: </label>
            <select id="theme-select" value={editorTheme} onChange={e => handleThemeChange(e.target.value)}>
            <option value="yankovic-dark">Albuquerque by Night (Dark)</option>
            <option value="poodle-hat">Poodle Hat</option>
            <option value="uhf-mode">UHF Mode</option>
            <option value="dare-to-be-stupid">Dare to be Stupid</option>
            </select>
        </div>
        <Editor
            height="calc(100% - 35px)" // Adjust height for the theme selector
            language="yankovic"
            theme={editorTheme}
            value={code}
            onChange={onCodeChange}
            onMount={handleEditorDidMount}
            path={activeFile}
            options={{
            wordWrap: 'on',
            minimap: { enabled: true },
            fontSize: 14,
            tabCompletion: 'off', // Turn off default tab completion
            }}
        />
    </EditorWrapper>
  );
}

export default EditorPane;

==================================================
### FILE: ./frontend/src/styles/app.css
==================================================

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: #1e1e1e;
  color: #d4d4d4;
  overflow: hidden;
}

.app-container {
  display: flex;
  height: 100vh;
  width: 100vw;
}

.sidebar {
  width: 250px;
  background-color: #252526;
  border-right: 1px solid #333;
  display: flex;
  flex-direction: column;
}

.main-content {
  flex-grow: 1;
  display: flex;
  flex-direction: column;
}

.editor-console-split {
  flex-grow: 1;
  display: flex;
  flex-direction: column;
  overflow: hidden;
}

.bottom-panel {
  height: 300px; /* AI Assistant Panel Height */
  background-color: #252526;
  border-top: 1px solid #333;
}


==================================================
### FILE: ./frontend/src/styles/themes.js
==================================================

// The unused import has been removed from this file.

const randomHex = () => `#${Math.floor(Math.random()*16777215).toString(16).padEnd(6, '0')}`;

export const defineThemes = (monaco) => {
    // Standard Dark Mode
    monaco.editor.defineTheme('yankovic-dark', {
        base: 'vs-dark',
        inherit: true,
        rules: [
            { token: 'keyword.control.yankovic', foreground: 'c586c0' },
            { token: 'keyword.type.yankovic', foreground: '4ec9b0' },
            { token: 'keyword.return.yankovic', foreground: 'd16969' },
            { token: 'keyword.const.yankovic', foreground: '569cd6' },
            { token: 'function.yankovic', foreground: 'dcdcaa' },
        ],
        colors: {
            'editor.background': '#1e1e1e',
        },
    });

    // Poodle Hat Mode
    monaco.editor.defineTheme('poodle-hat', {
        base: 'vs-dark',
        inherit: false,
        rules: [
            { token: '', foreground: 'ffffff', background: '000000' },
            { token: 'keyword.control.yankovic', foreground: 'ff0000', fontStyle: 'bold' },
            { token: 'keyword.type.yankovic', foreground: 'ff0000' },
            { token: 'keyword.return.yankovic', foreground: 'ff0000' },
            { token: 'keyword.const.yankovic', foreground: 'ff0000' },
            { token: 'string', foreground: 'e0e0e0' },
            { token: 'number', foreground: 'e0e0e0' },
            { token: 'comment', foreground: '888888', fontStyle: 'italic' },
            { token: 'identifier', foreground: 'ffffff' },
            { token: 'function.yankovic', foreground: 'ffffff', fontStyle: 'bold' },

        ],
        colors: {
            'editor.background': '#000000',
            'editor.foreground': '#ffffff',
            'editorCursor.foreground': '#ff0000',
            'editor.lineHighlightBackground': '#220000',
            'editor.selectionBackground': '#ff0000',
            'editor.selectionForeground': '#000000',
        },
    });

    // UHF Mode
    monaco.editor.defineTheme('uhf-mode', {
        base: 'vs',
        inherit: true,
        rules: [
            { token: 'keyword.control.yankovic', foreground: 'FF4F00' }, // Orange
            { token: 'keyword.type.yankovic', foreground: '00A9E0' }, // Blue
            { token: 'keyword.return.yankovic', foreground: '9C27B0' }, // Purple
            { token: 'keyword.const.yankovic', foreground: 'FFEB3B' }, // Yellow
            { token: 'function.yankovic', foreground: '4CAF50' }, // Green
            { token: 'string', foreground: '333333'},
        ],
        colors: {
            'editor.background': '#E6E6E6', // Light gray, like an old TV
            'editor.foreground': '#212121',
            'editorCursor.foreground': '#FF4F00',
            'editor.lineHighlightBackground': '#D1D1D1',
        },
    });

    // Dare to be Stupid Mode (dynamic theme)
    const generateStupidTheme = () => ({
        base: 'vs-dark',
        inherit: true,
        rules: [
            { token: 'keyword.control.yankovic', foreground: randomHex() },
            { token: 'keyword.type.yankovic', foreground: randomHex() },
            { token: 'keyword.return.yankovic', foreground: randomHex() },
            { token: 'keyword.const.yankovic', foreground: randomHex() },
            { token: 'function.yankovic', foreground: randomHex() },
            { token: 'string', foreground: randomHex() },
            { token: 'number', foreground: randomHex() },
            { token: 'comment', foreground: randomHex() },
            { token: 'identifier', foreground: randomHex() },
        ],
        colors: { 'editor.background': randomHex() },
    });
    
    // We register a placeholder and will update it dynamically
    monaco.editor.defineTheme('dare-to-be-stupid', generateStupidTheme());

    return { generateStupidTheme };
};

==================================================
### FILE: ./frontend/src/App.jsx
==================================================

import React, { useState, useEffect, useCallback, useRef } from 'react';
import styled, { ThemeProvider } from 'styled-components';
import FileExplorer from './components/FileExplorer';
import EditorPane from './components/EditorPane';
import Console from './components/Console';
import AiAssistant from './components/AiAssistant';
import Debugger from './components/Debugger';
import { YankoviCInterpreter } from './core/yankovicInterpreter';
import { WebUHFRenderer } from './core/webUHF';
import { toast } from 'react-toastify';
import { getProjectStructure, getFileContent, saveFileContent, execCommand } from './core/fileApiService';

const AppGrid = styled.div`
  display: grid;
  height: 100vh;
  width: 100vw;
  background-color: #1e1e1e;
  color: #d4d4d4;
  grid-template-columns: ${props => props.$layout.explorer ? '250px' : '40px'} 1fr ${props => props.$layout.ai ? '400px' : '40px'};
  grid-template-rows: 1fr ${props => props.$layout.console ? '250px' : '40px'};
  grid-template-areas:
    "explorer editor ai"
    "explorer console ai";
  transition: all 0.2s ease-in-out;
`;

const Panel = styled.div`
  background-color: #252526;
  border: 1px solid #333;
  display: flex;
  flex-direction: column;
  overflow: hidden;
  position: relative;
`;

const SidebarPanel = styled(Panel)` grid-area: explorer; `;
const EditorPanel = styled(Panel)` grid-area: editor; background-color: #1e1e1e; `;
const ConsolePanel = styled(Panel)` grid-area: console; `;
const AiPanel = styled(Panel)` grid-area: ai; `;

function App() {
  const [config, setConfig] = useState(null);
  const [projectStructure, setProjectStructure] = useState(null);
  const [activeFile, setActiveFile] = useState({ path: null, content: '', originalContent: '' });
  const [consoleOutput, setConsoleOutput] = useState('Welcome to The Accordion!\n');
  const [debuggerState, setDebuggerState] = useState('thinking');
  const [layout, setLayout] = useState({ explorer: true, console: true, ai: true });
  const [isSaving, setIsSaving] = useState(false);
  const [isLoopRunning, setIsLoopRunning] = useState(false);
  const [terminalSessionId, setTerminalSessionId] = useState(() => localStorage.getItem('terminalSessionId') || null);
  const [terminalCwd, setTerminalCwd] = useState(null);

  const interpreterRef = useRef(new YankoviCInterpreter());
  const webUHFRef = useRef(new WebUHFRenderer());

  const projectName = 'default-project';

  const findFirstFile = (node) => {
      if (node.type === 'file') return node;
      if (node.children) {
          for (const child of node.children) {
              const found = findFirstFile(child);
              if (found) return found;
          }
      }
      return null;
  }
  
  const openFile = useCallback(async (filePath) => {
    try {
        const content = await getFileContent(projectName, filePath);
        setActiveFile({ path: filePath, content, originalContent: content });
    } catch (error) {
        toast.error(`Could not open file: ${filePath}`);
    }
  }, [projectName]);

  const loadProject = useCallback(async () => {
    try {
        const structure = await getProjectStructure(projectName);
        setProjectStructure(structure);
        if (!activeFile.path && structure?.children?.length > 0) {
            const firstFile = findFirstFile(structure);
            if(firstFile) openFile(firstFile.path);
        }
    } catch (error) {
        toast.error("Could not connect to the local backend server. Is it running?");
        console.error(error);
    }
  }, [projectName, activeFile.path, openFile]);

  useEffect(() => {
    fetch('/config.json').then(res => res.json()).then(setConfig);
    loadProject();
  }, [loadProject]);

  const handleCodeChange = (newCode) => {
    if (activeFile.path) {
        setActiveFile(prev => ({ ...prev, content: newCode }));
    }
  };

  useEffect(() => {
    if (!activeFile.path || isSaving || activeFile.content === activeFile.originalContent) return;
    const handler = setTimeout(async () => {
        setIsSaving(true);
        try {
            await saveFileContent(projectName, activeFile.path, activeFile.content);
            setActiveFile(prev => ({ ...prev, originalContent: prev.content }));
        } catch (error) {
            toast.error(`Failed to auto-save ${activeFile.path}`);
        } finally {
            setIsSaving(false);
        }
    }, 2000);
    return () => clearTimeout(handler);
  }, [activeFile.content, activeFile.path, activeFile.originalContent, projectName, isSaving]);
  
  // ---> REPLACED old runCode with a generic version
  const runCode = useCallback(async (codeToRun, filePath) => {
    if (!codeToRun) {
        toast.error("There's no code to run! What're you thinkin'?");
        return;
    }
    
    setDebuggerState('thinking');
    const interpreter = interpreterRef.current;
    
    // Bind webUHF for non-Electron environments
    if (!window.uhfAPI) {
        interpreter.webUHF = webUHFRef.current;
    }

    try {
        const result = await interpreter.run(codeToRun);
        setConsoleOutput(prev => prev + `> Running ${filePath || 'code'}...\n${result.output}\n`);

        if (interpreter.polkaLoop) {
            setIsLoopRunning(true);
        } else {
            setDebuggerState(result.exitCode === 27 ? 'happy' : 'disappointed');
            setConsoleOutput(prev => prev + `> Program finished with exit code: ${result.exitCode}.\n`);
        }
    } catch (error) {
        console.error('Error running code:', error);
        setConsoleOutput(prev => prev + `> Error running code: ${error.message}\n`);
        setDebuggerState('disappointed');
    }
  }, [isLoopRunning]); // Removed activeFile dependencies

  // ---> NEW: Listener for CLI file execution
  useEffect(() => {
    if (!window.uhfAPI) return;

    const handleCliRun = (event, code) => {
        console.log('[App] Received run-cli-file event');
        // Update the editor and state, then run the code
        setActiveFile({ path: 'CLI Execution', content: code, originalContent: code });
        runCode(code, 'CLI Execution');
    };
    
    window.uhfAPI.on('run-cli-file', handleCliRun);

    return () => {
        window.uhfAPI.removeListener('run-cli-file', handleCliRun);
    };
  }, [runCode]); // Depend on the runCode callback

  const stopCode = useCallback(() => {
    interpreterRef.current.stopLoop();
    setIsLoopRunning(false);
    setConsoleOutput(prev => prev + "> Polka manually stopped by user.\n");
  }, []);

  useEffect(() => {
    if (!window.uhfAPI) return;

    const runFrameHandler = () => interpreterRef.current.runFrame();
    
    const showIsOverHandler = () => {
        setConsoleOutput(prev => prev + "> Show's over, folks! Window was closed.\n");
        setIsLoopRunning(false);
        if (interpreterRef.current) interpreterRef.current.stopLoop();
    };
    
    const uiStateUpdateHandler = (event, newState) => {
        if (interpreterRef.current) interpreterRef.current.uiState = newState;
    };

    if (isLoopRunning) {
        window.uhfAPI.on('UHF:run_frame', runFrameHandler);
        window.uhfAPI.on('UHF:show-is-over', showIsOverHandler);
        window.uhfAPI.on('UHF:ui-state-update', uiStateUpdateHandler);
    }

    return () => {
        window.uhfAPI.removeListener('UHF:run_frame', runFrameHandler);
        window.uhfAPI.removeListener('UHF:show-is-over', showIsOverHandler);
        window.uhfAPI.removeListener('UHF:ui-state-update', uiStateUpdateHandler);
    };
  }, [isLoopRunning]);

  // ---> NEW: Callback for the console button
  const handleRunFromConsole = () => {
      runCode(activeFile.content, activeFile.path);
  };

  // Handle console input (YankoviC code or terminal command)
  const handleConsoleCommand = useCallback(async (input) => {
    // Terminal command if starts with ! or $
    if (/^(!|\$)/.test(input.trim())) {
      const command = input.trim().replace(/^(!|\$)\s*/, '');
      setConsoleOutput(prev => prev + `> $ ${command}\n`);
      try {
        const result = await execCommand(command, terminalSessionId);
        const { stdout, stderr, cwd, sessionId } = result;
        if (sessionId && sessionId !== terminalSessionId) {
          setTerminalSessionId(sessionId);
          localStorage.setItem('terminalSessionId', sessionId);
        }
        if (cwd) setTerminalCwd(cwd);
        if (stdout) setConsoleOutput(prev => prev + stdout + (stdout.endsWith('\n') ? '' : '\n'));
        if (stderr) setConsoleOutput(prev => prev + stderr + (stderr.endsWith('\n') ? '' : '\n'));
      } catch (err) {
        setConsoleOutput(prev => prev + `Error: ${err.message}\n`);
      }
      return;
    }
    // Otherwise, treat as YankoviC code (run current file)
    runCode(input, activeFile.path || 'Console Input');
  }, [runCode, activeFile.path, terminalSessionId]);

  // On mount, fetch initial cwd if sessionId exists
  useEffect(() => {
    async function fetchInitialCwd() {
      if (terminalSessionId) {
        const result = await execCommand('pwd', terminalSessionId);
        if (result.cwd) setTerminalCwd(result.cwd);
      }
    }
    fetchInitialCwd();
  }, [terminalSessionId]);

  return (
    <ThemeProvider theme={{ mode: 'dark' }}>
      { !config ? (
        <div>Loading The Accordion... Please stand by for the polka...</div>
      ) : (
      <AppGrid $layout={layout}>
        <SidebarPanel>
          <FileExplorer 
            project={projectStructure} 
            activeFile={activeFile.path} 
            onFileSelect={openFile}
            onProjectRefresh={loadProject}
            projectName={projectName}
            layout={layout} setLayout={setLayout}
          />
          <Debugger state={debuggerState} />
        </SidebarPanel>
        <EditorPanel>
          <EditorPane 
            activeFile={activeFile.path} 
            code={activeFile.content} 
            onCodeChange={handleCodeChange} 
            config={config} 
          />
        </EditorPanel>
        <ConsolePanel>
            <Console 
                output={consoleOutput} 
                onRun={handleRunFromConsole} // Use the new handler
                onStop={stopCode}
                isRunning={isLoopRunning}
                layout={layout} 
                setLayout={setLayout} 
                onCommand={handleConsoleCommand}
                prompt={terminalCwd ? terminalCwd.replace(/^.*projects\//, 'projects/') : '$'}
            />
        </ConsolePanel>
        <AiPanel>
            <AiAssistant config={config} ideActions={{}} layout={layout} setLayout={setLayout} />
        </AiPanel>
      </AppGrid>
      )}
    </ThemeProvider>
  );
}

export default App;

==================================================
### FILE: ./frontend/src/main.jsx
==================================================

import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App.jsx';
import { ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
    <ToastContainer
      position="top-center"
      autoClose={7000}
      hideProgressBar={false}
      newestOnTop={false}
      closeOnClick
      rtl={false}
      pauseOnFocusLoss
      draggable
      pauseOnHover
      theme="dark"
      style={{ width: "500px", fontSize: "16px" }}
    />
  </React.StrictMode>,
);

==================================================
### FILE: ./frontend/src/hooks/useLinter.js
==================================================

import { useEffect } from 'react';
import { toast } from 'react-toastify';

const lintingMocks = {
    MISSING_SEMICOLON: "You're about as useful as a screen door on a battleship! You missed a semicolon.",
    BAD_VARIABLE_NAME: (name) => `A variable named '${name}'? That's not just wrong, it's tacky! Try something more descriptive.`,
};

let toastCooldown = {};

export const useLinter = (code, filename, monaco) => {
  useEffect(() => {
    // THIS IS THE BULLETPROOF GUARD CLAUSE.
    // It will not proceed until monaco, monaco.editor, and the specific
    // MarkerSeverity enum are all confirmed to exist. This resolves the race condition.
    if (!monaco || !monaco.editor || !monaco.editor.MarkerSeverity) {
        return;
    }

    const model = monaco.editor.getModels().find(m => m.uri.path.endsWith(filename));
    if (!model) {
        // Clear markers for the previous model if it's been removed
        monaco.editor.setModelMarkers(monaco.editor.getModels()[0], 'yankovic-linter', []);
        return;
    }

    const markers = [];
    const lines = code.split('\n');
    
    lines.forEach((line, i) => {
        // Rule: Missing Semicolon
        if (line.trim().length > 0 && !line.trim().endsWith(';') && !line.trim().endsWith('{') && !line.trim().endsWith('}') && !line.startsWith('//') && !line.startsWith('#')) {
            markers.push({
                message: "This line looks like it's missing a semicolon. Don't be a word criminal.",
                severity: monaco.editor.MarkerSeverity.Error, // This is now safe to access
                startLineNumber: i + 1,
                startColumn: line.trimEnd().length + 1,
                endLineNumber: i + 1,
                endColumn: line.trimEnd().length + 2,
            });
            if (!toastCooldown['semi']) {
                toast.error(lintingMocks.MISSING_SEMICOLON);
                toastCooldown['semi'] = true;
                setTimeout(() => delete toastCooldown['semi'], 10000);
            }
        }

        // Rule: Bad Variable Name
        if (line.match(/\b(spatula|verse)\s+(i|x|y|temp|data)\s*=/)) {
            const badName = line.match(/\b(i|x|y|temp|data)\b/)[0];
            markers.push({
                message: `The variable name '${badName}' is uninspired. Dare to be stupid(er)!`,
                severity: monaco.editor.MarkerSeverity.Warning, // This is also safe now
                startLineNumber: i + 1,
                startColumn: line.indexOf(badName) + 1,
                endLineNumber: i + 1,
                endColumn: line.indexOf(badName) + 1 + badName.length,
            });
             if (!toastCooldown['badname']) {
                toast.warn(lintingMocks.BAD_VARIABLE_NAME(badName));
                toastCooldown['badname'] = true;
                setTimeout(() => delete toastCooldown['badname'], 15000);
            }
        }
    });
    
    monaco.editor.setModelMarkers(model, 'yankovic-linter', markers);

  }, [code, filename, monaco]);
};

==================================================
### FILE: ./frontend/src/hooks/useYankoviC.js
==================================================

import { useEffect } from 'react';
import { nouns, verbs, adjectives } from '../data/lyricPrompter';

const yankovicKeywords = [
    'spatula', 'lasagna', 'lyric', 'verse', 'horoscope', 'accordion_solo',
    'jeopardy', 'what_if_god_was_one_of_us', 'another_one', 'polka',
    'do_the_polka', 'hardware_store', 'twinkie_wiener_sandwich',
    'stupid', 'its_a_fact', 'total_baloney', 'lunchbox', 'gimme_a',
    'in_the_blender', '#eat', 'give_up', 'do_it_again', 'this_box'
];

export const useYankoviC = (monaco) => {
  useEffect(() => {
    if (!monaco) return;

    // 1. Register the language
    monaco.languages.register({ id: 'yankovic' });

    // 2. Set up the tokenizer (syntax highlighting)
    monaco.languages.setMonarchTokensProvider('yankovic', {
      keywords: yankovicKeywords,
      tokenizer: {
        root: [
          [/[a-zA-Z_][\w]*/, {
            cases: {
              '@keywords': {
                cases: {
                    'spatula|lasagna|lyric|verse|horoscope|accordion_solo': 'keyword.type.yankovic',
                    'jeopardy|polka|hardware_store|another_one|do_the_polka': 'keyword.control.yankovic',
                    'twinkie_wiener_sandwich': 'keyword.return.yankovic',
                    'stupid': 'keyword.const.yankovic',
                    '@default': 'keyword'
                }
              },
              '@default': 'identifier'
            }
          }],
          [/#eat\s*<.*?>/, 'preprocessor'],
          [/"[^"]*"/, 'string'],
          [/\d+/, 'number'],
          [/[{}();,]/, 'delimiter'],
          [/\/\/.*/, 'comment'],
        ]
      }
    });

    // 3. Set up the Lyric Prompter (autocomplete)
    monaco.languages.registerCompletionItemProvider('yankovic', {
      provideCompletionItems: (model, position) => {
        const word = model.getWordUntilPosition(position);
        const range = {
          startLineNumber: position.lineNumber,
          endLineNumber: position.lineNumber,
          startColumn: word.startColumn,
          endColumn: word.endColumn,
        };
        
        const keywordSuggestions = yankovicKeywords.map(k => ({
            label: k,
            kind: monaco.languages.CompletionItemKind.Keyword,
            insertText: k,
            range: range
        }));

        // Lyric Prompter Suggestions
        const nounSuggestions = nouns.map(n => ({
            label: `var: ${n}`,
            kind: monaco.languages.CompletionItemKind.Variable,
            insertText: n,
            range: range,
            detail: 'Thematic Noun'
        }));
        const verbSuggestions = verbs.map(v => ({
            label: `func: ${v}()`,
            kind: monaco.languages.CompletionItemKind.Function,
            insertText: `${v}()`,
            range: range,
            detail: 'Thematic Verb'
        }));
        
        return {
          suggestions: [...keywordSuggestions, ...nounSuggestions, ...verbSuggestions],
        };
      },
    });

  }, [monaco]);
};


==================================================
### FILE: ./frontend/vite.config.js
==================================================

import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import { resolve } from 'path'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
  build: {
    rollupOptions: {
      input: {
        // The main IDE entry point
        main: resolve(__dirname, 'index.html'),
        // The new, dedicated entry point for the CLI runner
        'cli-renderer': resolve(__dirname, 'src/cli-main.jsx'),
      },
      output: {
        // Ensure the output file for the cli-renderer has a predictable name
        entryFileNames: (chunkInfo) => {
          return chunkInfo.name === 'cli-renderer' ? 'assets/cli-renderer.js' : 'assets/[name]-[hash].js';
        }
      }
    }
  }
})

==================================================
### FILE: ./frontend/package.json
==================================================

{
  "name": "frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "@monaco-editor/react": "^4.6.0",
    "axios": "^1.7.2",
    "eventsource-parser": "^1.1.2",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-toastify": "^10.0.5",
    "styled-components": "^6.1.11"
  },
  "devDependencies": {
    "@types/react": "^18.2.79",
    "@types/react-dom": "^18.2.25",
    "@vitejs/plugin-react": "^4.2.1",
    "vite": "^5.2.11"
  }
}

==================================================
### FILE: ./frontend/package-lock.json
==================================================

{
  "name": "frontend",
  "version": "0.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "frontend",
      "version": "0.0.0",
      "dependencies": {
        "@monaco-editor/react": "^4.6.0",
        "axios": "^1.7.2",
        "eventsource-parser": "^1.1.2",
        "react": "^18.2.0",
        "react-dom": "^18.2.0",
        "react-toastify": "^10.0.5",
        "styled-components": "^6.1.11"
      },
      "devDependencies": {
        "@types/react": "^18.2.79",
        "@types/react-dom": "^18.2.25",
        "@vitejs/plugin-react": "^4.2.1",
        "vite": "^5.2.11"
      }
    },
    "node_modules/@ampproject/remapping": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.3.0.tgz",
      "integrity": "sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.24"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/code-frame": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.27.1.tgz",
      "integrity": "sha512-cjQ7ZlQ0Mv3b47hABuTevyTuYN4i+loJKGeV9flcCgIK37cCXRh+L1bd3iBHlynerhQ7BhCkn2BPbQUL+rGqFg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.27.1",
        "js-tokens": "^4.0.0",
        "picocolors": "^1.1.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/compat-data": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.28.0.tgz",
      "integrity": "sha512-60X7qkglvrap8mn1lh2ebxXdZYtUcpd7gsmy9kLaBJ4i/WdY8PqTSdxyA8qraikqKQK5C1KRBKXqznrVapyNaw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/core": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.28.0.tgz",
      "integrity": "sha512-UlLAnTPrFdNGoFtbSXwcGFQBtQZJCNjaN6hQNP3UPvuNXT1i82N26KL3dZeIpNalWywr9IuQuncaAfUaS1g6sQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@ampproject/remapping": "^2.2.0",
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.28.0",
        "@babel/helper-compilation-targets": "^7.27.2",
        "@babel/helper-module-transforms": "^7.27.3",
        "@babel/helpers": "^7.27.6",
        "@babel/parser": "^7.28.0",
        "@babel/template": "^7.27.2",
        "@babel/traverse": "^7.28.0",
        "@babel/types": "^7.28.0",
        "convert-source-map": "^2.0.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.2",
        "json5": "^2.2.3",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/babel"
      }
    },
    "node_modules/@babel/generator": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.28.0.tgz",
      "integrity": "sha512-lJjzvrbEeWrhB4P3QBsH7tey117PjLZnDbLiQEKjQ/fNJTjuq4HSqgFA+UNSwZT8D7dxxbnuSBMsa1lrWzKlQg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.28.0",
        "@babel/types": "^7.28.0",
        "@jridgewell/gen-mapping": "^0.3.12",
        "@jridgewell/trace-mapping": "^0.3.28",
        "jsesc": "^3.0.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.27.2.tgz",
      "integrity": "sha512-2+1thGUUWWjLTYTHZWK1n8Yga0ijBz1XAhUXcKy81rd5g6yh7hGqMp45v7cadSbEHc9G3OTv45SyneRN3ps4DQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/compat-data": "^7.27.2",
        "@babel/helper-validator-option": "^7.27.1",
        "browserslist": "^4.24.0",
        "lru-cache": "^5.1.1",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-globals": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/helper-globals/-/helper-globals-7.28.0.tgz",
      "integrity": "sha512-+W6cISkXFa1jXsDEdYA8HeevQT/FULhxzR99pxphltZcVaugps53THCeiWA8SguxxpSp3gKPiuYfSWopkLQ4hw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-imports": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.27.1.tgz",
      "integrity": "sha512-0gSFWUPNXNopqtIPQvlD5WgXYI5GY2kP2cCvoT8kczjbfcfuIljTbcWrulD1CIPIX2gt1wghbDy08yE1p+/r3w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/traverse": "^7.27.1",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-transforms": {
      "version": "7.27.3",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.27.3.tgz",
      "integrity": "sha512-dSOvYwvyLsWBeIRyOeHXp5vPj5l1I011r52FM1+r1jCERv+aFXYk4whgQccYEGYxK2H3ZAIA8nuPkQ0HaUo3qg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-imports": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1",
        "@babel/traverse": "^7.27.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-plugin-utils": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.27.1.tgz",
      "integrity": "sha512-1gn1Up5YXka3YYAHGKpbideQ5Yjf1tDa9qYcgysz+cNCXukyLl6DjPXhD3VRwSb8c0J9tA4b2+rHEZtc6R0tlw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-string-parser": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.27.1.tgz",
      "integrity": "sha512-qMlSxKbpRlAridDExk92nSobyDdpPijUq2DW6oDnUqd0iOGxmQjyqhMIihI9+zv4LPyZdRje2cavWPbCbWm3eA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.27.1.tgz",
      "integrity": "sha512-D2hP9eA+Sqx1kBZgzxZh0y1trbuU+JoDkiEwqhQ36nodYqJwyEIhPSdMNd7lOm/4io72luTPWH20Yda0xOuUow==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-option": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.27.1.tgz",
      "integrity": "sha512-YvjJow9FxbhFFKDSuFnVCe2WxXk1zWc22fFePVNEaWJEu8IrZVlda6N0uHwzZrUM1il7NC9Mlp4MaJYbYd9JSg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helpers": {
      "version": "7.27.6",
      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.27.6.tgz",
      "integrity": "sha512-muE8Tt8M22638HU31A3CgfSUciwz1fhATfoVai05aPXGor//CdWDCbnlY1yvBPo07njuVOCNGCSp/GTt12lIug==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.27.6"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.28.0.tgz",
      "integrity": "sha512-jVZGvOxOuNSsuQuLRTh13nU0AogFlw32w/MT+LV6D3sP5WdbW61E77RnkbaO2dUvmPAYrBDJXGn5gGS6tH4j8g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.28.0"
      },
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-self": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-self/-/plugin-transform-react-jsx-self-7.27.1.tgz",
      "integrity": "sha512-6UzkCs+ejGdZ5mFFC/OCUrv028ab2fp1znZmCZjAOBKiBK2jXD1O+BPSfX8X2qjJ75fZBMSnQn3Rq2mrBJK2mw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-source": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-source/-/plugin-transform-react-jsx-source-7.27.1.tgz",
      "integrity": "sha512-zbwoTsBruTeKB9hSq73ha66iFeJHuaFkUbwvqElnygoNbj/jHRsSeokowZFN3CZ64IvEqcmmkVe89OPXc7ldAw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/template": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.27.2.tgz",
      "integrity": "sha512-LPDZ85aEJyYSd18/DkjNh4/y1ntkE5KwUHWTiqgRxruuZL2F1yuHligVHLvcHY2vMHXttKFpJn6LwfI7cw7ODw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/parser": "^7.27.2",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.28.0.tgz",
      "integrity": "sha512-mGe7UK5wWyh0bKRfupsUchrQGqvDbZDbKJw+kcRGSmdHVYrv+ltd0pnpDTVpiTqnaBru9iEvA8pz8W46v0Amwg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.28.0",
        "@babel/helper-globals": "^7.28.0",
        "@babel/parser": "^7.28.0",
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.28.0",
        "debug": "^4.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/types": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.28.0.tgz",
      "integrity": "sha512-jYnje+JyZG5YThjHiF28oT4SIZLnYOcSBb6+SDaFIyzDVSkXQmQQYclJ2R+YxcdmK0AX6x1E5OQNtuh3jHDrUg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-string-parser": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@emotion/is-prop-valid": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/@emotion/is-prop-valid/-/is-prop-valid-1.2.2.tgz",
      "integrity": "sha512-uNsoYd37AFmaCdXlg6EYD1KaPOaRWRByMCYzbKUX4+hhMfrxdVSelShywL4JVaAeM/eHUOSprYBQls+/neX3pw==",
      "license": "MIT",
      "dependencies": {
        "@emotion/memoize": "^0.8.1"
      }
    },
    "node_modules/@emotion/memoize": {
      "version": "0.8.1",
      "resolved": "https://registry.npmjs.org/@emotion/memoize/-/memoize-0.8.1.tgz",
      "integrity": "sha512-W2P2c/VRW1/1tLox0mVUalvnWXxavmv/Oum2aPsRcoDJuob75FC3Y8FbpfLwUegRcxINtGUMPq0tFCvYNTBXNA==",
      "license": "MIT"
    },
    "node_modules/@emotion/unitless": {
      "version": "0.8.1",
      "resolved": "https://registry.npmjs.org/@emotion/unitless/-/unitless-0.8.1.tgz",
      "integrity": "sha512-KOEGMu6dmJZtpadb476IsZBclKvILjopjUii3V+7MnXIQCYh8W3NgNcgwo21n9LXZX6EDIKvqfjYxXebDwxKmQ==",
      "license": "MIT"
    },
    "node_modules/@esbuild/aix-ppc64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.21.5.tgz",
      "integrity": "sha512-1SDgH6ZSPTlggy1yI6+Dbkiz8xzpHJEVAlF/AM1tHPLsf5STom9rwtjE4hKAF20FfXXNTFqEYXyJNWh1GiZedQ==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "aix"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/android-arm": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.21.5.tgz",
      "integrity": "sha512-vCPvzSjpPHEi1siZdlvAlsPxXl7WbOVUBBAowWug4rJHb68Ox8KualB+1ocNvT5fjv6wpkX6o/iEpbDrf68zcg==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/android-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.21.5.tgz",
      "integrity": "sha512-c0uX9VAUBQ7dTDCjq+wdyGLowMdtR/GoC2U5IYk/7D1H1JYC0qseD7+11iMP2mRLN9RcCMRcjC4YMclCzGwS/A==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/android-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.21.5.tgz",
      "integrity": "sha512-D7aPRUUNHRBwHxzxRvp856rjUHRFW1SdQATKXH2hqA0kAZb1hKmi02OpYRacl0TxIGz/ZmXWlbZgjwWYaCakTA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/darwin-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.21.5.tgz",
      "integrity": "sha512-DwqXqZyuk5AiWWf3UfLiRDJ5EDd49zg6O9wclZ7kUMv2WRFr4HKjXp/5t8JZ11QbQfUS6/cRCKGwYhtNAY88kQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/darwin-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.21.5.tgz",
      "integrity": "sha512-se/JjF8NlmKVG4kNIuyWMV/22ZaerB+qaSi5MdrXtd6R08kvs2qCN4C09miupktDitvh8jRFflwGFBQcxZRjbw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/freebsd-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.21.5.tgz",
      "integrity": "sha512-5JcRxxRDUJLX8JXp/wcBCy3pENnCgBR9bN6JsY4OmhfUtIHe3ZW0mawA7+RDAcMLrMIZaf03NlQiX9DGyB8h4g==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/freebsd-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.21.5.tgz",
      "integrity": "sha512-J95kNBj1zkbMXtHVH29bBriQygMXqoVQOQYA+ISs0/2l3T9/kj42ow2mpqerRBxDJnmkUDCaQT/dfNXWX/ZZCQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-arm": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.21.5.tgz",
      "integrity": "sha512-bPb5AHZtbeNGjCKVZ9UGqGwo8EUu4cLq68E95A53KlxAPRmUyYv2D6F0uUI65XisGOL1hBP5mTronbgo+0bFcA==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.21.5.tgz",
      "integrity": "sha512-ibKvmyYzKsBeX8d8I7MH/TMfWDXBF3db4qM6sy+7re0YXya+K1cem3on9XgdT2EQGMu4hQyZhan7TeQ8XkGp4Q==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-ia32": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.21.5.tgz",
      "integrity": "sha512-YvjXDqLRqPDl2dvRODYmmhz4rPeVKYvppfGYKSNGdyZkA01046pLWyRKKI3ax8fbJoK5QbxblURkwK/MWY18Tg==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-loong64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.21.5.tgz",
      "integrity": "sha512-uHf1BmMG8qEvzdrzAqg2SIG/02+4/DHB6a9Kbya0XDvwDEKCoC8ZRWI5JJvNdUjtciBGFQ5PuBlpEOXQj+JQSg==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-mips64el": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.21.5.tgz",
      "integrity": "sha512-IajOmO+KJK23bj52dFSNCMsz1QP1DqM6cwLUv3W1QwyxkyIWecfafnI555fvSGqEKwjMXVLokcV5ygHW5b3Jbg==",
      "cpu": [
        "mips64el"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-ppc64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.21.5.tgz",
      "integrity": "sha512-1hHV/Z4OEfMwpLO8rp7CvlhBDnjsC3CttJXIhBi+5Aj5r+MBvy4egg7wCbe//hSsT+RvDAG7s81tAvpL2XAE4w==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-riscv64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.21.5.tgz",
      "integrity": "sha512-2HdXDMd9GMgTGrPWnJzP2ALSokE/0O5HhTUvWIbD3YdjME8JwvSCnNGBnTThKGEB91OZhzrJ4qIIxk/SBmyDDA==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-s390x": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.21.5.tgz",
      "integrity": "sha512-zus5sxzqBJD3eXxwvjN1yQkRepANgxE9lgOW2qLnmr8ikMTphkjgXu1HR01K4FJg8h1kEEDAqDcZQtbrRnB41A==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/linux-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.21.5.tgz",
      "integrity": "sha512-1rYdTpyv03iycF1+BhzrzQJCdOuAOtaqHTWJZCWvijKD2N5Xu0TtVC8/+1faWqcP9iBCWOmjmhoH94dH82BxPQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/netbsd-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.21.5.tgz",
      "integrity": "sha512-Woi2MXzXjMULccIwMnLciyZH4nCIMpWQAs049KEeMvOcNADVxo0UBIQPfSmxB3CWKedngg7sWZdLvLczpe0tLg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/openbsd-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.21.5.tgz",
      "integrity": "sha512-HLNNw99xsvx12lFBUwoT8EVCsSvRNDVxNpjZ7bPn947b8gJPzeHWyNVhFsaerc0n3TsbOINvRP2byTZ5LKezow==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/sunos-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.21.5.tgz",
      "integrity": "sha512-6+gjmFpfy0BHU5Tpptkuh8+uw3mnrvgs+dSPQXQOv3ekbordwnzTVEb4qnIvQcYXq6gzkyTnoZ9dZG+D4garKg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "sunos"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/win32-arm64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.21.5.tgz",
      "integrity": "sha512-Z0gOTd75VvXqyq7nsl93zwahcTROgqvuAcYDUr+vOv8uHhNSKROyU961kgtCD1e95IqPKSQKH7tBTslnS3tA8A==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/win32-ia32": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.21.5.tgz",
      "integrity": "sha512-SWXFF1CL2RVNMaVs+BBClwtfZSvDgtL//G/smwAc5oVK/UPu2Gu9tIaRgFmYFFKrmg3SyAjSrElf0TiJ1v8fYA==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/win32-x64": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.21.5.tgz",
      "integrity": "sha512-tQd/1efJuzPC6rCFwEvLtci/xNFcTZknmXs98FYDfGE4wP9ClFV98nyKrzJKVPMhdDnjzLhdUyMX4PsQAPjwIw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.12",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.12.tgz",
      "integrity": "sha512-OuLGC46TjB5BbN1dH8JULVVZY4WTdkF7tV9Ys6wLL1rubZnCMstOhNHueU5bLCrnRuDhKPDM4g6sw4Bel5Gzqg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/sourcemap-codec": "^1.5.0",
        "@jridgewell/trace-mapping": "^0.3.24"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.5.4",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.4.tgz",
      "integrity": "sha512-VT2+G1VQs/9oz078bLrYbecdZKs912zQlkelYpuf+SXF+QvZDYJlbx/LSx+meSAwdDFnF8FVXW92AVjjkVmgFw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.29",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.29.tgz",
      "integrity": "sha512-uw6guiW/gcAGPDhLmd77/6lW8QLeiV5RUTsAX46Db6oLhGaVj4lhnPwb184s1bkc8kdVg/+h988dro8GRDpmYQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.1.0",
        "@jridgewell/sourcemap-codec": "^1.4.14"
      }
    },
    "node_modules/@monaco-editor/loader": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/@monaco-editor/loader/-/loader-1.5.0.tgz",
      "integrity": "sha512-hKoGSM+7aAc7eRTRjpqAZucPmoNOC4UUbknb/VNoTkEIkCPhqV8LfbsgM1webRM7S/z21eHEx9Fkwx8Z/C/+Xw==",
      "license": "MIT",
      "dependencies": {
        "state-local": "^1.0.6"
      }
    },
    "node_modules/@monaco-editor/react": {
      "version": "4.7.0",
      "resolved": "https://registry.npmjs.org/@monaco-editor/react/-/react-4.7.0.tgz",
      "integrity": "sha512-cyzXQCtO47ydzxpQtCGSQGOC8Gk3ZUeBXFAxD+CWXYFo5OqZyZUonFl0DwUlTyAfRHntBfw2p3w4s9R6oe1eCA==",
      "license": "MIT",
      "dependencies": {
        "@monaco-editor/loader": "^1.5.0"
      },
      "peerDependencies": {
        "monaco-editor": ">= 0.25.0 < 1",
        "react": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0",
        "react-dom": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0"
      }
    },
    "node_modules/@rolldown/pluginutils": {
      "version": "1.0.0-beta.19",
      "resolved": "https://registry.npmjs.org/@rolldown/pluginutils/-/pluginutils-1.0.0-beta.19.tgz",
      "integrity": "sha512-3FL3mnMbPu0muGOCaKAhhFEYmqv9eTfPSJRJmANrCwtgK8VuxpsZDGK+m0LYAGoyO8+0j5uRe4PeyPDK1yA/hA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@rollup/rollup-android-arm-eabi": {
      "version": "4.44.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.44.2.tgz",
      "integrity": "sha512-g0dF8P1e2QYPOj1gu7s/3LVP6kze9A7m6x0BZ9iTdXK8N5c2V7cpBKHV3/9A4Zd8xxavdhK0t4PnqjkqVmUc9Q==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-android-arm64": {
      "version": "4.44.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.44.2.tgz",
      "integrity": "sha512-Yt5MKrOosSbSaAK5Y4J+vSiID57sOvpBNBR6K7xAaQvk3MkcNVV0f9fE20T+41WYN8hDn6SGFlFrKudtx4EoxA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-darwin-arm64": {
      "version": "4.44.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.44.2.tgz",
      "integrity": "sha512-EsnFot9ZieM35YNA26nhbLTJBHD0jTwWpPwmRVDzjylQT6gkar+zenfb8mHxWpRrbn+WytRRjE0WKsfaxBkVUA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-darwin-x64": {
      "version": "4.44.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.44.2.tgz",
      "integrity": "sha512-dv/t1t1RkCvJdWWxQ2lWOO+b7cMsVw5YFaS04oHpZRWehI1h0fV1gF4wgGCTyQHHjJDfbNpwOi6PXEafRBBezw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-freebsd-arm64": {
      "version": "4.44.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-arm64/-/rollup-freebsd-arm64-4.44.2.tgz",
      "integrity": "sha512-W4tt4BLorKND4qeHElxDoim0+BsprFTwb+vriVQnFFtT/P6v/xO5I99xvYnVzKWrK6j7Hb0yp3x7V5LUbaeOMg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@rollup/rollup-freebsd-x64": {
      "version": "4.44.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-x64/-/rollup-freebsd-x64-4.44.2.tgz",
      "integrity": "sha512-tdT1PHopokkuBVyHjvYehnIe20fxibxFCEhQP/96MDSOcyjM/shlTkZZLOufV3qO6/FQOSiJTBebhVc12JyPTA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-gnueabihf": {
      "version": "4.44.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.44.2.tgz",
      "integrity": "sha512-+xmiDGGaSfIIOXMzkhJ++Oa0Gwvl9oXUeIiwarsdRXSe27HUIvjbSIpPxvnNsRebsNdUo7uAiQVgBD1hVriwSQ==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-musleabihf": {
      "version": "4.44.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-musleabihf/-/rollup-linux-arm-musleabihf-4.44.2.tgz",
      "integrity": "sha512-bDHvhzOfORk3wt8yxIra8N4k/N0MnKInCW5OGZaeDYa/hMrdPaJzo7CSkjKZqX4JFUWjUGm88lI6QJLCM7lDrA==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-gnu": {
      "version": "4.44.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.44.2.tgz",
      "integrity": "sha512-NMsDEsDiYghTbeZWEGnNi4F0hSbGnsuOG+VnNvxkKg0IGDvFh7UVpM/14mnMwxRxUf9AdAVJgHPvKXf6FpMB7A==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-musl": {
      "version": "4.44.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.44.2.tgz",
      "integrity": "sha512-lb5bxXnxXglVq+7imxykIp5xMq+idehfl+wOgiiix0191av84OqbjUED+PRC5OA8eFJYj5xAGcpAZ0pF2MnW+A==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-loongarch64-gnu": {
      "version": "4.44.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-loongarch64-gnu/-/rollup-linux-loongarch64-gnu-4.44.2.tgz",
      "integrity": "sha512-Yl5Rdpf9pIc4GW1PmkUGHdMtbx0fBLE1//SxDmuf3X0dUC57+zMepow2LK0V21661cjXdTn8hO2tXDdAWAqE5g==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-powerpc64le-gnu": {
      "version": "4.44.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-powerpc64le-gnu/-/rollup-linux-powerpc64le-gnu-4.44.2.tgz",
      "integrity": "sha512-03vUDH+w55s680YYryyr78jsO1RWU9ocRMaeV2vMniJJW/6HhoTBwyyiiTPVHNWLnhsnwcQ0oH3S9JSBEKuyqw==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-gnu": {
      "version": "4.44.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.44.2.tgz",
      "integrity": "sha512-iYtAqBg5eEMG4dEfVlkqo05xMOk6y/JXIToRca2bAWuqjrJYJlx/I7+Z+4hSrsWU8GdJDFPL4ktV3dy4yBSrzg==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-musl": {
      "version": "4.44.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-musl/-/rollup-linux-riscv64-musl-4.44.2.tgz",
      "integrity": "sha512-e6vEbgaaqz2yEHqtkPXa28fFuBGmUJ0N2dOJK8YUfijejInt9gfCSA7YDdJ4nYlv67JfP3+PSWFX4IVw/xRIPg==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-s390x-gnu": {
      "version": "4.44.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-s390x-gnu/-/rollup-linux-s390x-gnu-4.44.2.tgz",
      "integrity": "sha512-evFOtkmVdY3udE+0QKrV5wBx7bKI0iHz5yEVx5WqDJkxp9YQefy4Mpx3RajIVcM6o7jxTvVd/qpC1IXUhGc1Mw==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-gnu": {
      "version": "4.44.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.44.2.tgz",
      "integrity": "sha512-/bXb0bEsWMyEkIsUL2Yt5nFB5naLAwyOWMEviQfQY1x3l5WsLKgvZf66TM7UTfED6erckUVUJQ/jJ1FSpm3pRQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-musl": {
      "version": "4.44.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.44.2.tgz",
      "integrity": "sha512-3D3OB1vSSBXmkGEZR27uiMRNiwN08/RVAcBKwhUYPaiZ8bcvdeEwWPvbnXvvXHY+A/7xluzcN+kaiOFNiOZwWg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-win32-arm64-msvc": {
      "version": "4.44.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.44.2.tgz",
      "integrity": "sha512-VfU0fsMK+rwdK8mwODqYeM2hDrF2WiHaSmCBrS7gColkQft95/8tphyzv2EupVxn3iE0FI78wzffoULH1G+dkw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-ia32-msvc": {
      "version": "4.44.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.44.2.tgz",
      "integrity": "sha512-+qMUrkbUurpE6DVRjiJCNGZBGo9xM4Y0FXU5cjgudWqIBWbcLkjE3XprJUsOFgC6xjBClwVa9k6O3A7K3vxb5Q==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-x64-msvc": {
      "version": "4.44.2",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.44.2.tgz",
      "integrity": "sha512-3+QZROYfJ25PDcxFF66UEk8jGWigHJeecZILvkPkyQN7oc5BvFo4YEXFkOs154j3FTMp9mn9Ky8RCOwastduEA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@types/babel__core": {
      "version": "7.20.5",
      "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.5.tgz",
      "integrity": "sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.20.7",
        "@babel/types": "^7.20.7",
        "@types/babel__generator": "*",
        "@types/babel__template": "*",
        "@types/babel__traverse": "*"
      }
    },
    "node_modules/@types/babel__generator": {
      "version": "7.27.0",
      "resolved": "https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.27.0.tgz",
      "integrity": "sha512-ufFd2Xi92OAVPYsy+P4n7/U7e68fex0+Ee8gSG9KX7eo084CWiQ4sdxktvdl0bOPupXtVJPY19zk6EwWqUQ8lg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__template": {
      "version": "7.4.4",
      "resolved": "https://registry.npmjs.org/@types/babel__template/-/babel__template-7.4.4.tgz",
      "integrity": "sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.1.0",
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__traverse": {
      "version": "7.20.7",
      "resolved": "https://registry.npmjs.org/@types/babel__traverse/-/babel__traverse-7.20.7.tgz",
      "integrity": "sha512-dkO5fhS7+/oos4ciWxyEyjWe48zmG6wbCheo/G2ZnHx4fs3EU6YC6UM8rk56gAjNJ9P3MTH2jo5jb92/K6wbng==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.20.7"
      }
    },
    "node_modules/@types/estree": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.8.tgz",
      "integrity": "sha512-dWHzHa2WqEXI/O1E9OjrocMTKJl2mSrEolh1Iomrv6U+JuNwaHXsXx9bLu5gG7BUWFIN0skIQJQ/L1rIex4X6w==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/prop-types": {
      "version": "15.7.15",
      "resolved": "https://registry.npmjs.org/@types/prop-types/-/prop-types-15.7.15.tgz",
      "integrity": "sha512-F6bEyamV9jKGAFBEmlQnesRPGOQqS2+Uwi0Em15xenOxHaf2hv6L8YCVn3rPdPJOiJfPiCnLIRyvwVaqMY3MIw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/react": {
      "version": "18.3.23",
      "resolved": "https://registry.npmjs.org/@types/react/-/react-18.3.23.tgz",
      "integrity": "sha512-/LDXMQh55EzZQ0uVAZmKKhfENivEvWz6E+EYzh+/MCjMhNsotd+ZHhBGIjFDTi6+fz0OhQQQLbTgdQIxxCsC0w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/prop-types": "*",
        "csstype": "^3.0.2"
      }
    },
    "node_modules/@types/react-dom": {
      "version": "18.3.7",
      "resolved": "https://registry.npmjs.org/@types/react-dom/-/react-dom-18.3.7.tgz",
      "integrity": "sha512-MEe3UeoENYVFXzoXEWsvcpg6ZvlrFNlOQ7EOsvhI3CfAXwzPfO8Qwuxd40nepsYKqyyVQnTdEfv68q91yLcKrQ==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "@types/react": "^18.0.0"
      }
    },
    "node_modules/@types/stylis": {
      "version": "4.2.5",
      "resolved": "https://registry.npmjs.org/@types/stylis/-/stylis-4.2.5.tgz",
      "integrity": "sha512-1Xve+NMN7FWjY14vLoY5tL3BVEQ/n42YLwaqJIPYhotZ9uBHt87VceMwWQpzmdEt2TNXIorIFG+YeCUUW7RInw==",
      "license": "MIT"
    },
    "node_modules/@vitejs/plugin-react": {
      "version": "4.6.0",
      "resolved": "https://registry.npmjs.org/@vitejs/plugin-react/-/plugin-react-4.6.0.tgz",
      "integrity": "sha512-5Kgff+m8e2PB+9j51eGHEpn5kUzRKH2Ry0qGoe8ItJg7pqnkPrYPkDQZGgGmTa0EGarHrkjLvOdU3b1fzI8otQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.27.4",
        "@babel/plugin-transform-react-jsx-self": "^7.27.1",
        "@babel/plugin-transform-react-jsx-source": "^7.27.1",
        "@rolldown/pluginutils": "1.0.0-beta.19",
        "@types/babel__core": "^7.20.5",
        "react-refresh": "^0.17.0"
      },
      "engines": {
        "node": "^14.18.0 || >=16.0.0"
      },
      "peerDependencies": {
        "vite": "^4.2.0 || ^5.0.0 || ^6.0.0 || ^7.0.0-beta.0"
      }
    },
    "node_modules/asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==",
      "license": "MIT"
    },
    "node_modules/axios": {
      "version": "1.10.0",
      "resolved": "https://registry.npmjs.org/axios/-/axios-1.10.0.tgz",
      "integrity": "sha512-/1xYAC4MP/HEG+3duIhFr4ZQXR4sQXOIe+o6sdqzeykGLx6Upp/1p8MHqhINOvGeP7xyNHe7tsiJByc4SSVUxw==",
      "license": "MIT",
      "dependencies": {
        "follow-redirects": "^1.15.6",
        "form-data": "^4.0.0",
        "proxy-from-env": "^1.1.0"
      }
    },
    "node_modules/browserslist": {
      "version": "4.25.1",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.25.1.tgz",
      "integrity": "sha512-KGj0KoOMXLpSNkkEI6Z6mShmQy0bc1I+T7K9N81k4WWMrfz+6fQ6es80B/YLAeRoKvjYE1YSHHOW1qe9xIVzHw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "caniuse-lite": "^1.0.30001726",
        "electron-to-chromium": "^1.5.173",
        "node-releases": "^2.0.19",
        "update-browserslist-db": "^1.1.3"
      },
      "bin": {
        "browserslist": "cli.js"
      },
      "engines": {
        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
      }
    },
    "node_modules/call-bind-apply-helpers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/camelize": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/camelize/-/camelize-1.0.1.tgz",
      "integrity": "sha512-dU+Tx2fsypxTgtLoE36npi3UqcjSSMNYfkqgmoEhtZrraP5VWq0K7FkWVTYa8eMPtnU/G2txVsfdCJTn9uzpuQ==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001727",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001727.tgz",
      "integrity": "sha512-pB68nIHmbN6L/4C6MH1DokyR3bYqFwjaSs/sWDHGj4CTcFtQUQMuJftVwWkXq7mNWOybD3KhUv3oWHoGxgP14Q==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "CC-BY-4.0"
    },
    "node_modules/clsx": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/clsx/-/clsx-2.1.1.tgz",
      "integrity": "sha512-eYm0QWBtUrBWZWG0d386OGAw16Z995PiOVo2B7bjWSbHedGl5e0ZWaq65kOGgUSNesEIDkB9ISbTg/JK9dhCZA==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "license": "MIT",
      "dependencies": {
        "delayed-stream": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/convert-source-map": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/css-color-keywords": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/css-color-keywords/-/css-color-keywords-1.0.0.tgz",
      "integrity": "sha512-FyyrDHZKEjXDpNJYvVsV960FiqQyXc/LlYmsxl2BcdMb2WPx0OGRVgTg55rPSyLSNMqP52R9r8geSp7apN3Ofg==",
      "license": "ISC",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/css-to-react-native": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/css-to-react-native/-/css-to-react-native-3.2.0.tgz",
      "integrity": "sha512-e8RKaLXMOFii+02mOlqwjbD00KSEKqblnpO9e++1aXS1fPQOpS1YoqdVHBqPjHNoxeF2mimzVqawm2KCbEdtHQ==",
      "license": "MIT",
      "dependencies": {
        "camelize": "^1.0.0",
        "css-color-keywords": "^1.0.0",
        "postcss-value-parser": "^4.0.2"
      }
    },
    "node_modules/csstype": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz",
      "integrity": "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==",
      "license": "MIT"
    },
    "node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/dunder-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.1",
        "es-errors": "^1.3.0",
        "gopd": "^1.2.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/electron-to-chromium": {
      "version": "1.5.179",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.179.tgz",
      "integrity": "sha512-UWKi/EbBopgfFsc5k61wFpV7WrnnSlSzW/e2XcBmS6qKYTivZlLtoll5/rdqRTxGglGHkmkW0j0pFNJG10EUIQ==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/es-define-property": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-object-atoms": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-set-tostringtag": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/es-set-tostringtag/-/es-set-tostringtag-2.1.0.tgz",
      "integrity": "sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6",
        "has-tostringtag": "^1.0.2",
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/esbuild": {
      "version": "0.21.5",
      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.21.5.tgz",
      "integrity": "sha512-mg3OPMV4hXywwpoDxu3Qda5xCKQi+vCTZq8S9J/EpkhB2HzKXq4SNFZE3+NK93JYxc8VMSep+lOUSC/RVKaBqw==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "bin": {
        "esbuild": "bin/esbuild"
      },
      "engines": {
        "node": ">=12"
      },
      "optionalDependencies": {
        "@esbuild/aix-ppc64": "0.21.5",
        "@esbuild/android-arm": "0.21.5",
        "@esbuild/android-arm64": "0.21.5",
        "@esbuild/android-x64": "0.21.5",
        "@esbuild/darwin-arm64": "0.21.5",
        "@esbuild/darwin-x64": "0.21.5",
        "@esbuild/freebsd-arm64": "0.21.5",
        "@esbuild/freebsd-x64": "0.21.5",
        "@esbuild/linux-arm": "0.21.5",
        "@esbuild/linux-arm64": "0.21.5",
        "@esbuild/linux-ia32": "0.21.5",
        "@esbuild/linux-loong64": "0.21.5",
        "@esbuild/linux-mips64el": "0.21.5",
        "@esbuild/linux-ppc64": "0.21.5",
        "@esbuild/linux-riscv64": "0.21.5",
        "@esbuild/linux-s390x": "0.21.5",
        "@esbuild/linux-x64": "0.21.5",
        "@esbuild/netbsd-x64": "0.21.5",
        "@esbuild/openbsd-x64": "0.21.5",
        "@esbuild/sunos-x64": "0.21.5",
        "@esbuild/win32-arm64": "0.21.5",
        "@esbuild/win32-ia32": "0.21.5",
        "@esbuild/win32-x64": "0.21.5"
      }
    },
    "node_modules/escalade": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
      "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/eventsource-parser": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/eventsource-parser/-/eventsource-parser-1.1.2.tgz",
      "integrity": "sha512-v0eOBUbiaFojBu2s2NPBfYUoRR9GjcDNvCXVaqEf5vVfpIAh9f8RCo4vXTP8c63QRKCFwoLpMpTdPwwhEKVgzA==",
      "license": "MIT",
      "engines": {
        "node": ">=14.18"
      }
    },
    "node_modules/follow-redirects": {
      "version": "1.15.9",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.9.tgz",
      "integrity": "sha512-gew4GsXizNgdoRyqmyfMHyAmXsZDk6mHkSxZFCzW9gwlbtOW44CDtYavM+y+72qD/Vq2l550kMF52DT8fOLJqQ==",
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/RubenVerborgh"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": ">=4.0"
      },
      "peerDependenciesMeta": {
        "debug": {
          "optional": true
        }
      }
    },
    "node_modules/form-data": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.3.tgz",
      "integrity": "sha512-qsITQPfmvMOSAdeyZ+12I1c+CKSstAFAwu+97zrnWAbIr5u8wfsExUzCesVLC8NgHuRUqNN4Zy6UPWUTRGslcA==",
      "license": "MIT",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "es-set-tostringtag": "^2.1.0",
        "hasown": "^2.0.2",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gensync": {
      "version": "1.0.0-beta.2",
      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "function-bind": "^1.1.2",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/gopd": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-tostringtag": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.2.tgz",
      "integrity": "sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==",
      "license": "MIT",
      "dependencies": {
        "has-symbols": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "license": "MIT",
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
      "license": "MIT"
    },
    "node_modules/jsesc": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-3.1.0.tgz",
      "integrity": "sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "jsesc": "bin/jsesc"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/json5": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "json5": "lib/cli.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/loose-envify": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/loose-envify/-/loose-envify-1.4.0.tgz",
      "integrity": "sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==",
      "license": "MIT",
      "dependencies": {
        "js-tokens": "^3.0.0 || ^4.0.0"
      },
      "bin": {
        "loose-envify": "cli.js"
      }
    },
    "node_modules/lru-cache": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
      "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "yallist": "^3.0.2"
      }
    },
    "node_modules/math-intrinsics": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "license": "MIT",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/monaco-editor": {
      "version": "0.52.2",
      "resolved": "https://registry.npmjs.org/monaco-editor/-/monaco-editor-0.52.2.tgz",
      "integrity": "sha512-GEQWEZmfkOGLdd3XK8ryrfWz3AIP8YymVXiPHEdewrUq7mh0qrKrfHLNCXcbB6sTnMLnOZ3ztSiKcciFUkIJwQ==",
      "license": "MIT",
      "peer": true
    },
    "node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/nanoid": {
      "version": "3.3.11",
      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.11.tgz",
      "integrity": "sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "bin": {
        "nanoid": "bin/nanoid.cjs"
      },
      "engines": {
        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
      }
    },
    "node_modules/node-releases": {
      "version": "2.0.19",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.19.tgz",
      "integrity": "sha512-xxOWJsBKtzAq7DY0J+DTzuz58K8e7sJbdgwkbMWQe8UYB6ekmsQ45q0M/tJDsGaZmbC+l7n57UV8Hl5tHxO9uw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/picocolors": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
      "license": "ISC"
    },
    "node_modules/postcss": {
      "version": "8.4.49",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.4.49.tgz",
      "integrity": "sha512-OCVPnIObs4N29kxTjzLfUryOkvZEq+pf8jTF0lg8E7uETuWHA+v7j3c/xJmiqpX450191LlmZfUKkXxkTry7nA==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/postcss"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "nanoid": "^3.3.7",
        "picocolors": "^1.1.1",
        "source-map-js": "^1.2.1"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      }
    },
    "node_modules/postcss-value-parser": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/postcss-value-parser/-/postcss-value-parser-4.2.0.tgz",
      "integrity": "sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ==",
      "license": "MIT"
    },
    "node_modules/proxy-from-env": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
      "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==",
      "license": "MIT"
    },
    "node_modules/react": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react/-/react-18.3.1.tgz",
      "integrity": "sha512-wS+hAgJShR0KhEvPJArfuPVN1+Hz1t0Y6n5jLrGQbkb4urgPE/0Rve+1kMB1v/oWgHgm4WIcV+i7F2pTVj+2iQ==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-dom": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-18.3.1.tgz",
      "integrity": "sha512-5m4nQKp+rZRb09LNH59GM4BxTh9251/ylbKIbpe7TpGxfJ+9kv6BLkLBXIjjspbgbnIBNqlI23tRnTWT0snUIw==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0",
        "scheduler": "^0.23.2"
      },
      "peerDependencies": {
        "react": "^18.3.1"
      }
    },
    "node_modules/react-refresh": {
      "version": "0.17.0",
      "resolved": "https://registry.npmjs.org/react-refresh/-/react-refresh-0.17.0.tgz",
      "integrity": "sha512-z6F7K9bV85EfseRCp2bzrpyQ0Gkw1uLoCel9XBVWPg/TjRj94SkJzUTGfOa4bs7iJvBWtQG0Wq7wnI0syw3EBQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-toastify": {
      "version": "10.0.6",
      "resolved": "https://registry.npmjs.org/react-toastify/-/react-toastify-10.0.6.tgz",
      "integrity": "sha512-yYjp+omCDf9lhZcrZHKbSq7YMuK0zcYkDFTzfRFgTXkTFHZ1ToxwAonzA4JI5CxA91JpjFLmwEsZEgfYfOqI1A==",
      "license": "MIT",
      "dependencies": {
        "clsx": "^2.1.0"
      },
      "peerDependencies": {
        "react": ">=18",
        "react-dom": ">=18"
      }
    },
    "node_modules/rollup": {
      "version": "4.44.2",
      "resolved": "https://registry.npmjs.org/rollup/-/rollup-4.44.2.tgz",
      "integrity": "sha512-PVoapzTwSEcelaWGth3uR66u7ZRo6qhPHc0f2uRO9fX6XDVNrIiGYS0Pj9+R8yIIYSD/mCx2b16Ws9itljKSPg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/estree": "1.0.8"
      },
      "bin": {
        "rollup": "dist/bin/rollup"
      },
      "engines": {
        "node": ">=18.0.0",
        "npm": ">=8.0.0"
      },
      "optionalDependencies": {
        "@rollup/rollup-android-arm-eabi": "4.44.2",
        "@rollup/rollup-android-arm64": "4.44.2",
        "@rollup/rollup-darwin-arm64": "4.44.2",
        "@rollup/rollup-darwin-x64": "4.44.2",
        "@rollup/rollup-freebsd-arm64": "4.44.2",
        "@rollup/rollup-freebsd-x64": "4.44.2",
        "@rollup/rollup-linux-arm-gnueabihf": "4.44.2",
        "@rollup/rollup-linux-arm-musleabihf": "4.44.2",
        "@rollup/rollup-linux-arm64-gnu": "4.44.2",
        "@rollup/rollup-linux-arm64-musl": "4.44.2",
        "@rollup/rollup-linux-loongarch64-gnu": "4.44.2",
        "@rollup/rollup-linux-powerpc64le-gnu": "4.44.2",
        "@rollup/rollup-linux-riscv64-gnu": "4.44.2",
        "@rollup/rollup-linux-riscv64-musl": "4.44.2",
        "@rollup/rollup-linux-s390x-gnu": "4.44.2",
        "@rollup/rollup-linux-x64-gnu": "4.44.2",
        "@rollup/rollup-linux-x64-musl": "4.44.2",
        "@rollup/rollup-win32-arm64-msvc": "4.44.2",
        "@rollup/rollup-win32-ia32-msvc": "4.44.2",
        "@rollup/rollup-win32-x64-msvc": "4.44.2",
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/scheduler": {
      "version": "0.23.2",
      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.23.2.tgz",
      "integrity": "sha512-UOShsPwz7NrMUqhR6t0hWjFduvOzbtv7toDH1/hIrfRNIDBnnBWd0CwJTGvTpngVlmwGCdP9/Zl/tVrDqcuYzQ==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0"
      }
    },
    "node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/shallowequal": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/shallowequal/-/shallowequal-1.1.0.tgz",
      "integrity": "sha512-y0m1JoUZSlPAjXVtPPW70aZWfIL/dSP7AFkRnniLCrK/8MDKog3TySTBmckD+RObVxH0v4Tox67+F14PdED2oQ==",
      "license": "MIT"
    },
    "node_modules/source-map-js": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
      "integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/state-local": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/state-local/-/state-local-1.0.7.tgz",
      "integrity": "sha512-HTEHMNieakEnoe33shBYcZ7NX83ACUjCu8c40iOGEZsngj9zRnkqS9j1pqQPXwobB0ZcVTk27REb7COQ0UR59w==",
      "license": "MIT"
    },
    "node_modules/styled-components": {
      "version": "6.1.19",
      "resolved": "https://registry.npmjs.org/styled-components/-/styled-components-6.1.19.tgz",
      "integrity": "sha512-1v/e3Dl1BknC37cXMhwGomhO8AkYmN41CqyX9xhUDxry1ns3BFQy2lLDRQXJRdVVWB9OHemv/53xaStimvWyuA==",
      "license": "MIT",
      "dependencies": {
        "@emotion/is-prop-valid": "1.2.2",
        "@emotion/unitless": "0.8.1",
        "@types/stylis": "4.2.5",
        "css-to-react-native": "3.2.0",
        "csstype": "3.1.3",
        "postcss": "8.4.49",
        "shallowequal": "1.1.0",
        "stylis": "4.3.2",
        "tslib": "2.6.2"
      },
      "engines": {
        "node": ">= 16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/styled-components"
      },
      "peerDependencies": {
        "react": ">= 16.8.0",
        "react-dom": ">= 16.8.0"
      }
    },
    "node_modules/stylis": {
      "version": "4.3.2",
      "resolved": "https://registry.npmjs.org/stylis/-/stylis-4.3.2.tgz",
      "integrity": "sha512-bhtUjWd/z6ltJiQwg0dUfxEJ+W+jdqQd8TbWLWyeIJHlnsqmGLRFFd8e5mA0AZi/zx90smXRlN66YMTcaSFifg==",
      "license": "MIT"
    },
    "node_modules/tslib": {
      "version": "2.6.2",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.6.2.tgz",
      "integrity": "sha512-AEYxH93jGFPn/a2iVAwW87VuUIkR1FVUKB77NwMF7nBTDkDrrT/Hpt/IrCJ0QXhW27jTBDcf5ZY7w6RiqTMw2Q==",
      "license": "0BSD"
    },
    "node_modules/update-browserslist-db": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.3.tgz",
      "integrity": "sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "escalade": "^3.2.0",
        "picocolors": "^1.1.1"
      },
      "bin": {
        "update-browserslist-db": "cli.js"
      },
      "peerDependencies": {
        "browserslist": ">= 4.21.0"
      }
    },
    "node_modules/vite": {
      "version": "5.4.19",
      "resolved": "https://registry.npmjs.org/vite/-/vite-5.4.19.tgz",
      "integrity": "sha512-qO3aKv3HoQC8QKiNSTuUM1l9o/XX3+c+VTgLHbJWHZGeTPVAg2XwazI9UWzoxjIJCGCV2zU60uqMzjeLZuULqA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "esbuild": "^0.21.3",
        "postcss": "^8.4.43",
        "rollup": "^4.20.0"
      },
      "bin": {
        "vite": "bin/vite.js"
      },
      "engines": {
        "node": "^18.0.0 || >=20.0.0"
      },
      "funding": {
        "url": "https://github.com/vitejs/vite?sponsor=1"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.3"
      },
      "peerDependencies": {
        "@types/node": "^18.0.0 || >=20.0.0",
        "less": "*",
        "lightningcss": "^1.21.0",
        "sass": "*",
        "sass-embedded": "*",
        "stylus": "*",
        "sugarss": "*",
        "terser": "^5.4.0"
      },
      "peerDependenciesMeta": {
        "@types/node": {
          "optional": true
        },
        "less": {
          "optional": true
        },
        "lightningcss": {
          "optional": true
        },
        "sass": {
          "optional": true
        },
        "sass-embedded": {
          "optional": true
        },
        "stylus": {
          "optional": true
        },
        "sugarss": {
          "optional": true
        },
        "terser": {
          "optional": true
        }
      }
    },
    "node_modules/yallist": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
      "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
      "dev": true,
      "license": "ISC"
    }
  }
}


==================================================
### FILE: ./frontend/dist/assets/cli-renderer.js
==================================================

import{Y as d}from"./yankovicInterpreter-BWEwZ3HO.js";class u{constructor(s){this.canvas=s,this.ctx=s.getContext("2d"),this.currentColor="#FFFFFF",this.loadedImages=new Map,this.imagesToDraw=[],this.uiState={mouse:{x:0,y:0,clicked:!1,isDown:!1},buttons:{}},this.setupEventListeners()}setupEventListeners(){this.canvas.addEventListener("mousemove",s=>{this.uiState.mouse.x=s.offsetX,this.uiState.mouse.y=s.offsetY}),this.canvas.addEventListener("mousedown",s=>{this.uiState.mouse.isDown=!0,this.uiState.mouse.clicked=!0;for(const t in this.uiState.buttons){const e=this.uiState.buttons[t];s.offsetX>=e.x&&s.offsetX<=e.x+e.width&&s.offsetY>=e.y&&s.offsetY<=e.y+e.height&&(e.clicked=!0)}}),this.canvas.addEventListener("mouseup",()=>{this.uiState.mouse.isDown=!1})}resetPerFrameState(){this.uiState.mouse.clicked=!1;for(const s in this.uiState.buttons)this.uiState.buttons[s].clicked=!1}getUHFOverrides(){return{...{AL_RED:{r:237,g:28,b:36,a:255},WHITE_ZOMBIE:{r:240,g:240,b:240,a:255},BLACK_MAGIC:{r:16,g:16,b:16,a:255},SPAM_GREEN:{r:0,g:255,b:0,a:255},TWINKIE_GOLD:{r:255,g:242,b:0,a:255},ORANGE_CHEESE:{r:255,g:127,b:39,a:255},SKY_BLUE_FOR_YOU:{r:135,g:206,b:235,a:255},SILVER_SPATULA:{r:200,g:200,b:200,a:255}},fat_frame:t=>{console.log("[CLI-MAIN] fat_frame called with:",t);const[e,i,o,l,c]=t;if(this.loadedImages.has(e)){const n=this.loadedImages.get(e);this.ctx.drawImage(n,i||0,o||0,l||n.width,c||n.height),console.log("[CLI-MAIN] Drew cached image");return}const a=new window.Image;a.onload=()=>{console.log("[CLI-MAIN] Image loaded successfully"),this.loadedImages.set(e,a),this.ctx.drawImage(a,i||0,o||0,l||a.width,c||a.height),console.log("[CLI-MAIN] Drew new image")},a.onerror=n=>{console.error("[CLI-MAIN] Image failed to load:",n)},a.src=e,console.log("[CLI-MAIN] Loading image from:",e.substring(0,50)+"...")},Lossless_Laughter:t=>{const[e,i]=t;let o=document.getElementById("uhf-media");o&&o.remove(),o=document.createElement(i==="video"?"video":"audio"),o.id="uhf-media",o.src=e.startsWith("/")?`file://${e}`:e,o.autoplay=!0,o.controls=!0,o.style.position="absolute",o.style.top="10px",o.style.left="10px",o.style.zIndex="1000",document.body.appendChild(o)},start_the_show:t=>{console.log("[CLI-MAIN] start_the_show called with:",t),this.canvas.width=t[0],this.canvas.height=t[1],window.cliAPI.setWindow({width:t[0],height:t[1],title:t[2]}),console.log("[CLI-MAIN] Canvas resized to:",this.canvas.width,"x",this.canvas.height)},paint_the_set:t=>{const e=t[0];if(e&&e.r!==void 0){const i=e.a!==void 0?e.a/255:1;this.ctx.fillStyle=`rgba(${e.r}, ${e.g}, ${e.b}, ${i})`}else this.ctx.fillStyle="#000";this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height)},pick_a_hawaiian_shirt:t=>{const e=t[0];if(e&&typeof e.r=="number"){const i=typeof e.a=="number"?e.a:255;this.currentColor=`rgba(${e.r}, ${e.g}, ${e.b}, ${i/255})`}else this.currentColor="rgba(255, 255, 255, 1)"},draw_a_spamsicle:t=>{console.log("[CLI-MAIN] draw_a_spamsicle called with:",t),this.ctx.fillStyle=this.currentColor,this.ctx.fillRect(...t),console.log("[CLI-MAIN] Rectangle drawn")},draw_a_big_ol_wheel_of_cheese:t=>{console.log("[CLI-MAIN] draw_a_big_ol_wheel_of_cheese called with:",t),this.ctx.fillStyle=this.currentColor,this.ctx.beginPath(),this.ctx.arc(t[0],t[1],t[2],0,2*Math.PI),this.ctx.fill(),console.log("[CLI-MAIN] Circle drawn")},print_a_string_at:t=>{console.log("[CLI-MAIN] print_a_string_at called with:",t),this.ctx.fillStyle=this.currentColor,this.ctx.font="16px Arial",this.ctx.textBaseline="top",this.ctx.fillText(...t),console.log("[CLI-MAIN] Text drawn")},draw_a_button:t=>{console.log("[CLI-MAIN] draw_a_button called with:",t);const[e,i,o,l,c,a]=t;this.uiState.buttons[a]||(this.uiState.buttons[a]={x:e,y:i,width:o,height:l,clicked:!1}),this.ctx.fillStyle="#ddd",this.ctx.fillRect(e,i,o,l),this.ctx.strokeStyle="#999",this.ctx.lineWidth=2,this.ctx.strokeRect(e,i,o,l),this.ctx.fillStyle="#000",this.ctx.font="14px Arial",this.ctx.textAlign="center",this.ctx.textBaseline="middle",this.ctx.fillText(c,e+o/2,i+l/2),this.ctx.textAlign="start",this.ctx.textBaseline="alphabetic",console.log("[CLI-MAIN] Button drawn")},get_mouse_x:()=>this.uiState.mouse.x,get_mouse_y:()=>this.uiState.mouse.y,mouse_was_clicked:()=>this.uiState.mouse.clicked,the_shows_over:()=>!1,roll_the_camera:()=>{console.log("[CLI-MAIN] roll_the_camera called"),this.resetPerFrameState()},that_is_a_wrap:()=>{console.log("[CLI-MAIN] that_is_a_wrap called")},set_polka_speed:()=>{console.log("[CLI-MAIN] set_polka_speed called")},button_was_clicked:t=>{var e;return((e=this.uiState.buttons[t[0]])==null?void 0:e.clicked)||!1},sin:t=>Math.sin(t[0]),cos:t=>Math.cos(t[0]),random_spatula:()=>Math.floor(Math.random()*100),yoda:t=>t[0]%t[1]}}}const h=async()=>{console.log("[CLI-MAIN] DOM Content Loaded");const r=document.getElementById("display");if(console.log("[CLI-MAIN] Canvas element:",r),!r){console.error("[CLI-MAIN] Canvas element not found!");return}const s=new u(r);console.log("[CLI-MAIN] Canvas renderer created");const t=new d({libraryOverrides:s.getUHFOverrides()});console.log("[CLI-MAIN] Interpreter created with overrides"),t.uiState=s.uiState;const e=window.yankovicCodeToRun;if(console.log("[CLI-MAIN] Code to run:",e?`${e.length} characters`:"null"),e){console.log("[CLI-MAIN] Received bundled code, running with full interpreter...");try{if(await t.run(e),console.log("[CLI-MAIN] Initial run completed"),t.polkaLoop){console.log("[CLI-MAIN] Starting animation loop");const i=async()=>{t.polkaLoop&&(await t.runFrame(),requestAnimationFrame(i))};requestAnimationFrame(i)}else console.log("[CLI-MAIN] No polka loop found")}catch(i){console.error("[CLI-MAIN] Error running code:",i)}}else console.error("[CLI-MAIN] No YankoviC code found to run.")};document.readyState==="loading"?document.addEventListener("DOMContentLoaded",h):h();


==================================================
### FILE: ./frontend/dist/assets/main-Bh76j7cs.css
==================================================

:root{--toastify-color-light: #fff;--toastify-color-dark: #121212;--toastify-color-info: #3498db;--toastify-color-success: #07bc0c;--toastify-color-warning: #f1c40f;--toastify-color-error: #e74c3c;--toastify-color-transparent: rgba(255, 255, 255, .7);--toastify-icon-color-info: var(--toastify-color-info);--toastify-icon-color-success: var(--toastify-color-success);--toastify-icon-color-warning: var(--toastify-color-warning);--toastify-icon-color-error: var(--toastify-color-error);--toastify-toast-width: 320px;--toastify-toast-offset: 16px;--toastify-toast-top: max(var(--toastify-toast-offset), env(safe-area-inset-top));--toastify-toast-right: max(var(--toastify-toast-offset), env(safe-area-inset-right));--toastify-toast-left: max(var(--toastify-toast-offset), env(safe-area-inset-left));--toastify-toast-bottom: max(var(--toastify-toast-offset), env(safe-area-inset-bottom));--toastify-toast-background: #fff;--toastify-toast-min-height: 64px;--toastify-toast-max-height: 800px;--toastify-toast-bd-radius: 6px;--toastify-font-family: sans-serif;--toastify-z-index: 9999;--toastify-text-color-light: #757575;--toastify-text-color-dark: #fff;--toastify-text-color-info: #fff;--toastify-text-color-success: #fff;--toastify-text-color-warning: #fff;--toastify-text-color-error: #fff;--toastify-spinner-color: #616161;--toastify-spinner-color-empty-area: #e0e0e0;--toastify-color-progress-light: linear-gradient( to right, #4cd964, #5ac8fa, #007aff, #34aadc, #5856d6, #ff2d55 );--toastify-color-progress-dark: #bb86fc;--toastify-color-progress-info: var(--toastify-color-info);--toastify-color-progress-success: var(--toastify-color-success);--toastify-color-progress-warning: var(--toastify-color-warning);--toastify-color-progress-error: var(--toastify-color-error);--toastify-color-progress-bgo: .2}.Toastify__toast-container{z-index:var(--toastify-z-index);-webkit-transform:translate3d(0,0,var(--toastify-z-index));position:fixed;padding:4px;width:var(--toastify-toast-width);box-sizing:border-box;color:#fff}.Toastify__toast-container--top-left{top:var(--toastify-toast-top);left:var(--toastify-toast-left)}.Toastify__toast-container--top-center{top:var(--toastify-toast-top);left:50%;transform:translate(-50%)}.Toastify__toast-container--top-right{top:var(--toastify-toast-top);right:var(--toastify-toast-right)}.Toastify__toast-container--bottom-left{bottom:var(--toastify-toast-bottom);left:var(--toastify-toast-left)}.Toastify__toast-container--bottom-center{bottom:var(--toastify-toast-bottom);left:50%;transform:translate(-50%)}.Toastify__toast-container--bottom-right{bottom:var(--toastify-toast-bottom);right:var(--toastify-toast-right)}@media only screen and (max-width : 480px){.Toastify__toast-container{width:100vw;padding:0;left:env(safe-area-inset-left);margin:0}.Toastify__toast-container--top-left,.Toastify__toast-container--top-center,.Toastify__toast-container--top-right{top:env(safe-area-inset-top);transform:translate(0)}.Toastify__toast-container--bottom-left,.Toastify__toast-container--bottom-center,.Toastify__toast-container--bottom-right{bottom:env(safe-area-inset-bottom);transform:translate(0)}.Toastify__toast-container--rtl{right:env(safe-area-inset-right);left:initial}}.Toastify__toast{--y: 0;position:relative;-ms-touch-action:none;touch-action:none;min-height:var(--toastify-toast-min-height);box-sizing:border-box;margin-bottom:1rem;padding:8px;border-radius:var(--toastify-toast-bd-radius);box-shadow:0 4px 12px #0000001a;display:-ms-flexbox;display:flex;-ms-flex-pack:justify;justify-content:space-between;max-height:var(--toastify-toast-max-height);font-family:var(--toastify-font-family);cursor:default;direction:ltr;z-index:0;overflow:hidden}.Toastify__toast--stacked{position:absolute;width:100%;transform:translate3d(0,var(--y),0) scale(var(--s));transition:transform .3s}.Toastify__toast--stacked[data-collapsed] .Toastify__toast-body,.Toastify__toast--stacked[data-collapsed] .Toastify__close-button{transition:opacity .1s}.Toastify__toast--stacked[data-collapsed=false]{overflow:visible}.Toastify__toast--stacked[data-collapsed=true]:not(:last-child)>*{opacity:0}.Toastify__toast--stacked:after{content:"";position:absolute;left:0;right:0;height:calc(var(--g) * 1px);bottom:100%}.Toastify__toast--stacked[data-pos=top]{top:0}.Toastify__toast--stacked[data-pos=bot]{bottom:0}.Toastify__toast--stacked[data-pos=bot].Toastify__toast--stacked:before{transform-origin:top}.Toastify__toast--stacked[data-pos=top].Toastify__toast--stacked:before{transform-origin:bottom}.Toastify__toast--stacked:before{content:"";position:absolute;left:0;right:0;bottom:0;height:100%;transform:scaleY(3);z-index:-1}.Toastify__toast--rtl{direction:rtl}.Toastify__toast--close-on-click{cursor:pointer}.Toastify__toast-body{margin:auto 0;-ms-flex:1 1 auto;flex:1 1 auto;padding:6px;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}.Toastify__toast-body>div:last-child{word-break:break-word;-ms-flex:1;flex:1}.Toastify__toast-icon{-webkit-margin-end:10px;margin-inline-end:10px;width:20px;-ms-flex-negative:0;flex-shrink:0;display:-ms-flexbox;display:flex}.Toastify--animate{animation-fill-mode:both;animation-duration:.5s}.Toastify--animate-icon{animation-fill-mode:both;animation-duration:.3s}@media only screen and (max-width : 480px){.Toastify__toast{margin-bottom:0;border-radius:0}}.Toastify__toast-theme--dark{background:var(--toastify-color-dark);color:var(--toastify-text-color-dark)}.Toastify__toast-theme--light,.Toastify__toast-theme--colored.Toastify__toast--default{background:var(--toastify-color-light);color:var(--toastify-text-color-light)}.Toastify__toast-theme--colored.Toastify__toast--info{color:var(--toastify-text-color-info);background:var(--toastify-color-info)}.Toastify__toast-theme--colored.Toastify__toast--success{color:var(--toastify-text-color-success);background:var(--toastify-color-success)}.Toastify__toast-theme--colored.Toastify__toast--warning{color:var(--toastify-text-color-warning);background:var(--toastify-color-warning)}.Toastify__toast-theme--colored.Toastify__toast--error{color:var(--toastify-text-color-error);background:var(--toastify-color-error)}.Toastify__progress-bar-theme--light{background:var(--toastify-color-progress-light)}.Toastify__progress-bar-theme--dark{background:var(--toastify-color-progress-dark)}.Toastify__progress-bar--info{background:var(--toastify-color-progress-info)}.Toastify__progress-bar--success{background:var(--toastify-color-progress-success)}.Toastify__progress-bar--warning{background:var(--toastify-color-progress-warning)}.Toastify__progress-bar--error{background:var(--toastify-color-progress-error)}.Toastify__progress-bar-theme--colored.Toastify__progress-bar--info,.Toastify__progress-bar-theme--colored.Toastify__progress-bar--success,.Toastify__progress-bar-theme--colored.Toastify__progress-bar--warning,.Toastify__progress-bar-theme--colored.Toastify__progress-bar--error{background:var(--toastify-color-transparent)}.Toastify__close-button{color:#fff;background:transparent;outline:none;border:none;padding:0;cursor:pointer;opacity:.7;transition:.3s ease;-ms-flex-item-align:start;align-self:flex-start;z-index:1}.Toastify__close-button--light{color:#000;opacity:.3}.Toastify__close-button>svg{fill:currentColor;height:16px;width:14px}.Toastify__close-button:hover,.Toastify__close-button:focus{opacity:1}@keyframes Toastify__trackProgress{0%{transform:scaleX(1)}to{transform:scaleX(0)}}.Toastify__progress-bar{position:absolute;bottom:0;left:0;width:100%;height:100%;z-index:var(--toastify-z-index);opacity:.7;transform-origin:left;border-bottom-left-radius:var(--toastify-toast-bd-radius)}.Toastify__progress-bar--animated{animation:Toastify__trackProgress linear 1 forwards}.Toastify__progress-bar--controlled{transition:transform .2s}.Toastify__progress-bar--rtl{right:0;left:initial;transform-origin:right;border-bottom-left-radius:initial;border-bottom-right-radius:var(--toastify-toast-bd-radius)}.Toastify__progress-bar--wrp{position:absolute;bottom:0;left:0;width:100%;height:5px;border-bottom-left-radius:var(--toastify-toast-bd-radius)}.Toastify__progress-bar--wrp[data-hidden=true]{opacity:0}.Toastify__progress-bar--bg{opacity:var(--toastify-color-progress-bgo);width:100%;height:100%}.Toastify__spinner{width:20px;height:20px;box-sizing:border-box;border:2px solid;border-radius:100%;border-color:var(--toastify-spinner-color-empty-area);border-right-color:var(--toastify-spinner-color);animation:Toastify__spin .65s linear infinite}@keyframes Toastify__bounceInRight{0%,60%,75%,90%,to{animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{opacity:0;transform:translate3d(3000px,0,0)}60%{opacity:1;transform:translate3d(-25px,0,0)}75%{transform:translate3d(10px,0,0)}90%{transform:translate3d(-5px,0,0)}to{transform:none}}@keyframes Toastify__bounceOutRight{20%{opacity:1;transform:translate3d(-20px,var(--y),0)}to{opacity:0;transform:translate3d(2000px,var(--y),0)}}@keyframes Toastify__bounceInLeft{0%,60%,75%,90%,to{animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{opacity:0;transform:translate3d(-3000px,0,0)}60%{opacity:1;transform:translate3d(25px,0,0)}75%{transform:translate3d(-10px,0,0)}90%{transform:translate3d(5px,0,0)}to{transform:none}}@keyframes Toastify__bounceOutLeft{20%{opacity:1;transform:translate3d(20px,var(--y),0)}to{opacity:0;transform:translate3d(-2000px,var(--y),0)}}@keyframes Toastify__bounceInUp{0%,60%,75%,90%,to{animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{opacity:0;transform:translate3d(0,3000px,0)}60%{opacity:1;transform:translate3d(0,-20px,0)}75%{transform:translate3d(0,10px,0)}90%{transform:translate3d(0,-5px,0)}to{transform:translateZ(0)}}@keyframes Toastify__bounceOutUp{20%{transform:translate3d(0,calc(var(--y) - 10px),0)}40%,45%{opacity:1;transform:translate3d(0,calc(var(--y) + 20px),0)}to{opacity:0;transform:translate3d(0,-2000px,0)}}@keyframes Toastify__bounceInDown{0%,60%,75%,90%,to{animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{opacity:0;transform:translate3d(0,-3000px,0)}60%{opacity:1;transform:translate3d(0,25px,0)}75%{transform:translate3d(0,-10px,0)}90%{transform:translate3d(0,5px,0)}to{transform:none}}@keyframes Toastify__bounceOutDown{20%{transform:translate3d(0,calc(var(--y) - 10px),0)}40%,45%{opacity:1;transform:translate3d(0,calc(var(--y) + 20px),0)}to{opacity:0;transform:translate3d(0,2000px,0)}}.Toastify__bounce-enter--top-left,.Toastify__bounce-enter--bottom-left{animation-name:Toastify__bounceInLeft}.Toastify__bounce-enter--top-right,.Toastify__bounce-enter--bottom-right{animation-name:Toastify__bounceInRight}.Toastify__bounce-enter--top-center{animation-name:Toastify__bounceInDown}.Toastify__bounce-enter--bottom-center{animation-name:Toastify__bounceInUp}.Toastify__bounce-exit--top-left,.Toastify__bounce-exit--bottom-left{animation-name:Toastify__bounceOutLeft}.Toastify__bounce-exit--top-right,.Toastify__bounce-exit--bottom-right{animation-name:Toastify__bounceOutRight}.Toastify__bounce-exit--top-center{animation-name:Toastify__bounceOutUp}.Toastify__bounce-exit--bottom-center{animation-name:Toastify__bounceOutDown}@keyframes Toastify__zoomIn{0%{opacity:0;transform:scale3d(.3,.3,.3)}50%{opacity:1}}@keyframes Toastify__zoomOut{0%{opacity:1}50%{opacity:0;transform:translate3d(0,var(--y),0) scale3d(.3,.3,.3)}to{opacity:0}}.Toastify__zoom-enter{animation-name:Toastify__zoomIn}.Toastify__zoom-exit{animation-name:Toastify__zoomOut}@keyframes Toastify__flipIn{0%{transform:perspective(400px) rotateX(90deg);animation-timing-function:ease-in;opacity:0}40%{transform:perspective(400px) rotateX(-20deg);animation-timing-function:ease-in}60%{transform:perspective(400px) rotateX(10deg);opacity:1}80%{transform:perspective(400px) rotateX(-5deg)}to{transform:perspective(400px)}}@keyframes Toastify__flipOut{0%{transform:translate3d(0,var(--y),0) perspective(400px)}30%{transform:translate3d(0,var(--y),0) perspective(400px) rotateX(-20deg);opacity:1}to{transform:translate3d(0,var(--y),0) perspective(400px) rotateX(90deg);opacity:0}}.Toastify__flip-enter{animation-name:Toastify__flipIn}.Toastify__flip-exit{animation-name:Toastify__flipOut}@keyframes Toastify__slideInRight{0%{transform:translate3d(110%,0,0);visibility:visible}to{transform:translate3d(0,var(--y),0)}}@keyframes Toastify__slideInLeft{0%{transform:translate3d(-110%,0,0);visibility:visible}to{transform:translate3d(0,var(--y),0)}}@keyframes Toastify__slideInUp{0%{transform:translate3d(0,110%,0);visibility:visible}to{transform:translate3d(0,var(--y),0)}}@keyframes Toastify__slideInDown{0%{transform:translate3d(0,-110%,0);visibility:visible}to{transform:translate3d(0,var(--y),0)}}@keyframes Toastify__slideOutRight{0%{transform:translate3d(0,var(--y),0)}to{visibility:hidden;transform:translate3d(110%,var(--y),0)}}@keyframes Toastify__slideOutLeft{0%{transform:translate3d(0,var(--y),0)}to{visibility:hidden;transform:translate3d(-110%,var(--y),0)}}@keyframes Toastify__slideOutDown{0%{transform:translate3d(0,var(--y),0)}to{visibility:hidden;transform:translate3d(0,500px,0)}}@keyframes Toastify__slideOutUp{0%{transform:translate3d(0,var(--y),0)}to{visibility:hidden;transform:translate3d(0,-500px,0)}}.Toastify__slide-enter--top-left,.Toastify__slide-enter--bottom-left{animation-name:Toastify__slideInLeft}.Toastify__slide-enter--top-right,.Toastify__slide-enter--bottom-right{animation-name:Toastify__slideInRight}.Toastify__slide-enter--top-center{animation-name:Toastify__slideInDown}.Toastify__slide-enter--bottom-center{animation-name:Toastify__slideInUp}.Toastify__slide-exit--top-left,.Toastify__slide-exit--bottom-left{animation-name:Toastify__slideOutLeft;animation-timing-function:ease-in;animation-duration:.3s}.Toastify__slide-exit--top-right,.Toastify__slide-exit--bottom-right{animation-name:Toastify__slideOutRight;animation-timing-function:ease-in;animation-duration:.3s}.Toastify__slide-exit--top-center{animation-name:Toastify__slideOutUp;animation-timing-function:ease-in;animation-duration:.3s}.Toastify__slide-exit--bottom-center{animation-name:Toastify__slideOutDown;animation-timing-function:ease-in;animation-duration:.3s}@keyframes Toastify__spin{0%{transform:rotate(0)}to{transform:rotate(360deg)}}


==================================================
### FILE: ./frontend/dist/assets/yankovicInterpreter-BWEwZ3HO.js
==================================================

function Ue(t,e){return function(){return t.apply(e,arguments)}}const{toString:at}=Object.prototype,{getPrototypeOf:_e}=Object,{iterator:te,toStringTag:Ce}=Symbol,ne=(t=>e=>{const n=at.call(e);return t[n]||(t[n]=n.slice(8,-1).toLowerCase())})(Object.create(null)),O=t=>(t=t.toLowerCase(),e=>ne(e)===t),re=t=>e=>typeof e===t,{isArray:q}=Array,Y=re("undefined");function lt(t){return t!==null&&!Y(t)&&t.constructor!==null&&!Y(t.constructor)&&A(t.constructor.isBuffer)&&t.constructor.isBuffer(t)}const $e=O("ArrayBuffer");function ct(t){let e;return typeof ArrayBuffer<"u"&&ArrayBuffer.isView?e=ArrayBuffer.isView(t):e=t&&t.buffer&&$e(t.buffer),e}const ut=re("string"),A=re("function"),We=re("number"),oe=t=>t!==null&&typeof t=="object",dt=t=>t===!0||t===!1,J=t=>{if(ne(t)!=="object")return!1;const e=_e(t);return(e===null||e===Object.prototype||Object.getPrototypeOf(e)===null)&&!(Ce in t)&&!(te in t)},ft=O("Date"),pt=O("File"),ht=O("Blob"),mt=O("FileList"),yt=t=>oe(t)&&A(t.pipe),_t=t=>{let e;return t&&(typeof FormData=="function"&&t instanceof FormData||A(t.append)&&((e=ne(t))==="formdata"||e==="object"&&A(t.toString)&&t.toString()==="[object FormData]"))},gt=O("URLSearchParams"),[bt,wt,Et,St]=["ReadableStream","Request","Response","Headers"].map(O),vt=t=>t.trim?t.trim():t.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"");function K(t,e,{allOwnKeys:n=!1}={}){if(t===null||typeof t>"u")return;let r,o;if(typeof t!="object"&&(t=[t]),q(t))for(r=0,o=t.length;r<o;r++)e.call(null,t[r],r,t);else{const s=n?Object.getOwnPropertyNames(t):Object.keys(t),i=s.length;let a;for(r=0;r<i;r++)a=s[r],e.call(null,t[a],a,t)}}function De(t,e){e=e.toLowerCase();const n=Object.keys(t);let r=n.length,o;for(;r-- >0;)if(o=n[r],e===o.toLowerCase())return o;return null}const W=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:global,Be=t=>!Y(t)&&t!==W;function de(){const{caseless:t}=Be(this)&&this||{},e={},n=(r,o)=>{const s=t&&De(e,o)||o;J(e[s])&&J(r)?e[s]=de(e[s],r):J(r)?e[s]=de({},r):q(r)?e[s]=r.slice():e[s]=r};for(let r=0,o=arguments.length;r<o;r++)arguments[r]&&K(arguments[r],n);return e}const Tt=(t,e,n,{allOwnKeys:r}={})=>(K(e,(o,s)=>{n&&A(o)?t[s]=Ue(o,n):t[s]=o},{allOwnKeys:r}),t),Rt=t=>(t.charCodeAt(0)===65279&&(t=t.slice(1)),t),Nt=(t,e,n,r)=>{t.prototype=Object.create(e.prototype,r),t.prototype.constructor=t,Object.defineProperty(t,"super",{value:e.prototype}),n&&Object.assign(t.prototype,n)},Ft=(t,e,n,r)=>{let o,s,i;const a={};if(e=e||{},t==null)return e;do{for(o=Object.getOwnPropertyNames(t),s=o.length;s-- >0;)i=o[s],(!r||r(i,t,e))&&!a[i]&&(e[i]=t[i],a[i]=!0);t=n!==!1&&_e(t)}while(t&&(!n||n(t,e))&&t!==Object.prototype);return e},kt=(t,e,n)=>{t=String(t),(n===void 0||n>t.length)&&(n=t.length),n-=e.length;const r=t.indexOf(e,n);return r!==-1&&r===n},At=t=>{if(!t)return null;if(q(t))return t;let e=t.length;if(!We(e))return null;const n=new Array(e);for(;e-- >0;)n[e]=t[e];return n},It=(t=>e=>t&&e instanceof t)(typeof Uint8Array<"u"&&_e(Uint8Array)),Ot=(t,e)=>{const r=(t&&t[te]).call(t);let o;for(;(o=r.next())&&!o.done;){const s=o.value;e.call(t,s[0],s[1])}},Lt=(t,e)=>{let n;const r=[];for(;(n=t.exec(e))!==null;)r.push(n);return r},xt=O("HTMLFormElement"),Pt=t=>t.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,function(n,r,o){return r.toUpperCase()+o}),Ee=(({hasOwnProperty:t})=>(e,n)=>t.call(e,n))(Object.prototype),Ut=O("RegExp"),Me=(t,e)=>{const n=Object.getOwnPropertyDescriptors(t),r={};K(n,(o,s)=>{let i;(i=e(o,s,t))!==!1&&(r[s]=i||o)}),Object.defineProperties(t,r)},Ct=t=>{Me(t,(e,n)=>{if(A(t)&&["arguments","caller","callee"].indexOf(n)!==-1)return!1;const r=t[n];if(A(r)){if(e.enumerable=!1,"writable"in e){e.writable=!1;return}e.set||(e.set=()=>{throw Error("Can not rewrite read-only method '"+n+"'")})}})},$t=(t,e)=>{const n={},r=o=>{o.forEach(s=>{n[s]=!0})};return q(t)?r(t):r(String(t).split(e)),n},Wt=()=>{},Dt=(t,e)=>t!=null&&Number.isFinite(t=+t)?t:e;function Bt(t){return!!(t&&A(t.append)&&t[Ce]==="FormData"&&t[te])}const Mt=t=>{const e=new Array(10),n=(r,o)=>{if(oe(r)){if(e.indexOf(r)>=0)return;if(!("toJSON"in r)){e[o]=r;const s=q(r)?[]:{};return K(r,(i,a)=>{const d=n(i,o+1);!Y(d)&&(s[a]=d)}),e[o]=void 0,s}}return r};return n(t,0)},qt=O("AsyncFunction"),jt=t=>t&&(oe(t)||A(t))&&A(t.then)&&A(t.catch),qe=((t,e)=>t?setImmediate:e?((n,r)=>(W.addEventListener("message",({source:o,data:s})=>{o===W&&s===n&&r.length&&r.shift()()},!1),o=>{r.push(o),W.postMessage(n,"*")}))(`axios@${Math.random()}`,[]):n=>setTimeout(n))(typeof setImmediate=="function",A(W.postMessage)),Vt=typeof queueMicrotask<"u"?queueMicrotask.bind(W):typeof process<"u"&&process.nextTick||qe,Ht=t=>t!=null&&A(t[te]),l={isArray:q,isArrayBuffer:$e,isBuffer:lt,isFormData:_t,isArrayBufferView:ct,isString:ut,isNumber:We,isBoolean:dt,isObject:oe,isPlainObject:J,isReadableStream:bt,isRequest:wt,isResponse:Et,isHeaders:St,isUndefined:Y,isDate:ft,isFile:pt,isBlob:ht,isRegExp:Ut,isFunction:A,isStream:yt,isURLSearchParams:gt,isTypedArray:It,isFileList:mt,forEach:K,merge:de,extend:Tt,trim:vt,stripBOM:Rt,inherits:Nt,toFlatObject:Ft,kindOf:ne,kindOfTest:O,endsWith:kt,toArray:At,forEachEntry:Ot,matchAll:Lt,isHTMLForm:xt,hasOwnProperty:Ee,hasOwnProp:Ee,reduceDescriptors:Me,freezeMethods:Ct,toObjectSet:$t,toCamelCase:Pt,noop:Wt,toFiniteNumber:Dt,findKey:De,global:W,isContextDefined:Be,isSpecCompliantForm:Bt,toJSONObject:Mt,isAsyncFn:qt,isThenable:jt,setImmediate:qe,asap:Vt,isIterable:Ht};function y(t,e,n,r,o){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=new Error().stack,this.message=t,this.name="AxiosError",e&&(this.code=e),n&&(this.config=n),r&&(this.request=r),o&&(this.response=o,this.status=o.status?o.status:null)}l.inherits(y,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:l.toJSONObject(this.config),code:this.code,status:this.status}}});const je=y.prototype,Ve={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach(t=>{Ve[t]={value:t}});Object.defineProperties(y,Ve);Object.defineProperty(je,"isAxiosError",{value:!0});y.from=(t,e,n,r,o,s)=>{const i=Object.create(je);return l.toFlatObject(t,i,function(d){return d!==Error.prototype},a=>a!=="isAxiosError"),y.call(i,t.message,e,n,r,o),i.cause=t,i.name=t.name,s&&Object.assign(i,s),i};const Yt=null;function fe(t){return l.isPlainObject(t)||l.isArray(t)}function He(t){return l.endsWith(t,"[]")?t.slice(0,-2):t}function Se(t,e,n){return t?t.concat(e).map(function(o,s){return o=He(o),!n&&s?"["+o+"]":o}).join(n?".":""):e}function Kt(t){return l.isArray(t)&&!t.some(fe)}const zt=l.toFlatObject(l,{},null,function(e){return/^is[A-Z]/.test(e)});function se(t,e,n){if(!l.isObject(t))throw new TypeError("target must be an object");e=e||new FormData,n=l.toFlatObject(n,{metaTokens:!0,dots:!1,indexes:!1},!1,function(h,m){return!l.isUndefined(m[h])});const r=n.metaTokens,o=n.visitor||c,s=n.dots,i=n.indexes,d=(n.Blob||typeof Blob<"u"&&Blob)&&l.isSpecCompliantForm(e);if(!l.isFunction(o))throw new TypeError("visitor must be a function");function u(p){if(p===null)return"";if(l.isDate(p))return p.toISOString();if(l.isBoolean(p))return p.toString();if(!d&&l.isBlob(p))throw new y("Blob is not supported. Use a Buffer instead.");return l.isArrayBuffer(p)||l.isTypedArray(p)?d&&typeof Blob=="function"?new Blob([p]):Buffer.from(p):p}function c(p,h,m){let S=p;if(p&&!m&&typeof p=="object"){if(l.endsWith(h,"{}"))h=r?h:h.slice(0,-2),p=JSON.stringify(p);else if(l.isArray(p)&&Kt(p)||(l.isFileList(p)||l.endsWith(h,"[]"))&&(S=l.toArray(p)))return h=He(h),S.forEach(function(T,P){!(l.isUndefined(T)||T===null)&&e.append(i===!0?Se([h],P,s):i===null?h:h+"[]",u(T))}),!1}return fe(p)?!0:(e.append(Se(m,h,s),u(p)),!1)}const f=[],_=Object.assign(zt,{defaultVisitor:c,convertValue:u,isVisitable:fe});function E(p,h){if(!l.isUndefined(p)){if(f.indexOf(p)!==-1)throw Error("Circular reference detected in "+h.join("."));f.push(p),l.forEach(p,function(S,v){(!(l.isUndefined(S)||S===null)&&o.call(e,S,l.isString(v)?v.trim():v,h,_))===!0&&E(S,h?h.concat(v):[v])}),f.pop()}}if(!l.isObject(t))throw new TypeError("data must be an object");return E(t),e}function ve(t){const e={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(t).replace(/[!'()~]|%20|%00/g,function(r){return e[r]})}function ge(t,e){this._pairs=[],t&&se(t,this,e)}const Ye=ge.prototype;Ye.append=function(e,n){this._pairs.push([e,n])};Ye.toString=function(e){const n=e?function(r){return e.call(this,r,ve)}:ve;return this._pairs.map(function(o){return n(o[0])+"="+n(o[1])},"").join("&")};function Gt(t){return encodeURIComponent(t).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function Ke(t,e,n){if(!e)return t;const r=n&&n.encode||Gt;l.isFunction(n)&&(n={serialize:n});const o=n&&n.serialize;let s;if(o?s=o(e,n):s=l.isURLSearchParams(e)?e.toString():new ge(e,n).toString(r),s){const i=t.indexOf("#");i!==-1&&(t=t.slice(0,i)),t+=(t.indexOf("?")===-1?"?":"&")+s}return t}class Te{constructor(){this.handlers=[]}use(e,n,r){return this.handlers.push({fulfilled:e,rejected:n,synchronous:r?r.synchronous:!1,runWhen:r?r.runWhen:null}),this.handlers.length-1}eject(e){this.handlers[e]&&(this.handlers[e]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(e){l.forEach(this.handlers,function(r){r!==null&&e(r)})}}const ze={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},Jt=typeof URLSearchParams<"u"?URLSearchParams:ge,Qt=typeof FormData<"u"?FormData:null,Xt=typeof Blob<"u"?Blob:null,Zt={isBrowser:!0,classes:{URLSearchParams:Jt,FormData:Qt,Blob:Xt},protocols:["http","https","file","blob","url","data"]},be=typeof window<"u"&&typeof document<"u",pe=typeof navigator=="object"&&navigator||void 0,en=be&&(!pe||["ReactNative","NativeScript","NS"].indexOf(pe.product)<0),tn=typeof WorkerGlobalScope<"u"&&self instanceof WorkerGlobalScope&&typeof self.importScripts=="function",nn=be&&window.location.href||"http://localhost",rn=Object.freeze(Object.defineProperty({__proto__:null,hasBrowserEnv:be,hasStandardBrowserEnv:en,hasStandardBrowserWebWorkerEnv:tn,navigator:pe,origin:nn},Symbol.toStringTag,{value:"Module"})),N={...rn,...Zt};function on(t,e){return se(t,new N.classes.URLSearchParams,Object.assign({visitor:function(n,r,o,s){return N.isNode&&l.isBuffer(n)?(this.append(r,n.toString("base64")),!1):s.defaultVisitor.apply(this,arguments)}},e))}function sn(t){return l.matchAll(/\w+|\[(\w*)]/g,t).map(e=>e[0]==="[]"?"":e[1]||e[0])}function an(t){const e={},n=Object.keys(t);let r;const o=n.length;let s;for(r=0;r<o;r++)s=n[r],e[s]=t[s];return e}function Ge(t){function e(n,r,o,s){let i=n[s++];if(i==="__proto__")return!0;const a=Number.isFinite(+i),d=s>=n.length;return i=!i&&l.isArray(o)?o.length:i,d?(l.hasOwnProp(o,i)?o[i]=[o[i],r]:o[i]=r,!a):((!o[i]||!l.isObject(o[i]))&&(o[i]=[]),e(n,r,o[i],s)&&l.isArray(o[i])&&(o[i]=an(o[i])),!a)}if(l.isFormData(t)&&l.isFunction(t.entries)){const n={};return l.forEachEntry(t,(r,o)=>{e(sn(r),o,n,0)}),n}return null}function ln(t,e,n){if(l.isString(t))try{return(e||JSON.parse)(t),l.trim(t)}catch(r){if(r.name!=="SyntaxError")throw r}return(n||JSON.stringify)(t)}const z={transitional:ze,adapter:["xhr","http","fetch"],transformRequest:[function(e,n){const r=n.getContentType()||"",o=r.indexOf("application/json")>-1,s=l.isObject(e);if(s&&l.isHTMLForm(e)&&(e=new FormData(e)),l.isFormData(e))return o?JSON.stringify(Ge(e)):e;if(l.isArrayBuffer(e)||l.isBuffer(e)||l.isStream(e)||l.isFile(e)||l.isBlob(e)||l.isReadableStream(e))return e;if(l.isArrayBufferView(e))return e.buffer;if(l.isURLSearchParams(e))return n.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),e.toString();let a;if(s){if(r.indexOf("application/x-www-form-urlencoded")>-1)return on(e,this.formSerializer).toString();if((a=l.isFileList(e))||r.indexOf("multipart/form-data")>-1){const d=this.env&&this.env.FormData;return se(a?{"files[]":e}:e,d&&new d,this.formSerializer)}}return s||o?(n.setContentType("application/json",!1),ln(e)):e}],transformResponse:[function(e){const n=this.transitional||z.transitional,r=n&&n.forcedJSONParsing,o=this.responseType==="json";if(l.isResponse(e)||l.isReadableStream(e))return e;if(e&&l.isString(e)&&(r&&!this.responseType||o)){const i=!(n&&n.silentJSONParsing)&&o;try{return JSON.parse(e)}catch(a){if(i)throw a.name==="SyntaxError"?y.from(a,y.ERR_BAD_RESPONSE,this,null,this.response):a}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:N.classes.FormData,Blob:N.classes.Blob},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};l.forEach(["delete","get","head","post","put","patch"],t=>{z.headers[t]={}});const cn=l.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),un=t=>{const e={};let n,r,o;return t&&t.split(`
`).forEach(function(i){o=i.indexOf(":"),n=i.substring(0,o).trim().toLowerCase(),r=i.substring(o+1).trim(),!(!n||e[n]&&cn[n])&&(n==="set-cookie"?e[n]?e[n].push(r):e[n]=[r]:e[n]=e[n]?e[n]+", "+r:r)}),e},Re=Symbol("internals");function V(t){return t&&String(t).trim().toLowerCase()}function Q(t){return t===!1||t==null?t:l.isArray(t)?t.map(Q):String(t)}function dn(t){const e=Object.create(null),n=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let r;for(;r=n.exec(t);)e[r[1]]=r[2];return e}const fn=t=>/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(t.trim());function le(t,e,n,r,o){if(l.isFunction(r))return r.call(this,e,n);if(o&&(e=n),!!l.isString(e)){if(l.isString(r))return e.indexOf(r)!==-1;if(l.isRegExp(r))return r.test(e)}}function pn(t){return t.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,(e,n,r)=>n.toUpperCase()+r)}function hn(t,e){const n=l.toCamelCase(" "+e);["get","set","has"].forEach(r=>{Object.defineProperty(t,r+n,{value:function(o,s,i){return this[r].call(this,e,o,s,i)},configurable:!0})})}let I=class{constructor(e){e&&this.set(e)}set(e,n,r){const o=this;function s(a,d,u){const c=V(d);if(!c)throw new Error("header name must be a non-empty string");const f=l.findKey(o,c);(!f||o[f]===void 0||u===!0||u===void 0&&o[f]!==!1)&&(o[f||d]=Q(a))}const i=(a,d)=>l.forEach(a,(u,c)=>s(u,c,d));if(l.isPlainObject(e)||e instanceof this.constructor)i(e,n);else if(l.isString(e)&&(e=e.trim())&&!fn(e))i(un(e),n);else if(l.isObject(e)&&l.isIterable(e)){let a={},d,u;for(const c of e){if(!l.isArray(c))throw TypeError("Object iterator must return a key-value pair");a[u=c[0]]=(d=a[u])?l.isArray(d)?[...d,c[1]]:[d,c[1]]:c[1]}i(a,n)}else e!=null&&s(n,e,r);return this}get(e,n){if(e=V(e),e){const r=l.findKey(this,e);if(r){const o=this[r];if(!n)return o;if(n===!0)return dn(o);if(l.isFunction(n))return n.call(this,o,r);if(l.isRegExp(n))return n.exec(o);throw new TypeError("parser must be boolean|regexp|function")}}}has(e,n){if(e=V(e),e){const r=l.findKey(this,e);return!!(r&&this[r]!==void 0&&(!n||le(this,this[r],r,n)))}return!1}delete(e,n){const r=this;let o=!1;function s(i){if(i=V(i),i){const a=l.findKey(r,i);a&&(!n||le(r,r[a],a,n))&&(delete r[a],o=!0)}}return l.isArray(e)?e.forEach(s):s(e),o}clear(e){const n=Object.keys(this);let r=n.length,o=!1;for(;r--;){const s=n[r];(!e||le(this,this[s],s,e,!0))&&(delete this[s],o=!0)}return o}normalize(e){const n=this,r={};return l.forEach(this,(o,s)=>{const i=l.findKey(r,s);if(i){n[i]=Q(o),delete n[s];return}const a=e?pn(s):String(s).trim();a!==s&&delete n[s],n[a]=Q(o),r[a]=!0}),this}concat(...e){return this.constructor.concat(this,...e)}toJSON(e){const n=Object.create(null);return l.forEach(this,(r,o)=>{r!=null&&r!==!1&&(n[o]=e&&l.isArray(r)?r.join(", "):r)}),n}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map(([e,n])=>e+": "+n).join(`
`)}getSetCookie(){return this.get("set-cookie")||[]}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(e){return e instanceof this?e:new this(e)}static concat(e,...n){const r=new this(e);return n.forEach(o=>r.set(o)),r}static accessor(e){const r=(this[Re]=this[Re]={accessors:{}}).accessors,o=this.prototype;function s(i){const a=V(i);r[a]||(hn(o,i),r[a]=!0)}return l.isArray(e)?e.forEach(s):s(e),this}};I.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]);l.reduceDescriptors(I.prototype,({value:t},e)=>{let n=e[0].toUpperCase()+e.slice(1);return{get:()=>t,set(r){this[n]=r}}});l.freezeMethods(I);function ce(t,e){const n=this||z,r=e||n,o=I.from(r.headers);let s=r.data;return l.forEach(t,function(a){s=a.call(n,s,o.normalize(),e?e.status:void 0)}),o.normalize(),s}function Je(t){return!!(t&&t.__CANCEL__)}function j(t,e,n){y.call(this,t??"canceled",y.ERR_CANCELED,e,n),this.name="CanceledError"}l.inherits(j,y,{__CANCEL__:!0});function Qe(t,e,n){const r=n.config.validateStatus;!n.status||!r||r(n.status)?t(n):e(new y("Request failed with status code "+n.status,[y.ERR_BAD_REQUEST,y.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n))}function mn(t){const e=/^([-+\w]{1,25})(:?\/\/|:)/.exec(t);return e&&e[1]||""}function yn(t,e){t=t||10;const n=new Array(t),r=new Array(t);let o=0,s=0,i;return e=e!==void 0?e:1e3,function(d){const u=Date.now(),c=r[s];i||(i=u),n[o]=d,r[o]=u;let f=s,_=0;for(;f!==o;)_+=n[f++],f=f%t;if(o=(o+1)%t,o===s&&(s=(s+1)%t),u-i<e)return;const E=c&&u-c;return E?Math.round(_*1e3/E):void 0}}function _n(t,e){let n=0,r=1e3/e,o,s;const i=(u,c=Date.now())=>{n=c,o=null,s&&(clearTimeout(s),s=null),t.apply(null,u)};return[(...u)=>{const c=Date.now(),f=c-n;f>=r?i(u,c):(o=u,s||(s=setTimeout(()=>{s=null,i(o)},r-f)))},()=>o&&i(o)]}const Z=(t,e,n=3)=>{let r=0;const o=yn(50,250);return _n(s=>{const i=s.loaded,a=s.lengthComputable?s.total:void 0,d=i-r,u=o(d),c=i<=a;r=i;const f={loaded:i,total:a,progress:a?i/a:void 0,bytes:d,rate:u||void 0,estimated:u&&a&&c?(a-i)/u:void 0,event:s,lengthComputable:a!=null,[e?"download":"upload"]:!0};t(f)},n)},Ne=(t,e)=>{const n=t!=null;return[r=>e[0]({lengthComputable:n,total:t,loaded:r}),e[1]]},Fe=t=>(...e)=>l.asap(()=>t(...e)),gn=N.hasStandardBrowserEnv?((t,e)=>n=>(n=new URL(n,N.origin),t.protocol===n.protocol&&t.host===n.host&&(e||t.port===n.port)))(new URL(N.origin),N.navigator&&/(msie|trident)/i.test(N.navigator.userAgent)):()=>!0,bn=N.hasStandardBrowserEnv?{write(t,e,n,r,o,s){const i=[t+"="+encodeURIComponent(e)];l.isNumber(n)&&i.push("expires="+new Date(n).toGMTString()),l.isString(r)&&i.push("path="+r),l.isString(o)&&i.push("domain="+o),s===!0&&i.push("secure"),document.cookie=i.join("; ")},read(t){const e=document.cookie.match(new RegExp("(^|;\\s*)("+t+")=([^;]*)"));return e?decodeURIComponent(e[3]):null},remove(t){this.write(t,"",Date.now()-864e5)}}:{write(){},read(){return null},remove(){}};function wn(t){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(t)}function En(t,e){return e?t.replace(/\/?\/$/,"")+"/"+e.replace(/^\/+/,""):t}function Xe(t,e,n){let r=!wn(e);return t&&(r||n==!1)?En(t,e):e}const ke=t=>t instanceof I?{...t}:t;function B(t,e){e=e||{};const n={};function r(u,c,f,_){return l.isPlainObject(u)&&l.isPlainObject(c)?l.merge.call({caseless:_},u,c):l.isPlainObject(c)?l.merge({},c):l.isArray(c)?c.slice():c}function o(u,c,f,_){if(l.isUndefined(c)){if(!l.isUndefined(u))return r(void 0,u,f,_)}else return r(u,c,f,_)}function s(u,c){if(!l.isUndefined(c))return r(void 0,c)}function i(u,c){if(l.isUndefined(c)){if(!l.isUndefined(u))return r(void 0,u)}else return r(void 0,c)}function a(u,c,f){if(f in e)return r(u,c);if(f in t)return r(void 0,u)}const d={url:s,method:s,data:s,baseURL:i,transformRequest:i,transformResponse:i,paramsSerializer:i,timeout:i,timeoutMessage:i,withCredentials:i,withXSRFToken:i,adapter:i,responseType:i,xsrfCookieName:i,xsrfHeaderName:i,onUploadProgress:i,onDownloadProgress:i,decompress:i,maxContentLength:i,maxBodyLength:i,beforeRedirect:i,transport:i,httpAgent:i,httpsAgent:i,cancelToken:i,socketPath:i,responseEncoding:i,validateStatus:a,headers:(u,c,f)=>o(ke(u),ke(c),f,!0)};return l.forEach(Object.keys(Object.assign({},t,e)),function(c){const f=d[c]||o,_=f(t[c],e[c],c);l.isUndefined(_)&&f!==a||(n[c]=_)}),n}const Ze=t=>{const e=B({},t);let{data:n,withXSRFToken:r,xsrfHeaderName:o,xsrfCookieName:s,headers:i,auth:a}=e;e.headers=i=I.from(i),e.url=Ke(Xe(e.baseURL,e.url,e.allowAbsoluteUrls),t.params,t.paramsSerializer),a&&i.set("Authorization","Basic "+btoa((a.username||"")+":"+(a.password?unescape(encodeURIComponent(a.password)):"")));let d;if(l.isFormData(n)){if(N.hasStandardBrowserEnv||N.hasStandardBrowserWebWorkerEnv)i.setContentType(void 0);else if((d=i.getContentType())!==!1){const[u,...c]=d?d.split(";").map(f=>f.trim()).filter(Boolean):[];i.setContentType([u||"multipart/form-data",...c].join("; "))}}if(N.hasStandardBrowserEnv&&(r&&l.isFunction(r)&&(r=r(e)),r||r!==!1&&gn(e.url))){const u=o&&s&&bn.read(s);u&&i.set(o,u)}return e},Sn=typeof XMLHttpRequest<"u",vn=Sn&&function(t){return new Promise(function(n,r){const o=Ze(t);let s=o.data;const i=I.from(o.headers).normalize();let{responseType:a,onUploadProgress:d,onDownloadProgress:u}=o,c,f,_,E,p;function h(){E&&E(),p&&p(),o.cancelToken&&o.cancelToken.unsubscribe(c),o.signal&&o.signal.removeEventListener("abort",c)}let m=new XMLHttpRequest;m.open(o.method.toUpperCase(),o.url,!0),m.timeout=o.timeout;function S(){if(!m)return;const T=I.from("getAllResponseHeaders"in m&&m.getAllResponseHeaders()),k={data:!a||a==="text"||a==="json"?m.responseText:m.response,status:m.status,statusText:m.statusText,headers:T,config:t,request:m};Qe(function($){n($),h()},function($){r($),h()},k),m=null}"onloadend"in m?m.onloadend=S:m.onreadystatechange=function(){!m||m.readyState!==4||m.status===0&&!(m.responseURL&&m.responseURL.indexOf("file:")===0)||setTimeout(S)},m.onabort=function(){m&&(r(new y("Request aborted",y.ECONNABORTED,t,m)),m=null)},m.onerror=function(){r(new y("Network Error",y.ERR_NETWORK,t,m)),m=null},m.ontimeout=function(){let P=o.timeout?"timeout of "+o.timeout+"ms exceeded":"timeout exceeded";const k=o.transitional||ze;o.timeoutErrorMessage&&(P=o.timeoutErrorMessage),r(new y(P,k.clarifyTimeoutError?y.ETIMEDOUT:y.ECONNABORTED,t,m)),m=null},s===void 0&&i.setContentType(null),"setRequestHeader"in m&&l.forEach(i.toJSON(),function(P,k){m.setRequestHeader(k,P)}),l.isUndefined(o.withCredentials)||(m.withCredentials=!!o.withCredentials),a&&a!=="json"&&(m.responseType=o.responseType),u&&([_,p]=Z(u,!0),m.addEventListener("progress",_)),d&&m.upload&&([f,E]=Z(d),m.upload.addEventListener("progress",f),m.upload.addEventListener("loadend",E)),(o.cancelToken||o.signal)&&(c=T=>{m&&(r(!T||T.type?new j(null,t,m):T),m.abort(),m=null)},o.cancelToken&&o.cancelToken.subscribe(c),o.signal&&(o.signal.aborted?c():o.signal.addEventListener("abort",c)));const v=mn(o.url);if(v&&N.protocols.indexOf(v)===-1){r(new y("Unsupported protocol "+v+":",y.ERR_BAD_REQUEST,t));return}m.send(s||null)})},Tn=(t,e)=>{const{length:n}=t=t?t.filter(Boolean):[];if(e||n){let r=new AbortController,o;const s=function(u){if(!o){o=!0,a();const c=u instanceof Error?u:this.reason;r.abort(c instanceof y?c:new j(c instanceof Error?c.message:c))}};let i=e&&setTimeout(()=>{i=null,s(new y(`timeout ${e} of ms exceeded`,y.ETIMEDOUT))},e);const a=()=>{t&&(i&&clearTimeout(i),i=null,t.forEach(u=>{u.unsubscribe?u.unsubscribe(s):u.removeEventListener("abort",s)}),t=null)};t.forEach(u=>u.addEventListener("abort",s));const{signal:d}=r;return d.unsubscribe=()=>l.asap(a),d}},Rn=function*(t,e){let n=t.byteLength;if(n<e){yield t;return}let r=0,o;for(;r<n;)o=r+e,yield t.slice(r,o),r=o},Nn=async function*(t,e){for await(const n of Fn(t))yield*Rn(n,e)},Fn=async function*(t){if(t[Symbol.asyncIterator]){yield*t;return}const e=t.getReader();try{for(;;){const{done:n,value:r}=await e.read();if(n)break;yield r}}finally{await e.cancel()}},Ae=(t,e,n,r)=>{const o=Nn(t,e);let s=0,i,a=d=>{i||(i=!0,r&&r(d))};return new ReadableStream({async pull(d){try{const{done:u,value:c}=await o.next();if(u){a(),d.close();return}let f=c.byteLength;if(n){let _=s+=f;n(_)}d.enqueue(new Uint8Array(c))}catch(u){throw a(u),u}},cancel(d){return a(d),o.return()}},{highWaterMark:2})},ie=typeof fetch=="function"&&typeof Request=="function"&&typeof Response=="function",et=ie&&typeof ReadableStream=="function",kn=ie&&(typeof TextEncoder=="function"?(t=>e=>t.encode(e))(new TextEncoder):async t=>new Uint8Array(await new Response(t).arrayBuffer())),tt=(t,...e)=>{try{return!!t(...e)}catch{return!1}},An=et&&tt(()=>{let t=!1;const e=new Request(N.origin,{body:new ReadableStream,method:"POST",get duplex(){return t=!0,"half"}}).headers.has("Content-Type");return t&&!e}),Ie=64*1024,he=et&&tt(()=>l.isReadableStream(new Response("").body)),ee={stream:he&&(t=>t.body)};ie&&(t=>{["text","arrayBuffer","blob","formData","stream"].forEach(e=>{!ee[e]&&(ee[e]=l.isFunction(t[e])?n=>n[e]():(n,r)=>{throw new y(`Response type '${e}' is not supported`,y.ERR_NOT_SUPPORT,r)})})})(new Response);const In=async t=>{if(t==null)return 0;if(l.isBlob(t))return t.size;if(l.isSpecCompliantForm(t))return(await new Request(N.origin,{method:"POST",body:t}).arrayBuffer()).byteLength;if(l.isArrayBufferView(t)||l.isArrayBuffer(t))return t.byteLength;if(l.isURLSearchParams(t)&&(t=t+""),l.isString(t))return(await kn(t)).byteLength},On=async(t,e)=>{const n=l.toFiniteNumber(t.getContentLength());return n??In(e)},Ln=ie&&(async t=>{let{url:e,method:n,data:r,signal:o,cancelToken:s,timeout:i,onDownloadProgress:a,onUploadProgress:d,responseType:u,headers:c,withCredentials:f="same-origin",fetchOptions:_}=Ze(t);u=u?(u+"").toLowerCase():"text";let E=Tn([o,s&&s.toAbortSignal()],i),p;const h=E&&E.unsubscribe&&(()=>{E.unsubscribe()});let m;try{if(d&&An&&n!=="get"&&n!=="head"&&(m=await On(c,r))!==0){let k=new Request(e,{method:"POST",body:r,duplex:"half"}),U;if(l.isFormData(r)&&(U=k.headers.get("content-type"))&&c.setContentType(U),k.body){const[$,G]=Ne(m,Z(Fe(d)));r=Ae(k.body,Ie,$,G)}}l.isString(f)||(f=f?"include":"omit");const S="credentials"in Request.prototype;p=new Request(e,{..._,signal:E,method:n.toUpperCase(),headers:c.normalize().toJSON(),body:r,duplex:"half",credentials:S?f:void 0});let v=await fetch(p,_);const T=he&&(u==="stream"||u==="response");if(he&&(a||T&&h)){const k={};["status","statusText","headers"].forEach(we=>{k[we]=v[we]});const U=l.toFiniteNumber(v.headers.get("content-length")),[$,G]=a&&Ne(U,Z(Fe(a),!0))||[];v=new Response(Ae(v.body,Ie,$,()=>{G&&G(),h&&h()}),k)}u=u||"text";let P=await ee[l.findKey(ee,u)||"text"](v,t);return!T&&h&&h(),await new Promise((k,U)=>{Qe(k,U,{data:P,headers:I.from(v.headers),status:v.status,statusText:v.statusText,config:t,request:p})})}catch(S){throw h&&h(),S&&S.name==="TypeError"&&/Load failed|fetch/i.test(S.message)?Object.assign(new y("Network Error",y.ERR_NETWORK,t,p),{cause:S.cause||S}):y.from(S,S&&S.code,t,p)}}),me={http:Yt,xhr:vn,fetch:Ln};l.forEach(me,(t,e)=>{if(t){try{Object.defineProperty(t,"name",{value:e})}catch{}Object.defineProperty(t,"adapterName",{value:e})}});const Oe=t=>`- ${t}`,xn=t=>l.isFunction(t)||t===null||t===!1,nt={getAdapter:t=>{t=l.isArray(t)?t:[t];const{length:e}=t;let n,r;const o={};for(let s=0;s<e;s++){n=t[s];let i;if(r=n,!xn(n)&&(r=me[(i=String(n)).toLowerCase()],r===void 0))throw new y(`Unknown adapter '${i}'`);if(r)break;o[i||"#"+s]=r}if(!r){const s=Object.entries(o).map(([a,d])=>`adapter ${a} `+(d===!1?"is not supported by the environment":"is not available in the build"));let i=e?s.length>1?`since :
`+s.map(Oe).join(`
`):" "+Oe(s[0]):"as no adapter specified";throw new y("There is no suitable adapter to dispatch the request "+i,"ERR_NOT_SUPPORT")}return r},adapters:me};function ue(t){if(t.cancelToken&&t.cancelToken.throwIfRequested(),t.signal&&t.signal.aborted)throw new j(null,t)}function Le(t){return ue(t),t.headers=I.from(t.headers),t.data=ce.call(t,t.transformRequest),["post","put","patch"].indexOf(t.method)!==-1&&t.headers.setContentType("application/x-www-form-urlencoded",!1),nt.getAdapter(t.adapter||z.adapter)(t).then(function(r){return ue(t),r.data=ce.call(t,t.transformResponse,r),r.headers=I.from(r.headers),r},function(r){return Je(r)||(ue(t),r&&r.response&&(r.response.data=ce.call(t,t.transformResponse,r.response),r.response.headers=I.from(r.response.headers))),Promise.reject(r)})}const rt="1.10.0",ae={};["object","boolean","number","function","string","symbol"].forEach((t,e)=>{ae[t]=function(r){return typeof r===t||"a"+(e<1?"n ":" ")+t}});const xe={};ae.transitional=function(e,n,r){function o(s,i){return"[Axios v"+rt+"] Transitional option '"+s+"'"+i+(r?". "+r:"")}return(s,i,a)=>{if(e===!1)throw new y(o(i," has been removed"+(n?" in "+n:"")),y.ERR_DEPRECATED);return n&&!xe[i]&&(xe[i]=!0,console.warn(o(i," has been deprecated since v"+n+" and will be removed in the near future"))),e?e(s,i,a):!0}};ae.spelling=function(e){return(n,r)=>(console.warn(`${r} is likely a misspelling of ${e}`),!0)};function Pn(t,e,n){if(typeof t!="object")throw new y("options must be an object",y.ERR_BAD_OPTION_VALUE);const r=Object.keys(t);let o=r.length;for(;o-- >0;){const s=r[o],i=e[s];if(i){const a=t[s],d=a===void 0||i(a,s,t);if(d!==!0)throw new y("option "+s+" must be "+d,y.ERR_BAD_OPTION_VALUE);continue}if(n!==!0)throw new y("Unknown option "+s,y.ERR_BAD_OPTION)}}const X={assertOptions:Pn,validators:ae},L=X.validators;let D=class{constructor(e){this.defaults=e||{},this.interceptors={request:new Te,response:new Te}}async request(e,n){try{return await this._request(e,n)}catch(r){if(r instanceof Error){let o={};Error.captureStackTrace?Error.captureStackTrace(o):o=new Error;const s=o.stack?o.stack.replace(/^.+\n/,""):"";try{r.stack?s&&!String(r.stack).endsWith(s.replace(/^.+\n.+\n/,""))&&(r.stack+=`
`+s):r.stack=s}catch{}}throw r}}_request(e,n){typeof e=="string"?(n=n||{},n.url=e):n=e||{},n=B(this.defaults,n);const{transitional:r,paramsSerializer:o,headers:s}=n;r!==void 0&&X.assertOptions(r,{silentJSONParsing:L.transitional(L.boolean),forcedJSONParsing:L.transitional(L.boolean),clarifyTimeoutError:L.transitional(L.boolean)},!1),o!=null&&(l.isFunction(o)?n.paramsSerializer={serialize:o}:X.assertOptions(o,{encode:L.function,serialize:L.function},!0)),n.allowAbsoluteUrls!==void 0||(this.defaults.allowAbsoluteUrls!==void 0?n.allowAbsoluteUrls=this.defaults.allowAbsoluteUrls:n.allowAbsoluteUrls=!0),X.assertOptions(n,{baseUrl:L.spelling("baseURL"),withXsrfToken:L.spelling("withXSRFToken")},!0),n.method=(n.method||this.defaults.method||"get").toLowerCase();let i=s&&l.merge(s.common,s[n.method]);s&&l.forEach(["delete","get","head","post","put","patch","common"],p=>{delete s[p]}),n.headers=I.concat(i,s);const a=[];let d=!0;this.interceptors.request.forEach(function(h){typeof h.runWhen=="function"&&h.runWhen(n)===!1||(d=d&&h.synchronous,a.unshift(h.fulfilled,h.rejected))});const u=[];this.interceptors.response.forEach(function(h){u.push(h.fulfilled,h.rejected)});let c,f=0,_;if(!d){const p=[Le.bind(this),void 0];for(p.unshift.apply(p,a),p.push.apply(p,u),_=p.length,c=Promise.resolve(n);f<_;)c=c.then(p[f++],p[f++]);return c}_=a.length;let E=n;for(f=0;f<_;){const p=a[f++],h=a[f++];try{E=p(E)}catch(m){h.call(this,m);break}}try{c=Le.call(this,E)}catch(p){return Promise.reject(p)}for(f=0,_=u.length;f<_;)c=c.then(u[f++],u[f++]);return c}getUri(e){e=B(this.defaults,e);const n=Xe(e.baseURL,e.url,e.allowAbsoluteUrls);return Ke(n,e.params,e.paramsSerializer)}};l.forEach(["delete","get","head","options"],function(e){D.prototype[e]=function(n,r){return this.request(B(r||{},{method:e,url:n,data:(r||{}).data}))}});l.forEach(["post","put","patch"],function(e){function n(r){return function(s,i,a){return this.request(B(a||{},{method:e,headers:r?{"Content-Type":"multipart/form-data"}:{},url:s,data:i}))}}D.prototype[e]=n(),D.prototype[e+"Form"]=n(!0)});let Un=class ot{constructor(e){if(typeof e!="function")throw new TypeError("executor must be a function.");let n;this.promise=new Promise(function(s){n=s});const r=this;this.promise.then(o=>{if(!r._listeners)return;let s=r._listeners.length;for(;s-- >0;)r._listeners[s](o);r._listeners=null}),this.promise.then=o=>{let s;const i=new Promise(a=>{r.subscribe(a),s=a}).then(o);return i.cancel=function(){r.unsubscribe(s)},i},e(function(s,i,a){r.reason||(r.reason=new j(s,i,a),n(r.reason))})}throwIfRequested(){if(this.reason)throw this.reason}subscribe(e){if(this.reason){e(this.reason);return}this._listeners?this._listeners.push(e):this._listeners=[e]}unsubscribe(e){if(!this._listeners)return;const n=this._listeners.indexOf(e);n!==-1&&this._listeners.splice(n,1)}toAbortSignal(){const e=new AbortController,n=r=>{e.abort(r)};return this.subscribe(n),e.signal.unsubscribe=()=>this.unsubscribe(n),e.signal}static source(){let e;return{token:new ot(function(o){e=o}),cancel:e}}};function Cn(t){return function(n){return t.apply(null,n)}}function $n(t){return l.isObject(t)&&t.isAxiosError===!0}const ye={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(ye).forEach(([t,e])=>{ye[e]=t});function st(t){const e=new D(t),n=Ue(D.prototype.request,e);return l.extend(n,D.prototype,e,{allOwnKeys:!0}),l.extend(n,e,null,{allOwnKeys:!0}),n.create=function(o){return st(B(t,o))},n}const w=st(z);w.Axios=D;w.CanceledError=j;w.CancelToken=Un;w.isCancel=Je;w.VERSION=rt;w.toFormData=se;w.AxiosError=y;w.Cancel=w.CanceledError;w.all=function(e){return Promise.all(e)};w.spread=Cn;w.isAxiosError=$n;w.mergeConfig=B;w.AxiosHeaders=I;w.formToJSON=t=>Ge(l.isHTMLForm(t)?new FormData(t):t);w.getAdapter=nt.getAdapter;w.HttpStatusCode=ye;w.default=w;const{Axios:tr,AxiosError:nr,CanceledError:rr,isCancel:or,CancelToken:sr,VERSION:ir,all:ar,Cancel:lr,isAxiosError:cr,spread:ur,toFormData:dr,AxiosHeaders:fr,HttpStatusCode:pr,formToJSON:hr,getAdapter:mr,mergeConfig:yr}=w,C="http://localhost:3001/api";async function _r(t="default-project"){return(await w.get(`${C}/files`,{params:{project:t}})).data}async function Wn(t,e){return(await w.get(`${C}/file-content`,{params:{project:t,file:e}})).data.content}async function gr(t,e,n){await w.post(`${C}/save-file`,{project:t,file:e,content:n})}async function br(t,e){console.log("createFolder API call:",{projectName:t,folderPath:e});const n={project:t,path:e};console.log("createFolder payload:",n);const r=await w.post(`${C}/create-folder`,n);return console.log("createFolder response:",r.data),r.data}async function wr(t,e){console.log("createFile API call:",{projectName:t,filePath:e});const n={project:t,path:e};console.log("createFile payload:",n);const r=await w.post(`${C}/create-file`,n);return console.log("createFile response:",r.data),r.data}async function Er(t,e){await w.delete(`${C}/delete-file`,{data:{project:t,file:e}})}async function Sr(t,e){await w.delete(`${C}/delete-folder`,{data:{project:t,folder:e}})}async function vr(t,e){return(await w.post(`${C}/exec`,{command:t,sessionId:e})).data}const Dn="modulepreload",Bn=function(t){return"/"+t},Pe={},Mn=function(e,n,r){let o=Promise.resolve();if(n&&n.length>0){document.getElementsByTagName("link");const i=document.querySelector("meta[property=csp-nonce]"),a=(i==null?void 0:i.nonce)||(i==null?void 0:i.getAttribute("nonce"));o=Promise.allSettled(n.map(d=>{if(d=Bn(d),d in Pe)return;Pe[d]=!0;const u=d.endsWith(".css"),c=u?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${d}"]${c}`))return;const f=document.createElement("link");if(f.rel=u?"stylesheet":Dn,u||(f.as="script"),f.crossOrigin="",f.href=d,a&&f.setAttribute("nonce",a),document.head.appendChild(f),u)return new Promise((_,E)=>{f.addEventListener("load",_),f.addEventListener("error",()=>E(new Error(`Unable to preload CSS for ${d}`)))})}))}function s(i){const a=new Event("vite:preloadError",{cancelable:!0});if(a.payload=i,window.dispatchEvent(a),!a.defaultPrevented)throw i}return o.then(i=>{for(const a of i||[])a.status==="rejected"&&s(a.reason);return e().catch(s)})};function M(){return typeof window<"u"&&window.uhfAPI?window.uhfAPI:null}let R=[];function qn(){const t=M();t&&R.length>0&&(t.executeDrawBuffer(R),R=[])}const jn={start_the_show:{type:"NativeFunction",call:async function(t){const[e,n,r]=t,o=M();return o?(await o.startTheShow({width:e,height:n,title:r}),27):this.webUHF?(this.webUHF.startTheShow(e,n,r),this.showIsOver=!1,27):1}},cancel_the_show:{type:"NativeFunction",call:function(){const t=M();t?t.cancelTheShow():this.webUHF&&(this.webUHF.isActive=!1)}},the_shows_over:{type:"NativeFunction",call:async function(){const t=M();return t?await t.isTheShowOver():this.webUHF?this.webUHF.isTheShowOver():!0}},set_polka_speed:{type:"NativeFunction",call:function(t){const e=M();e&&e.startGameLoop(t[0]||60)}},roll_the_camera:{type:"NativeFunction",call:function(){R=[]}},that_is_a_wrap:{type:"NativeFunction",call:function(){M()?qn():this.webUHF&&(this.webUHF.executeDrawBuffer(R),R=[])}},wait_for_a_moment:{type:"NativeFunction",call:function(t){R.push({command:"wait",args:[t[0]||1e3]})}},paint_the_set:{type:"NativeFunction",call:function(t){R.push({command:"paint_set",args:[t[0]]})}},pick_a_hawaiian_shirt:{type:"NativeFunction",call:function(t){R.push({command:"pick_shirt",args:[t[0]]})}},draw_a_big_ol_wheel_of_cheese:{type:"NativeFunction",call:function(t){R.push({command:"draw_cheese",args:[t[0],t[1],t[2]]})}},draw_a_spamsicle:{type:"NativeFunction",call:function(t){R.push({command:"draw_spamsicle",args:[t[0],t[1],t[2],t[3]]})}},print_a_string_at:{type:"NativeFunction",call:function(t){R.push({command:"draw_text",args:[t[0],t[1],t[2]]})}},Lossless_Laughter:{type:"NativeFunction",call:function(t){R.push({command:"play_media",args:[t[0],t[1]||"audio"]})}},fat_frame:{type:"NativeFunction",call:function(t){R.push({command:"show_image",args:t})}},draw_a_button:{type:"NativeFunction",call:function(t){R.push({command:"draw_button",args:t})}},button_was_clicked:{type:"NativeFunction",call:function(t){const e=t[0];if(!this.uiState||!this.uiState.buttons||!this.uiState.buttons[e])return!1;const n=this.uiState.buttons[e].clicked;return n&&(this.uiState.buttons[e].clicked=!1),n}},draw_a_checkbox:{type:"NativeFunction",call:function(t){R.push({command:"draw_checkbox",args:t})}},get_checkbox_value:{type:"NativeFunction",call:function(t){var e,n,r;return((r=(n=(e=this.uiState)==null?void 0:e.checkboxes)==null?void 0:n[t[0]])==null?void 0:r.checked)||!1}},draw_a_slider:{type:"NativeFunction",call:function(t){R.push({command:"draw_slider",args:t})}},get_slider_value:{type:"NativeFunction",call:function(t){var e,n,r;return((r=(n=(e=this.uiState)==null?void 0:e.sliders)==null?void 0:n[t[0]])==null?void 0:r.value)||0}},yoda:{type:"NativeFunction",call:function(t){const e=t[0],n=t[1];return(e%n+n)%n}},mouse_was_clicked:{type:"NativeFunction",call:function(){var e,n,r;const t=((n=(e=this.uiState)==null?void 0:e.mouse)==null?void 0:n.clicked)||!1;return t&&((r=this.uiState)!=null&&r.mouse)&&(this.uiState.mouse.clicked=!1),t}},get_mouse_x:{type:"NativeFunction",call:function(){var t,e;return((e=(t=this.uiState)==null?void 0:t.mouse)==null?void 0:e.x)||0}},get_mouse_y:{type:"NativeFunction",call:function(){var t,e;return((e=(t=this.uiState)==null?void 0:t.mouse)==null?void 0:e.y)||0}},AL_RED:{r:237,g:28,b:36,a:255},WHITE_ZOMBIE:{r:240,g:240,b:240,a:255},BLACK_MAGIC:{r:16,g:16,b:16,a:255},SPAM_GREEN:{r:0,g:255,b:0,a:255},TWINKIE_GOLD:{r:255,g:242,b:0,a:255},ORANGE_CHEESE:{r:255,g:127,b:39,a:255},SKY_BLUE_FOR_YOU:{r:135,g:206,b:235,a:255},SILVER_SPATULA:{r:200,g:200,b:200,a:255}};let Vn=null;try{typeof require<"u"&&(Vn=require("http"))}catch{console.log("[Like_a_Server] Running in browser mode - server functionality limited")}function Hn(){return typeof window<"u"&&window.serverAPI?window.serverAPI:null}let g={barnIsRaised:!1,churchBellPort:3e3,buggyRoutes:new Map,communityHelpers:[],familySessions:new Map,grainStorages:new Map,actualServer:null};function Yn(){const t=Hn();if(t)return t.startServer(g.churchBellPort);{let e=null;console.log(`[Like_a_Server] DEBUG: typeof require = ${typeof require}`),console.log(`[Like_a_Server] DEBUG: typeof global = ${typeof global}`),console.log(`[Like_a_Server] DEBUG: typeof global.nodeModules = ${typeof global<"u"&&global.nodeModules?typeof global.nodeModules:"undefined"}`);try{typeof global<"u"&&global&&global.nodeModules&&global.nodeModules.http?(console.log("[Like_a_Server] DEBUG: Using http module from global.nodeModules"),e=global.nodeModules.http,console.log("[Like_a_Server] DEBUG: http module loaded successfully from global.nodeModules")):typeof require<"u"?(console.log("[Like_a_Server] DEBUG: require function available, attempting to load http module"),e=require("http"),console.log("[Like_a_Server] DEBUG: http module loaded successfully via require")):typeof global<"u"&&global&&global.require?(console.log("[Like_a_Server] DEBUG: trying global.require"),e=global.require("http"),console.log("[Like_a_Server] DEBUG: http module loaded successfully via global.require")):console.log("[Like_a_Server] DEBUG: No way to access http module, will use mock implementation")}catch(n){console.log(`[Like_a_Server] DEBUG: Error loading http module: ${n.message}`)}if(e)try{return g.actualServer=e.createServer((n,r)=>{const o=n.method,s=n.url,i=`${o}:${s}`;if(g.buggyRoutes.has(i)){const a=g.buggyRoutes.get(i);r.writeHead(200,{"Content-Type":"text/html"}),r.end(`<h1>Amish Paradise Server</h1><p>Route: ${s}</p><p>Handler: ${a}</p>`)}else r.writeHead(404,{"Content-Type":"text/html"}),r.end("<h1>404 - Lost in the Cornfield</h1><p>This buggy trail does not exist!</p>")}),g.actualServer.listen(g.churchBellPort,()=>{g.barnIsRaised=!0,console.log(`[Like_a_Server] Real Amish barn raised on port ${g.churchBellPort}!`),console.log(`[Like_a_Server] Visit http://localhost:${g.churchBellPort} to see your Amish paradise!`)}),g.keepAlive=setInterval(()=>{},1e3),process.on("SIGINT",()=>{console.log("[Like_a_Server] Barn teardown initiated..."),g.actualServer&&g.actualServer.close(),g.keepAlive&&clearInterval(g.keepAlive),process.exit(0)}),27}catch(n){return console.error(`[Like_a_Server] Barn raising failed: ${n.message}`),0}else return g.barnIsRaised=!0,console.log(`[Like_a_Server] Mock Amish barn raised on port ${g.churchBellPort} with community help!`),console.log("[Like_a_Server] Server simulation running - use Ctrl+C to stop"),g.keepAlive=setInterval(()=>{},1e3),27}}const Kn={amish_barn_raising:{type:"NativeFunction",call:function(t){const e=t[0]||3e3;return g.churchBellPort=e,console.log(`[Like_a_Server] Raising the barn on port ${e} with community help...`),Yn()}},amish_barn_teardown:{type:"NativeFunction",call:function(){return g.actualServer&&(g.actualServer.close(()=>{console.log("[Like_a_Server] Real barn torn down for winter, server stopped")}),g.actualServer=null),g.keepAlive&&(clearInterval(g.keepAlive),g.keepAlive=null),g.barnIsRaised=!1,console.log("[Like_a_Server] Barn torn down for winter, server stopped"),27}},amish_barn_still_standing:{type:"NativeFunction",call:function(){return g.barnIsRaised}},amish_buggy_trail_get:{type:"NativeFunction",call:function(t){const[e,n]=t;return g.buggyRoutes.set(`GET:${e}`,n),console.log(`[Like_a_Server] Amish buggy trail (GET) marked: ${e}`),27}},amish_barn_delivery_post:{type:"NativeFunction",call:function(t){const[e,n]=t;return g.buggyRoutes.set(`POST:${e}`,n),console.log(`[Like_a_Server] Barn delivery route (POST) established: ${e}`),27}},amish_quilting_update:{type:"NativeFunction",call:function(t){const[e,n]=t;return g.buggyRoutes.set(`PUT:${e}`,n),console.log(`[Like_a_Server] Quilting pattern update (PUT) route: ${e}`),27}},amish_shunning_delete:{type:"NativeFunction",call:function(t){const[e,n]=t;return g.buggyRoutes.set(`DELETE:${e}`,n),console.log(`[Like_a_Server] Shunning route (DELETE) established: ${e}`),27}},eat_it_extract_body:{type:"NativeFunction",call:function(t){return JSON.stringify({data:"mock request body"})}},like_a_surgeon_slice_params:{type:"NativeFunction",call:function(t){return`mock_param_${t[0]}`}},amish_church_bell_query:{type:"NativeFunction",call:function(t){return`amish_query_${t[0]}`}},amish_hat_headers:{type:"NativeFunction",call:function(t){return`amish_header_${t[0]}`}},amish_butter_churn_json:{type:"NativeFunction",call:function(t){const[e,n]=t;return console.log(`[Like_a_Server] Churning JSON response (${n||200}):`,e),27}},amish_quilt_html_response:{type:"NativeFunction",call:function(t){const[e,n]=t;return console.log(`[Like_a_Server] Sending hand-stitched HTML response (${n||200})`),27}},amish_plain_text_response:{type:"NativeFunction",call:function(t){const[e,n]=t;return console.log(`[Like_a_Server] Sending plain text response (${n||200}):`,e),27}},amish_bonnet_header:{type:"NativeFunction",call:function(t){const[e,n]=t;return console.log(`[Like_a_Server] Setting bonnet header: ${e} = ${n}`),27}},amish_community_helper:{type:"NativeFunction",call:function(t){const e=t[0];return g.communityHelpers.push(e),console.log(`[Like_a_Server] Community helper added: ${e}`),27}},amish_welcome_outsiders:{type:"NativeFunction",call:function(){return console.log("[Like_a_Server] Welcoming outsiders (CORS enabled)"),27}},use_static_files:{type:"NativeFunction",call:function(t){const e=t[0]||"/public";return console.log(`[Like_a_Server] Static files served from: ${e}`),27}},connect_database:{type:"NativeFunction",call:function(t){const[e,n]=t;return serverState.databases.set(e,{connected:!0,connectionString:n}),console.log(`[Like_a_Server] Connected to database: ${e}`),27}},db_insert:{type:"NativeFunction",call:function(t){const[e,n,r]=t;return console.log(`[Like_a_Server] INSERT into ${e}.${n}:`,r),Math.floor(Math.random()*1e3)}},db_select:{type:"NativeFunction",call:function(t){const[e,n,r]=t;return console.log(`[Like_a_Server] SELECT from ${e}.${n} WHERE ${r}`),JSON.stringify([{id:1,data:"mock_result"}])}},db_update:{type:"NativeFunction",call:function(t){const[e,n,r,o]=t;return console.log(`[Like_a_Server] UPDATE ${e}.${n} SET ${r} WHERE ${o}`),1}},db_delete:{type:"NativeFunction",call:function(t){const[e,n,r]=t;return console.log(`[Like_a_Server] DELETE from ${e}.${n} WHERE ${r}`),1}},create_session:{type:"NativeFunction",call:function(t){const e="session_"+Math.random().toString(36).substr(2,9),n=t[0]||{};return serverState.sessions.set(e,n),console.log(`[Like_a_Server] Session created: ${e}`),e}},get_session:{type:"NativeFunction",call:function(t){const e=t[0],n=serverState.sessions.get(e);return n?JSON.stringify(n):null}},update_session:{type:"NativeFunction",call:function(t){const[e,n]=t;return serverState.sessions.has(e)?(serverState.sessions.set(e,n),console.log(`[Like_a_Server] Session updated: ${e}`),27):0}},destroy_session:{type:"NativeFunction",call:function(t){const e=t[0],n=serverState.sessions.delete(e);return console.log(`[Like_a_Server] Session destroyed: ${e}`),n?27:0}},generate_jwt_token:{type:"NativeFunction",call:function(t){const e=t[0]||{},n="jwt_"+Math.random().toString(36).substr(2,20);return console.log("[Like_a_Server] JWT generated for payload:",e),n}},verify_jwt_token:{type:"NativeFunction",call:function(t){const e=t[0],n=e&&e.startsWith("jwt_");return console.log(`[Like_a_Server] JWT verification: ${n?"VALID":"INVALID"}`),n?27:0}},hash_password:{type:"NativeFunction",call:function(t){t[0];const e="hash_"+Math.random().toString(36).substr(2,10);return console.log("[Like_a_Server] Password hashed"),e}},verify_password:{type:"NativeFunction",call:function(t){const[e,n]=t,r=n&&n.startsWith("hash_");return console.log(`[Like_a_Server] Password verification: ${r?"VALID":"INVALID"}`),r?27:0}},amish_fetch:{type:"NativeFunction",call:async function(t){const[e,n,r]=t;try{let o=null;return typeof require<"u"?o=require("http"):typeof global<"u"&&global.nodeModules&&global.nodeModules.http&&(o=global.nodeModules.http),o?new Promise((s,i)=>{const a=o.request(e,{method:n||"GET"},d=>{let u="";d.on("data",c=>u+=c),d.on("end",()=>s(u))});a.on("error",i),n==="POST"&&r&&a.write(r),a.end()}):"[Like_a_Server] No http module available in this environment"}catch(o){return`[Like_a_Server] Fetch error: ${o.message}`}}},log_info:{type:"NativeFunction",call:function(t){const e=t[0];return console.log(`[Like_a_Server] INFO: ${e}`),27}},log_error:{type:"NativeFunction",call:function(t){const e=t[0];return console.error(`[Like_a_Server] ERROR: ${e}`),27}},get_timestamp:{type:"NativeFunction",call:function(){return Date.now()}},amish_scripture_parse:{type:"NativeFunction",call:function(t){try{const e=JSON.parse(t[0]);return JSON.stringify(e)}catch(e){return console.error("[Like_a_Server] Scripture parsing error:",e.message),null}}},amish_scripture_scribe:{type:"NativeFunction",call:function(t){try{return JSON.stringify(t[0])}catch(e){return console.error("[Like_a_Server] Scripture scribing error:",e.message),null}}},dumb_little_placard:{type:"NativeFunction",call:function(t){const e=t[0]||"amish_task";return console.log(`[Like_a_Server] Running ${e} on a single thread (like a simple wooden placard)`),27}},all_of_the_pentiums:{type:"NativeFunction",call:function(t){const e=t[0]||"amish_task",n=t[1]||4;return console.log(`[Like_a_Server] Running ${e} on ${n} threads (ALL OF THE PENTIUMS!)`),27}},check_pentium_power:{type:"NativeFunction",call:function(){const t=typeof navigator<"u"&&navigator.hardwareConcurrency||1;return console.log(`[Like_a_Server] Available Pentium power: ${t} cores`),t}},amish_pentium_sleep:{type:"NativeFunction",call:async function(t){const e=t[0]||0,n=t[1]||0;return console.log(`[Like_a_Server] Pentium ${n} is napping for ${e}ms...`),await new Promise(r=>setTimeout(r,e)),27}}};let b={currentQuilt:null,woodenElements:new Map,plainStyles:new Map,communityListeners:new Map,barnRaisingAnimations:new Map};function x(t,e,n){const r={tag:t,id:e,content:n||"",attributes:new Map,styles:new Map,children:[]};return b.woodenElements.set(e,r),r}const zn={amish_textbook:{type:"NativeFunction",call:function(t){const[e]=t,n=`https://api.duckduckgo.com/?q=${encodeURIComponent(e)}&format=json&no_redirect=1&no_html=1`;return typeof fetch<"u"?fetch(n).then(r=>r.json()).then(r=>r.AbstractText||r.Answer||r.RelatedTopics&&r.RelatedTopics[0]&&r.RelatedTopics[0].Text||"[No answer found]").catch(r=>`[amish_textbook] Error: ${r.message}`):Promise.resolve("[amish_textbook] No fetch available")}},amish_photobook:{type:"NativeFunction",call:function(t){const[e]=t,n=`https://duckduckgo.com/?q=${encodeURIComponent(e)}&iax=images&ia=images`;return Promise.resolve(n)}},amish_wikipedia:{type:"NativeFunction",call:function(t){const[e]=t,n=`https://en.wikipedia.org/api/rest_v1/page/summary/${encodeURIComponent(e)}`;return typeof fetch<"u"?fetch(n).then(r=>r.json()).then(r=>r.extract||"[No summary found]").catch(r=>`[amish_wikipedia] Error: ${r.message}`):Promise.resolve("[amish_wikipedia] No fetch available")}},amish_mail:{type:"NativeFunction",call:async function(t){return console.error("[amish_mail] Called with args:",t),"[amish_mail] This function has been removed."}},amish_quilt_creation:{type:"NativeFunction",call:function(t){const[e,n]=t;return b.currentQuilt={title:e||"Amish YankoviC Web Quilt",lang:n||"en",head:[],body:[]},console.log(`[Weird_Wide_Web] Created Amish web quilt: ${e}`),27}},amish_quilt_blessing:{type:"NativeFunction",call:function(t){const e=t[0];return b.currentQuilt&&(b.currentQuilt.title=e,console.log(`[Weird_Wide_Web] Quilt blessed with title: ${e}`)),27}},amish_wisdom_tag:{type:"NativeFunction",call:function(t){const[e,n]=t;return b.currentQuilt&&(b.currentQuilt.head.push({tag:"meta",name:e,content:n}),console.log(`[Weird_Wide_Web] Wisdom tag added: ${e} = ${n}`)),27}},amish_wooden_box:{type:"NativeFunction",call:function(t){const[e,n]=t;return x("div",e,n),console.log(`[Weird_Wide_Web] Wooden box carved: ${e}`),27}},amish_scripture_text:{type:"NativeFunction",call:function(t){const[e,n]=t;return x("p",e,n),console.log(`[Weird_Wide_Web] Scripture text carved: ${e}`),27}},amish_church_sign:{type:"NativeFunction",call:function(t){const[e,n,r]=t,o=`h${Math.min(Math.max(e,1),6)}`;return x(o,n,r),console.log(`[Weird_Wide_Web] Church sign carved: ${n} (${o})`),27}},amish_wooden_button:{type:"NativeFunction",call:function(t){const[e,n]=t;return x("button",e,n),console.log(`[Weird_Wide_Web] Wooden button carved: ${e}`),27}},amish_text_input:{type:"NativeFunction",call:function(t){const[e,n]=t,r=x("input",e,"");return r.attributes.set("type","text"),r.attributes.set("placeholder",n||""),console.log(`[Weird_Wide_Web] Text input field carved: ${e}`),27}},amish_text_area:{type:"NativeFunction",call:function(t){const[e,n]=t;return x("textarea",e,"").attributes.set("placeholder",n||""),console.log(`[Weird_Wide_Web] Text area carved: ${e}`),27}},amish_wooden_link:{type:"NativeFunction",call:function(t){const[e,n,r]=t;return x("a",e,n).attributes.set("href",r||"#"),console.log(`[Weird_Wide_Web] Wooden link carved: ${e}`),27}},amish_barn_image:{type:"NativeFunction",call:function(t){const[e,n,r]=t,o=x("img",e,"");return o.attributes.set("src",n||""),o.attributes.set("alt",r||"Amish crafted image"),console.log(`[Weird_Wide_Web] Barn image placed: ${e}`),27}},amish_wooden_list:{type:"NativeFunction",call:function(t){const[e,n]=t,r=n?"ol":"ul";return x(r,e,""),console.log(`[Weird_Wide_Web] Wooden list carved: ${e} (${r})`),27}},amish_list_item:{type:"NativeFunction",call:function(t){const[e,n]=t;return x("li",e,n),console.log(`[Weird_Wide_Web] List item carved: ${e}`),27}},amish_plain_style:{type:"NativeFunction",call:function(t){const[e,n,r]=t,o=b.woodenElements.get(e);return o&&(o.styles.set(n,r),console.log(`[Weird_Wide_Web] Plain style applied to ${e}: ${n} = ${r}`)),27}},amish_bonnet_class:{type:"NativeFunction",call:function(t){const[e,n]=t,r=b.woodenElements.get(e);return r&&(r.attributes.set("class",n),console.log(`[Weird_Wide_Web] Bonnet class added to ${e}: ${n}`)),27}},amish_hide_element:{type:"NativeFunction",call:function(t){const e=t[0],n=b.woodenElements.get(e);return n&&(n.styles.set("display","none"),console.log(`[Weird_Wide_Web] Element hidden: ${e}`)),27}},amish_show_element:{type:"NativeFunction",call:function(t){const e=t[0],n=b.woodenElements.get(e);return n&&(n.styles.set("display","block"),console.log(`[Weird_Wide_Web] Element shown: ${e}`)),27}},amish_community_gathering:{type:"NativeFunction",call:function(t){const[e,n,r]=t,o=`${e}:${n}`;return b.communityListeners.set(o,r),console.log(`[Weird_Wide_Web] Community gathering planned for ${e} on ${n}`),27}},amish_harvest_text:{type:"NativeFunction",call:function(t){const e=t[0],n=b.woodenElements.get(e);return n&&(n.tag==="input"||n.tag==="textarea")?`harvested_text_from_${e}`:""}},amish_clear_text:{type:"NativeFunction",call:function(t){const e=t[0],n=b.woodenElements.get(e);return n&&(n.tag==="input"||n.tag==="textarea")&&(n.content="",console.log(`[Weird_Wide_Web] Text cleared from ${e}`)),27}},amish_community_announcement:{type:"NativeFunction",call:function(t){const e=t[0];return console.log(`[Weird_Wide_Web] Community announcement: ${e}`),27}},amish_barn_fade_in:{type:"NativeFunction",call:function(t){const[e,n]=t;return console.log(`[Weird_Wide_Web] Barn fade-in animation for ${e} over ${n||1e3}ms`),27}},amish_barn_fade_out:{type:"NativeFunction",call:function(t){const[e,n]=t;return console.log(`[Weird_Wide_Web] Barn fade-out animation for ${e} over ${n||1e3}ms`),27}},amish_wooden_slide:{type:"NativeFunction",call:function(t){const[e,n,r]=t;return console.log(`[Weird_Wide_Web] Wooden slide animation for ${e}: ${n} ${r}px`),27}},amish_fetch:{type:"NativeFunction",call:async function(t){const[e,n,r]=t;try{let o;return typeof fetch<"u"?(o=await fetch(e,{method:n||"GET",headers:{"Content-Type":"text/plain"},body:n==="POST"?r:void 0}),await o.text()):typeof window<"u"&&window.webAPI&&window.webAPI.fetch?await window.webAPI.fetch(e,n,r):"[Weird_Wide_Web] No fetch available in this environment"}catch(o){return`[Weird_Wide_Web] Fetch error: ${o.message}`}}},amish_quilt_display:{type:"NativeFunction",call:function(){if(b.currentQuilt){console.log("[Weird_Wide_Web] Displaying Amish web quilt...");const t=Gn();if(console.log("Generated HTML:",t),typeof global<"u"&&global.yankovicFileAPI)try{const e=global.yankovicFileAPI,r=`amish_quilt_${Date.now()}.html`,o=`temp_web/${r}`,s=e.writeFile(o,t);console.log(`[Weird_Wide_Web] Amish quilt saved to: ${s}`),e.openInBrowser(s),console.log("[Weird_Wide_Web] Opening Amish quilt in browser..."),b.currentQuilt.tempFile=s,setTimeout(()=>{try{e.deleteFile(s)&&console.log(`[Weird_Wide_Web] Cleaned up temp file: ${r}`)}catch(i){console.log(`[Weird_Wide_Web] Could not clean up temp file: ${i.message}`)}},3e4)}catch(e){console.log(`[Weird_Wide_Web] Browser opening failed: ${e.message}`)}else console.log("[Weird_Wide_Web] File API not available - HTML display only");return 27}return console.log("[Weird_Wide_Web] No quilt to display!"),0}},amish_add_to_quilt:{type:"NativeFunction",call:function(t){const[e,n]=t,r=b.woodenElements.get(e),o=b.woodenElements.get(n);return r&&o&&(r.children.push(n),console.log(`[Weird_Wide_Web] Added ${n} to ${e}`)),27}},amish_single_worker:{type:"NativeFunction",call:function(t){const e=t[0]||"amish_web_task";return console.log(`[Weird_Wide_Web] ${e} handled by a single Amish worker (Dumb Little Placard style)`),27}},amish_whole_community:{type:"NativeFunction",call:function(t){const e=t[0]||"amish_web_task",n=t[1]||4;return console.log(`[Weird_Wide_Web] ${e} handled by ${n} Amish workers (ALL OF THE PENTIUMS community style!)`),27}},amish_headcount:{type:"NativeFunction",call:function(){const t=typeof navigator<"u"&&navigator.hardwareConcurrency||1;return console.log(`[Weird_Wide_Web] Available Amish community members: ${t}`),t}},amish_barn_cleanup:{type:"NativeFunction",call:function(){if(typeof global<"u"&&global.yankovicFileAPI)try{const t=global.yankovicFileAPI;if(b.currentQuilt&&b.currentQuilt.tempFile){const e=b.currentQuilt.tempFile;t.deleteFile(e)&&(console.log("[Weird_Wide_Web] Manually cleaned up temp file"),delete b.currentQuilt.tempFile)}return 27}catch(t){return console.log(`[Weird_Wide_Web] Cleanup failed: ${t.message}`),0}else return console.log("[Weird_Wide_Web] File API not available for cleanup"),0}},amish_mail:{type:"NativeFunction",call:async function(t){const e=t[0]||"",n=t[1]||"openai",r=t[2]||null,o=t[3]||`You are a helpful asistant written in the programming language of YankoviC, inspired completely by Weird Al Yankovic. You will perform any request given to you, and act in any way the user asks. You're name is "Al"`;let s=`https://text.pollinations.ai/${encodeURIComponent(e)}?model=${encodeURIComponent(n)}`,i={"Content-Type":"text/plain"};r&&(i.Authorization=`Bearer ${r}`),i["X-System-Prompt"]=o;try{return typeof fetch<"u"?await(await fetch(s,{method:"GET",headers:i})).text():typeof window<"u"&&window.webAPI&&window.webAPI.fetch?await window.webAPI.fetch(s,"GET",null,i):"[amish_mail] No fetch available in this environment"}catch(a){return`[amish_mail] Error: ${a.message}`}}},amish_pentium_sleep:{type:"NativeFunction",call:async function(t){const e=t[0]||0,n=t[1]||0;return console.log(`[Weird_Wide_Web] Pentium ${n} is napping for ${e}ms...`),await new Promise(r=>setTimeout(r,e)),27}}};function Gn(){if(!b.currentQuilt)return"";let t=`<!DOCTYPE html>
`;t+=`<html lang="${b.currentQuilt.lang}">
`,t+=`<head>
`,t+=`  <title>${b.currentQuilt.title}</title>
`;for(const e of b.currentQuilt.head)t+=`  <meta name="${e.name}" content="${e.content}">
`;t+=`</head>
<body>
`;for(const[e,n]of b.woodenElements)Jn(e)||(t+=it(n));return t+=`</body>
</html>`,t}function Jn(t){for(const[e,n]of b.woodenElements)if(n.children.includes(t))return!0;return!1}function it(t){let e=`<${t.tag}`;e+=` id="${t.id}"`;for(const[n,r]of t.attributes)e+=` ${n}="${r}"`;if(t.styles.size>0){let n="";for(const[r,o]of t.styles)n+=`${r}: ${o}; `;e+=` style="${n}"`}if(["img","input","br","hr","meta","link"].includes(t.tag))e+=" />";else{e+=">",t.content&&(e+=t.content);for(const n of t.children){const r=b.woodenElements.get(n);r&&(e+=it(r))}e+=`</${t.tag}>`}return e+`
`}function F(){if(typeof window<"u"&&window.require)try{const t=window.require("fs"),e=window.require("path"),n=window.require("os"),{exec:r}=window.require("child_process");return{fs:t,path:e,os:n,exec:r}}catch{return console.warn("File system API not available in this context"),null}return null}function Qn(){const t=Math.random();return t<.85?0:t<.95?1:t<.99?2:3}const Xn={legally_named_reggie:{type:"NativeFunction",call:function(t){const[e,n]=t,r=F();if(!r)return console.log(`[VIRUS_ALERT] Would rename "${e}" to "${n}" (simulation mode)`),!0;try{return r.fs.renameSync(e,n),console.log(`[VIRUS_ALERT] File legally renamed to: ${n}`),!0}catch(o){return console.error(`[VIRUS_ALERT] Failed to rename file: ${o.message}`),!1}}},stinky_cheese:{type:"NativeFunction",call:function(t){const[e]=t,n=F();if(!n)return console.log(`[VIRUS_ALERT] Would delete "${e}" (simulation mode)`),!0;try{return n.fs.unlinkSync(e),console.log(`[VIRUS_ALERT] Stinky file deleted: ${e}`),!0}catch(r){return console.error(`[VIRUS_ALERT] Failed to delete file: ${r.message}`),!1}}},forward_to_a_friend:{type:"NativeFunction",call:function(t){const[e,n]=t,r=F();if(!r)return console.log(`[VIRUS_ALERT] Would copy "${e}" to "${n}" (simulation mode)`),!0;try{return r.fs.copyFileSync(e,n),console.log(`[VIRUS_ALERT] File forwarded to: ${n}`),!0}catch(o){return console.error(`[VIRUS_ALERT] Failed to copy file: ${o.message}`),!1}}},check_your_hard_drive:{type:"NativeFunction",call:function(t){const[e]=t,n=F();if(!n)return console.log(`[VIRUS_ALERT] Would check "${e}" (simulation mode)`),{exists:!0,size:1024,modified:new Date().toISOString()};try{const r=n.fs.statSync(e);return{exists:!0,size:r.size,modified:r.mtime.toISOString(),isDirectory:r.isDirectory(),isFile:r.isFile()}}catch{return{exists:!1}}}},open_every_file:{type:"NativeFunction",call:function(t){const[e]=t,n=F();if(!n)return console.log(`[VIRUS_ALERT] Would list files in "${e}" (simulation mode)`),["file1.txt","file2.txt","suspicious.exe"];try{const r=n.fs.readdirSync(e);return console.log(`[VIRUS_ALERT] Found ${r.length} files in ${e}`),r}catch(r){return console.error(`[VIRUS_ALERT] Failed to read directory: ${r.message}`),[]}}},really_big_attachment:{type:"NativeFunction",call:function(t){const[e]=t,n=F();if(!n)return console.log(`[VIRUS_ALERT] Would check size of "${e}" (simulation mode)`),1024e3;try{return n.fs.statSync(e).size}catch(r){return console.error(`[VIRUS_ALERT] Failed to get file size: ${r.message}`),0}}},make_a_backup_folder:{type:"NativeFunction",call:function(t){const[e]=t,n=F();if(!n)return console.log(`[VIRUS_ALERT] Would create directory "${e}" (simulation mode)`),!0;try{return n.fs.mkdirSync(e,{recursive:!0}),console.log(`[VIRUS_ALERT] Backup folder created: ${e}`),!0}catch(r){return console.error(`[VIRUS_ALERT] Failed to create directory: ${r.message}`),!1}}},delete_your_homework:{type:"NativeFunction",call:function(t){const[e]=t,n=F();if(!n)return console.log(`[VIRUS_ALERT] Would delete directory "${e}" (simulation mode)`),!0;try{return n.fs.rmdirSync(e),console.log(`[VIRUS_ALERT] Directory deleted: ${e}`),!0}catch(r){return console.error(`[VIRUS_ALERT] Failed to delete directory: ${r.message}`),!1}}},change_your_password_location:{type:"NativeFunction",call:function(t){const[e]=t;if(!F())return console.log(`[VIRUS_ALERT] Would change to directory "${e}" (simulation mode)`),!0;try{return process.chdir(e),console.log(`[VIRUS_ALERT] Changed to directory: ${e}`),!0}catch(r){return console.error(`[VIRUS_ALERT] Failed to change directory: ${r.message}`),!1}}},where_am_i_now:{type:"NativeFunction",call:function(){return F()?process.cwd():(console.log("[VIRUS_ALERT] Current directory (simulation): /home/user"),"/home/user")}},run_suspicious_program:{type:"NativeFunction",call:function(t){const[e]=t,n=F();return n?new Promise(r=>{n.exec(e,(o,s,i)=>{o?(console.error(`[VIRUS_ALERT] Command failed: ${o.message}`),r(`Error: ${o.message}`)):r(s||i||"Command completed")})}):(console.log(`[VIRUS_ALERT] Would run command "${e}" (simulation mode)`),"Command executed (simulation)")}},terminate_everything:{type:"NativeFunction",call:function(){if(console.log("[VIRUS_ALERT] PANIC BUTTON ACTIVATED! Terminating..."),typeof process<"u")process.exit(1);else throw new Error("VIRUS_ALERT: Emergency termination!")}},check_running_programs:{type:"NativeFunction",call:function(){const t=F();return t?new Promise(e=>{const n=process.platform==="win32"?"tasklist":"ps aux";t.exec(n,(r,o)=>{e(r?["Error getting process list"]:o.split(`
`).slice(0,10))})}):(console.log("[VIRUS_ALERT] Running programs (simulation): chrome, vscode, suspicious.exe"),["chrome","vscode","suspicious.exe"])}},kill_the_process:{type:"NativeFunction",call:function(t){const[e]=t;if(!F())return console.log(`[VIRUS_ALERT] Would kill process ${e} (simulation mode)`),!0;try{return process.kill(e),console.log(`[VIRUS_ALERT] Process ${e} terminated!`),!0}catch(r){return console.error(`[VIRUS_ALERT] Failed to kill process: ${r.message}`),!1}}},scan_your_system:{type:"NativeFunction",call:function(){const t=F();return t?{platform:t.os.platform(),arch:t.os.arch(),memory:`${Math.round(t.os.totalmem()/1024/1024/1024)}GB`,uptime:`${Math.round(t.os.uptime()/3600)} hours`}:{platform:"simulation",arch:"x64",memory:"8GB",uptime:"24 hours"}}},check_available_memory:{type:"NativeFunction",call:function(){const t=F();return t?t.os.freemem():(console.log("[VIRUS_ALERT] Available memory (simulation): 4GB"),4*1024*1024*1024)}},get_virus_count:{type:"NativeFunction",call:function(){const t=Qn();return console.log(`[VIRUS_ALERT] Virus scan complete: ${t} threats detected`),t}},format_your_hard_drive:{type:"NativeFunction",call:function(){return console.log("[VIRUS_ALERT] JUST KIDDING! Not actually formatting anything!"),console.log("[VIRUS_ALERT] This function is safe - it does absolutely nothing!"),"Phew! Your data is safe. This was just a joke function!"}},send_to_everyone_you_know:{type:"NativeFunction",call:function(t){const[e]=t;return console.log(`[VIRUS_ALERT] Simulating broadcast: "${e}"`),console.log("[VIRUS_ALERT] (Not actually sending to anyone - this is safe!)"),"Message broadcast simulated (safely)"}},disconnect_the_internet:{type:"NativeFunction",call:function(){return console.log("[VIRUS_ALERT] Simulating internet disconnection..."),console.log("[VIRUS_ALERT] (Your internet is still connected - this is just for fun!)"),'Internet "disconnected" (simulation only)'}},check_suspicious_traffic:{type:"NativeFunction",call:function(){const t=Math.floor(Math.random()*5);return console.log(`[VIRUS_ALERT] Network scan complete: ${t} suspicious connections found`),{suspicious_connections:t,total_connections:Math.floor(Math.random()*50)+10,status:t>2?"ALERT":"OK"}}}};class H{constructor(e=null){this.parent=e,this.variables=new Map}set(e,n,r=!1){if(this.variables.has(e)&&this.variables.get(e).isStupid)throw new Error(`Word Crime! Cannot reassign a 'stupid' variable: ${e}`);this.variables.set(e,{value:n,isStupid:r})}assign(e,n){if(this.variables.has(e)){if(this.variables.get(e).isStupid)throw new Error(`Word Crime! Cannot reassign a 'stupid' variable: ${e}`);return this.variables.set(e,{...this.variables.get(e),value:n})}if(this.parent)return this.parent.assign(e,n);throw new Error(`Reference Error: Cannot assign to undeclared variable '${e}'.`)}get(e){if(this.variables.has(e))return this.variables.get(e).value;if(this.parent)return this.parent.get(e);if(this.parent===null&&globalThis.interpreter&&globalThis.interpreter.globalScope.variables.has(e))return globalThis.interpreter.globalScope.get(e);throw new Error(`Reference Error: The variable '${e}' is not defined. What're you thinkin'?`)}}class Tr{constructor({printFunction:e,streamPrintFunction:n,inputFunction:r,libraryOverrides:o={}}={}){this.globalScope=new H,this.outputBuffer=[],this.libraries=new Map,this.polkaLoop=!1,this.frameCount=0,this.maxFrames=null,this.isFrameRunning=!1,this.activeSagas=[],this.libraryOverrides=o,this.declaredLunchboxTypes=new Set,this.imports=new Set,this.printFunction=e||(s=>this.outputBuffer.push(s)),this.streamPrintFunction=n||(s=>{const i=this.outputBuffer.length>0?this.outputBuffer.pop():"";this.outputBuffer.push(i+s)}),this.inputFunction=r||(()=>Promise.resolve("")),this.initializeStandardLibrary(),globalThis.interpreter=this}log(e){this.printFunction(e)}initializeStandardLibrary(){if(this.globalScope.set("perform_a_parody",{type:"NativeFunction",call:e=>{if(e.length===0)return;let n=e[0],r=1;const o=n.replace(/%(\w+)/g,(s,i)=>{if(r<e.length){const a=e[r++];return i==="verse"?String(a):i==="spatula"?Number(a):i==="horoscope"?a?"its_a_fact":"total_baloney":s}return s});this.printFunction(o)}}),this.globalScope.set("string_along",{type:"NativeFunction",call:e=>{this.streamPrintFunction(e.join(" "))}}),this.globalScope.set("the_saga_begins",{type:"NativeFunction",call:e=>{const[n,...r]=e,o=this.globalScope.get(n);if(!o)throw new Error(`Function '${n}' not found for the_saga_begins.`);const s=this.callFunction(o,r,this.globalScope).catch(i=>console.error(`[SAGA] Error in background saga '${n}':`,i));return this.activeSagas.push(s),this.activeSagas.length}}),this.globalScope.set("wait_for_the_saga_to_end",{type:"NativeFunction",call:async()=>(await Promise.all(this.activeSagas),this.activeSagas=[],null)}),this.globalScope.set("flesh_eating_weasels",{type:"NativeFunction",call:async e=>{const n=e[0]||"";if(this.inputProvider)return this.inputProvider(n);if(typeof process<"u"&&process.stdin.isTTY)try{const o=(await Mn(()=>import("./__vite-browser-external-BIHI7g3E.js"),[])).createInterface({input:process.stdin,output:process.stdout});return new Promise(s=>{o.question(n,i=>{o.close(),s(i)})})}catch(r){return this.log(`FATAL WORD CRIME: Could not initialize CLI input. ${r.message}`),""}return this.log("FATAL WORD CRIME: CLI input is not supported in this environment."),""}}),Object.keys(this.libraryOverrides).length>0)for(const[e,n]of Object.entries(this.libraryOverrides))typeof n=="function"?this.globalScope.set(e,{type:"NativeFunction",call:n}):this.globalScope.set(e,n);return this.globalScope}lexer(e){const n=[[/^\s+/,null],[/^\/\/.*/,null],[/\/\*[\s\S]*?\*\//,null],[/^#eat\s+(<\s*[^>]+\s*>|"\s*[^\"]+\s*"|[.\/a-zA-Z0-9_\-]+\.(?:hat|yc))(\s*\/\/.*)?/,"DIRECTIVE"],[/^lunchbox/,"LUNCHBOX_KEYWORD"],[/^on_the_menu|^private_stash/,"VISIBILITY_KEYWORD"],[/^spatula|^lasagna|^lyric|^verse|^horoscope|^accordion_solo/,"TYPE_KEYWORD"],[/^jeopardy|^another_one|^polka|^hardware_store/,"CONTROL_KEYWORD"],[/^twinkie_wiener_sandwich/,"RETURN_KEYWORD"],[/^stupid/,"CONST_KEYWORD"],[/^its_a_fact|^total_baloney/,"BOOLEAN"],[/^\d+\.\d+/,"NUMBER"],[/^\d+/,"NUMBER"],[/^"([^"]*)"/,"STRING"],[/^'([^']*)'/,"STRING"],[/^(?:\|\||&&|==|!=|<=|>=|[=+*\/><!%-])/,"OPERATOR"],[/^[a-zA-Z_][a-zA-Z0-9_]*/,"IDENTIFIER"],[/^\./,"DOT"],[/^[{};(),]/,"PUNCTUATION"]];let r=[],o=0;for(;o<e.length;){let s=null;for(const[i,a]of n){const d=i.exec(e.slice(o));if(d){s={value:d[0],type:a,raw:d[1]};break}}if(!s)throw new Error(`Syntax Error: Unexpected character at position ${o}: ${e[o]}`);if(s.type){const i=s.type==="STRING"?s.raw||s.value.slice(1,-1):s.value,a={type:s.type,value:i};r.push(a)}o+=s.value.length}return r.push({type:"EOF",value:"EOF"}),r}currentToken(){return this.tokens[this.pos]}peekToken(e=1){return this.tokens[this.pos+e]}consume(e,n=null){const r=this.currentToken();if(r.type===e&&(n===null||r.value===n))return this.pos++,r;throw new Error(`Parse Error: Expected ${e} ('${n||"any"}') but got ${r.type} ('${r.value}')`)}parseProgram(){const e={type:"Program",body:[]};for(;this.currentToken().type!=="EOF";)e.body.push(this.parseTopLevelDeclaration());return e}parseTopLevelDeclaration(){var s;const e=this.currentToken();if(e.type==="DIRECTIVE"){const i={type:"Directive",value:e.value};return this.pos++,i}if(e.type==="LUNCHBOX_KEYWORD")return this.parseLunchboxDeclaration();const n=this.peekToken(1),r=this.peekToken(2);return e.type==="TYPE_KEYWORD"&&(n==null?void 0:n.type)==="IDENTIFIER"&&(r==null?void 0:r.value)==="("||e.type==="VISIBILITY_KEYWORD"&&(n==null?void 0:n.type)==="TYPE_KEYWORD"&&(r==null?void 0:r.type)==="IDENTIFIER"&&((s=this.peekToken(3))==null?void 0:s.value)==="("?this.parseFunctionDeclaration():this.parseStatement()}parseLunchboxDeclaration(){this.consume("LUNCHBOX_KEYWORD","lunchbox");const e=this.consume("IDENTIFIER").value;this.declaredLunchboxTypes.add(e),this.consume("PUNCTUATION","{");const n=[];for(;this.currentToken().value!=="}";){const r=this.consume("TYPE_KEYWORD").value,o=this.consume("IDENTIFIER").value;n.push({name:o,type:r}),this.consume("PUNCTUATION",";")}return this.consume("PUNCTUATION","}"),this.currentToken().value===";"&&this.consume("PUNCTUATION",";"),{type:"LunchboxDeclaration",name:e,fields:n}}parseFunctionDeclaration(){let e="public";this.currentToken().type==="VISIBILITY_KEYWORD"&&(e=this.consume("VISIBILITY_KEYWORD").value==="on_the_menu"?"public":"private");const n=this.consume("TYPE_KEYWORD").value,r=this.consume("IDENTIFIER").value;this.consume("PUNCTUATION","(");const o=[];if(this.currentToken().value!==")")do{this.currentToken().value===","&&this.consume("PUNCTUATION",",");const i=this.consume("TYPE_KEYWORD"),a=this.consume("IDENTIFIER").value;o.push({type:"Parameter",name:a,varType:i.value})}while(this.currentToken().value===",");this.consume("PUNCTUATION",")");const s=this.parseBlock();return{type:"FunctionDeclaration",name:r,returnType:n,params:o,body:s,visibility:e}}parseStatement(){var n;const e=this.currentToken();if(e.value==="dare_to_be_stupid")return this.parseTryCatchStatement();if(e.type==="CONST_KEYWORD"||e.type==="TYPE_KEYWORD")return this.parseVariableDeclaration();if(e.type==="IDENTIFIER")return this.declaredLunchboxTypes.has(e.value)&&((n=this.peekToken())==null?void 0:n.type)==="IDENTIFIER"?this.parseVariableDeclaration():this.parseExpressionStatement();if(e.type==="RETURN_KEYWORD")return this.parseReturnStatement();if(e.value==="jeopardy")return this.parseIfStatement();if(e.value==="hardware_store")return this.parseHardwareStoreStatement();if(e.value==="polka")return this.parsePolkaStatement();if(e.value==="{")return this.parseBlock();if(e.value===";")return this.pos++,{type:"EmptyStatement"};throw new Error(`Parse Error: Unexpected token at start of statement: '${e.value}'`)}parseBlock(){const e={type:"BlockStatement",body:[]};for(this.consume("PUNCTUATION","{");this.currentToken().value!=="}";)e.body.push(this.parseStatement());return this.consume("PUNCTUATION","}"),e}parseVariableDeclaration(e=!1){let n=!1;this.currentToken().type==="CONST_KEYWORD"&&(n=!0,this.consume("CONST_KEYWORD"));const r=this.consume(this.currentToken().type==="TYPE_KEYWORD"?"TYPE_KEYWORD":"IDENTIFIER"),o=this.consume("IDENTIFIER").value;let s=null;return this.currentToken().value==="="&&(this.consume("OPERATOR","="),s=this.parseExpression()),e||this.consume("PUNCTUATION",";"),{type:"VariableDeclaration",id:o,varType:r.value,init:s,isStupid:n}}parseHardwareStoreStatement(){this.consume("CONTROL_KEYWORD","hardware_store"),this.consume("PUNCTUATION","(");let e=null;this.currentToken().value!==";"?e=this.parseVariableDeclaration(!0):this.consume("PUNCTUATION",";");let n=null;this.currentToken().value!==";"&&(n=this.parseExpression()),this.consume("PUNCTUATION",";");let r=null;this.currentToken().value!==")"&&(r=this.parseExpression()),this.consume("PUNCTUATION",")");const o=this.parseStatementOrBlock();return{type:"HardwareStoreStatement",init:e,test:n,update:r,body:o}}parsePolkaStatement(){this.consume("CONTROL_KEYWORD","polka"),this.consume("PUNCTUATION","(");const e=this.parseExpression();this.consume("PUNCTUATION",")");const n=this.parseStatementOrBlock();return{type:"PolkaStatement",test:e,body:n}}parseReturnStatement(){this.consume("RETURN_KEYWORD");const e=this.parseExpression();return this.consume("PUNCTUATION",";"),{type:"ReturnStatement",argument:e}}parseIfStatement(){this.consume("CONTROL_KEYWORD","jeopardy"),this.consume("PUNCTUATION","(");const e=this.parseExpression();this.consume("PUNCTUATION",")");const n=this.parseStatementOrBlock();let r=null;return this.currentToken().value==="another_one"&&(this.consume("CONTROL_KEYWORD"),r=this.parseStatementOrBlock()),{type:"IfStatement",test:e,consequent:n,alternate:r}}parseExpressionStatement(){if(this.currentToken().value==="stop_forwarding_that_crap")return this.parseSleepStatement();const e=this.parseExpression();return this.consume("PUNCTUATION",";"),{type:"ExpressionStatement",expression:e}}parseTryCatchStatement(){this.consume("IDENTIFIER","dare_to_be_stupid");const e=this.parseBlock();let n=null,r=null;return this.currentToken().value==="put_down_the_chainsaw"&&(this.consume("IDENTIFIER","put_down_the_chainsaw"),this.consume("PUNCTUATION","("),n=this.consume("IDENTIFIER").value,this.consume("PUNCTUATION",")"),r=this.parseBlock()),{type:"TryCatchStatement",tryBlock:e,catchParam:n,catchBlock:r}}parseStatementOrBlock(){return this.currentToken().value==="{"?this.parseBlock():this.parseStatement()}parseSleepStatement(){this.consume("IDENTIFIER","stop_forwarding_that_crap");let e=0,n=null;return this.currentToken().value!==";"&&(e=this.parseExpression(),this.currentToken().value!==";"&&(n=this.parseExpression())),this.consume("PUNCTUATION",";"),{type:"SleepStatement",duration:e,pentium:n}}parseExpression(){return this.parseAssignmentExpression()}parseAssignmentExpression(){const e=this.parseBinaryExpression();if(this.currentToken().value==="="){this.consume("OPERATOR");const n=this.parseAssignmentExpression();if(e.type!=="Identifier"&&e.type!=="MemberExpression")throw new Error("Parse Error: Invalid assignment target.");return{type:"AssignmentExpression",left:e,right:n}}return e}parseBinaryExpression(e=0){let n=this.parseUnaryExpression();for(;;){const r=this.currentToken();if(r.type!=="OPERATOR"||this.getOperatorPrecedence(r.value)<=e)break;const o=this.getOperatorPrecedence(r.value);this.consume("OPERATOR");const s=this.parseBinaryExpression(o);n={type:"BinaryExpression",operator:r.value,left:n,right:s}}return n}parseUnaryExpression(){if(this.currentToken().value==="!"||this.currentToken().value==="-"){const e=this.consume("OPERATOR").value,n=this.parseUnaryExpression();return{type:"UnaryExpression",operator:e,right:n}}return this.parseMemberAccessExpression()}getOperatorPrecedence(e){switch(e){case"||":return 1;case"&&":return 2;case"==":case"!=":return 3;case"<":case">":case"<=":case">=":return 4;case"+":case"-":return 5;case"*":case"/":return 6;default:return 0}}parseMemberAccessExpression(){let e=this.parsePrimary();for(;this.currentToken().type==="DOT";){this.consume("DOT");const n=this.consume("IDENTIFIER");e={type:"MemberExpression",object:e,property:{type:"Identifier",name:n.value}}}return e}parsePrimary(){var n;const e=this.currentToken();if(e.type==="NUMBER")return this.pos++,{type:"Literal",value:parseFloat(e.value)};if(e.type==="STRING")return this.pos++,{type:"Literal",value:e.value};if(e.type==="BOOLEAN")return this.pos++,{type:"Literal",value:e.value==="its_a_fact"};if(e.type==="IDENTIFIER")return((n=this.peekToken())==null?void 0:n.value)==="("?this.parseCallExpression():(this.pos++,{type:"Identifier",name:e.value});if(e.value==="("){this.consume("PUNCTUATION","(");const r=this.parseExpression();return this.consume("PUNCTUATION",")"),r}throw new Error(`Parse Error: Unexpected token ${e.type} ('${e.value}')`)}parseCallExpression(){const e=this.consume("IDENTIFIER").value;this.consume("PUNCTUATION","(");const n=[];if(this.currentToken().value!==")")do this.currentToken().value===","&&this.consume("PUNCTUATION",","),n.push(this.parseExpression());while(this.currentToken().value===",");return this.consume("PUNCTUATION",")"),{type:"CallExpression",callee:e,args:n}}async interpret(e,n){if(e)switch(e.type){case"Program":for(const h of e.body)h.type==="Directive"?await this.processImport(h,n):await this.interpret(h,n);const r=n.get("want_a_new_duck");r&&await this.callFunction(r,[],n);return;case"Directive":return;case"EmptyStatement":return;case"LunchboxDeclaration":n.set(e.name,{type:"LunchboxDefinition",name:e.name,fields:e.fields});return;case"FunctionDeclaration":const o={type:"Function",name:e.name,params:e.params,body:e.body,closure:n,visibility:e.visibility||"public"};n.set(e.name,o);return;case"BlockStatement":const s=new H(n);for(const h of e.body)if(await this.interpret(h,s),this.polkaLoop&&!this.isFrameRunning)return;return;case"HardwareStoreStatement":const i=new H(n);for(e.init&&await this.interpret(e.init,i);;){if(this.polkaLoop)return;let h=!0;if(e.test&&(h=await this.interpret(e.test,i)),!h)break;if(await this.interpret(e.body,i),this.polkaLoop)return;e.update&&await this.interpret(e.update,i)}return;case"PolkaStatement":this.polkaLoop={test:e.test,body:e.body,scope:new H(n)},this.log("Polka loop initialized and ready for frame-based execution.");return;case"VariableDeclaration":let a=e.init?await this.interpret(e.init,n):void 0;n.set(e.id,a,e.isStupid);return;case"ExpressionStatement":await this.interpret(e.expression,n);return;case"IfStatement":await this.interpret(e.test,n)?await this.interpret(e.consequent,n):e.alternate&&await this.interpret(e.alternate,n);return;case"ReturnStatement":throw{isReturnValue:!0,value:await this.interpret(e.argument,n)};case"AssignmentExpression":const d=await this.interpret(e.right,n);if(e.left.type==="Identifier")n.assign(e.left.name,d);else if(e.left.type==="MemberExpression"){const h=await this.interpret(e.left.object,n);if(typeof h!="object"||h===null)throw new Error("Runtime Error: Cannot assign to property of a non-lunchbox value.");h[e.left.property.name]=d}return d;case"UnaryExpression":const u=await this.interpret(e.right,n);switch(e.operator){case"!":return!u;case"-":return-u}return;case"BinaryExpression":const c=await this.interpret(e.left,n);if(e.operator==="||")return c||await this.interpret(e.right,n);if(e.operator==="&&")return c&&await this.interpret(e.right,n);const f=await this.interpret(e.right,n);switch(e.operator){case"+":return c+f;case"-":return c-f;case"*":return c*f;case"/":return c/f;case"%":return c%f;case"==":return c===f;case"!=":return c!==f;case"<":return c<f;case">":return c>f;case"<=":return c<=f;case">=":return c>=f}return;case"MemberExpression":const _=await this.interpret(e.object,n);if(typeof _!="object"||_===null)throw new Error(`Runtime Error: Cannot access property '${e.property.name}' of a non-lunchbox value.`);return _[e.property.name];case"CallExpression":const E=n.get(e.callee);if(!E||typeof E.call!="function"&&E.type!=="Function")throw new Error(`Runtime Error: '${e.callee}' is not a function.`);const p=[];for(const h of e.args)p.push(await this.interpret(h,n));return await this.callFunction(E,p,n);case"Identifier":return n.get(e.name);case"Literal":return e.value;default:throw new Error(`Interpret Error: Unknown AST node type ${e.type}`)}}async callFunction(e,n,r){if(!e)throw new Error("Attempted to call a non-existent function.");if(e.type==="NativeFunction"){const i=e.call.bind(this)(n);return await Promise.resolve(i)}if(e.type!=="Function")throw new Error(`'${e.name}' is not a function.`);const o=new H(e.closure);e.params.forEach((s,i)=>{o.set(s.name,n[i])});try{await this.interpret(e.body,o)}catch(s){if(s.isReturnValue)return s.value;throw s}}async runFrame(){if(!this.polkaLoop)return null;this.frameCount++,this.isRunningFrame=!0;try{return await this.interpret(this.polkaLoop.test,this.polkaLoop.scope)?(await this.interpret(this.polkaLoop.body,this.polkaLoop.scope),this.isRunningFrame=!1,this.drawCommandBuffer):(this.stopLoop(),this.isRunningFrame=!1,null)}catch(e){return this.log(`FATAL WORD CRIME in loop: ${e.message}`),this.stopLoop(),this.isRunningFrame=!1,null}}stopLoop(){this.polkaLoop&&(typeof window<"u"&&window.uhfAPI&&window.uhfAPI.cancelTheShow(),this.polkaLoop=null,this.showIsOver=!0)}async run(e,n=null){this.outputBuffer=[],this.pos=0,this.polkaLoop=null,this.showIsOver=!1,this.frameCount=0,this.drawCommandBuffer=[],this.code=e,this.currentFilePath=n||null;let r=27;try{this.tokens=this.lexer(e);const o=this.parseProgram();await this.interpret(o,this.globalScope),this.polkaLoop?this.log("Graphics program initialized. Polka loop is now running..."):this.log("Program finished.")}catch(o){console.error("YankoviC Interpreter Error:",o),o.isReturnValue?r=o.value:(this.log(`FATAL WORD CRIME: ${o.message}`),console.error("Full error object:",o),r=1)}return{output:this.outputBuffer.join(`
`),exitCode:r}}async processImport(e,n){const r=e.value.match(/#eat\s*(?:<(.+?)>|"(.+?)"|([a-zA-Z_][a-zA-Z0-9_]*\.(?:hat|yc)))/);if(!r)return;let o=r[1]||r[2]||r[3];const s=o.toLowerCase().replace(/\.(hat|yc)(\.js)?$/,"");if(s==="uhf"&&Object.keys(this.libraryOverrides).length>0)return;if(r[2]&&!o.endsWith(".hat"))throw new Error("Import Error: Quoted imports only work for .hat files.");this.currentFilePath&&!path.isAbsolute(o)&&(o=path.resolve(path.dirname(this.currentFilePath),o));const i={uhf:()=>this.loadUHF(n),albuquerque:()=>this.loadMath(n),like_a_server:()=>this.loadLikeAServer(n),weird_wide_web:()=>this.loadWeirdWideWeb(n),virus_alert:()=>this.loadVirusAlert(n)};if(i[s])return i[s]();const a=o;if(!this.imports.has(a))try{this.imports.add(a);const d=await Wn(this.projectName,a),u={pos:this.pos,tokens:this.tokens,currentFilePath:this.currentFilePath};this.tokens=this.lexer(d),this.pos=0,this.currentFilePath=a;const c=this.parseProgram();await this.interpret(c,n),this.tokens=u.tokens,this.pos=u.pos,this.currentFilePath=u.currentFilePath}catch(d){throw console.error(`[YankoviC Import] Error importing file: ${a}`,d),new Error(`Import Error: Failed to import user file '${o}'.`)}}loadMath(e){e.set("sin",{type:"NativeFunction",call:n=>Math.sin(n[0])}),e.set("cos",{type:"NativeFunction",call:n=>Math.cos(n[0])}),e.set("random_spatula",{type:"NativeFunction",call:()=>Math.floor(Math.random()*100)}),e.set("yoda",{type:"NativeFunction",call:n=>n[0]%n[1]})}loadUHF(e){for(const[n,r]of Object.entries(jn))e.set(n,r)}loadLikeAServer(e){for(const[n,r]of Object.entries(Kn))e.set(n,r)}loadWeirdWideWeb(e){for(const[n,r]of Object.entries(zn))e.set(n,r)}loadVirusAlert(e){for(const[n,r]of Object.entries(Xn))e.set(n,r)}}export{Tr as Y,Er as a,br as b,wr as c,Sr as d,w as e,_r as f,Wn as g,vr as h,gr as s};


==================================================
### FILE: ./frontend/dist/assets/main-BbZrB8AE.js
==================================================

import{d as kp,a as Sp,c as xp,b as Cp,e as Ep,Y as _p,g as Pp,f as Tp,s as $p,h as Lu}from"./yankovicInterpreter-BWEwZ3HO.js";(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))r(o);new MutationObserver(o=>{for(const l of o)if(l.type==="childList")for(const i of l.addedNodes)i.tagName==="LINK"&&i.rel==="modulepreload"&&r(i)}).observe(document,{childList:!0,subtree:!0});function n(o){const l={};return o.integrity&&(l.integrity=o.integrity),o.referrerPolicy&&(l.referrerPolicy=o.referrerPolicy),o.crossOrigin==="use-credentials"?l.credentials="include":o.crossOrigin==="anonymous"?l.credentials="omit":l.credentials="same-origin",l}function r(o){if(o.ep)return;o.ep=!0;const l=n(o);fetch(o.href,l)}})();function Np(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var kc={exports:{}},Cl={},Sc={exports:{}},V={};/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Zr=Symbol.for("react.element"),Ip=Symbol.for("react.portal"),Op=Symbol.for("react.fragment"),Lp=Symbol.for("react.strict_mode"),Rp=Symbol.for("react.profiler"),jp=Symbol.for("react.provider"),zp=Symbol.for("react.context"),Mp=Symbol.for("react.forward_ref"),Ap=Symbol.for("react.suspense"),Fp=Symbol.for("react.memo"),Dp=Symbol.for("react.lazy"),Ru=Symbol.iterator;function Up(e){return e===null||typeof e!="object"?null:(e=Ru&&e[Ru]||e["@@iterator"],typeof e=="function"?e:null)}var xc={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},Cc=Object.assign,Ec={};function bn(e,t,n){this.props=e,this.context=t,this.refs=Ec,this.updater=n||xc}bn.prototype.isReactComponent={};bn.prototype.setState=function(e,t){if(typeof e!="object"&&typeof e!="function"&&e!=null)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")};bn.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")};function _c(){}_c.prototype=bn.prototype;function Ls(e,t,n){this.props=e,this.context=t,this.refs=Ec,this.updater=n||xc}var Rs=Ls.prototype=new _c;Rs.constructor=Ls;Cc(Rs,bn.prototype);Rs.isPureReactComponent=!0;var ju=Array.isArray,Pc=Object.prototype.hasOwnProperty,js={current:null},Tc={key:!0,ref:!0,__self:!0,__source:!0};function $c(e,t,n){var r,o={},l=null,i=null;if(t!=null)for(r in t.ref!==void 0&&(i=t.ref),t.key!==void 0&&(l=""+t.key),t)Pc.call(t,r)&&!Tc.hasOwnProperty(r)&&(o[r]=t[r]);var s=arguments.length-2;if(s===1)o.children=n;else if(1<s){for(var u=Array(s),f=0;f<s;f++)u[f]=arguments[f+2];o.children=u}if(e&&e.defaultProps)for(r in s=e.defaultProps,s)o[r]===void 0&&(o[r]=s[r]);return{$$typeof:Zr,type:e,key:l,ref:i,props:o,_owner:js.current}}function Bp(e,t){return{$$typeof:Zr,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}function zs(e){return typeof e=="object"&&e!==null&&e.$$typeof===Zr}function Hp(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,function(n){return t[n]})}var zu=/\/+/g;function Zl(e,t){return typeof e=="object"&&e!==null&&e.key!=null?Hp(""+e.key):t.toString(36)}function To(e,t,n,r,o){var l=typeof e;(l==="undefined"||l==="boolean")&&(e=null);var i=!1;if(e===null)i=!0;else switch(l){case"string":case"number":i=!0;break;case"object":switch(e.$$typeof){case Zr:case Ip:i=!0}}if(i)return i=e,o=o(i),e=r===""?"."+Zl(i,0):r,ju(o)?(n="",e!=null&&(n=e.replace(zu,"$&/")+"/"),To(o,t,n,"",function(f){return f})):o!=null&&(zs(o)&&(o=Bp(o,n+(!o.key||i&&i.key===o.key?"":(""+o.key).replace(zu,"$&/")+"/")+e)),t.push(o)),1;if(i=0,r=r===""?".":r+":",ju(e))for(var s=0;s<e.length;s++){l=e[s];var u=r+Zl(l,s);i+=To(l,t,n,u,o)}else if(u=Up(e),typeof u=="function")for(e=u.call(e),s=0;!(l=e.next()).done;)l=l.value,u=r+Zl(l,s++),i+=To(l,t,n,u,o);else if(l==="object")throw t=String(e),Error("Objects are not valid as a React child (found: "+(t==="[object Object]"?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return i}function ro(e,t,n){if(e==null)return e;var r=[],o=0;return To(e,r,"","",function(l){return t.call(n,l,o++)}),r}function Wp(e){if(e._status===-1){var t=e._result;t=t(),t.then(function(n){(e._status===0||e._status===-1)&&(e._status=1,e._result=n)},function(n){(e._status===0||e._status===-1)&&(e._status=2,e._result=n)}),e._status===-1&&(e._status=0,e._result=t)}if(e._status===1)return e._result.default;throw e._result}var Ie={current:null},$o={transition:null},Vp={ReactCurrentDispatcher:Ie,ReactCurrentBatchConfig:$o,ReactCurrentOwner:js};function Nc(){throw Error("act(...) is not supported in production builds of React.")}V.Children={map:ro,forEach:function(e,t,n){ro(e,function(){t.apply(this,arguments)},n)},count:function(e){var t=0;return ro(e,function(){t++}),t},toArray:function(e){return ro(e,function(t){return t})||[]},only:function(e){if(!zs(e))throw Error("React.Children.only expected to receive a single React element child.");return e}};V.Component=bn;V.Fragment=Op;V.Profiler=Rp;V.PureComponent=Ls;V.StrictMode=Lp;V.Suspense=Ap;V.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Vp;V.act=Nc;V.cloneElement=function(e,t,n){if(e==null)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var r=Cc({},e.props),o=e.key,l=e.ref,i=e._owner;if(t!=null){if(t.ref!==void 0&&(l=t.ref,i=js.current),t.key!==void 0&&(o=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(u in t)Pc.call(t,u)&&!Tc.hasOwnProperty(u)&&(r[u]=t[u]===void 0&&s!==void 0?s[u]:t[u])}var u=arguments.length-2;if(u===1)r.children=n;else if(1<u){s=Array(u);for(var f=0;f<u;f++)s[f]=arguments[f+2];r.children=s}return{$$typeof:Zr,type:e.type,key:o,ref:l,props:r,_owner:i}};V.createContext=function(e){return e={$$typeof:zp,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null},e.Provider={$$typeof:jp,_context:e},e.Consumer=e};V.createElement=$c;V.createFactory=function(e){var t=$c.bind(null,e);return t.type=e,t};V.createRef=function(){return{current:null}};V.forwardRef=function(e){return{$$typeof:Mp,render:e}};V.isValidElement=zs;V.lazy=function(e){return{$$typeof:Dp,_payload:{_status:-1,_result:e},_init:Wp}};V.memo=function(e,t){return{$$typeof:Fp,type:e,compare:t===void 0?null:t}};V.startTransition=function(e){var t=$o.transition;$o.transition={};try{e()}finally{$o.transition=t}};V.unstable_act=Nc;V.useCallback=function(e,t){return Ie.current.useCallback(e,t)};V.useContext=function(e){return Ie.current.useContext(e)};V.useDebugValue=function(){};V.useDeferredValue=function(e){return Ie.current.useDeferredValue(e)};V.useEffect=function(e,t){return Ie.current.useEffect(e,t)};V.useId=function(){return Ie.current.useId()};V.useImperativeHandle=function(e,t,n){return Ie.current.useImperativeHandle(e,t,n)};V.useInsertionEffect=function(e,t){return Ie.current.useInsertionEffect(e,t)};V.useLayoutEffect=function(e,t){return Ie.current.useLayoutEffect(e,t)};V.useMemo=function(e,t){return Ie.current.useMemo(e,t)};V.useReducer=function(e,t,n){return Ie.current.useReducer(e,t,n)};V.useRef=function(e){return Ie.current.useRef(e)};V.useState=function(e){return Ie.current.useState(e)};V.useSyncExternalStore=function(e,t,n){return Ie.current.useSyncExternalStore(e,t,n)};V.useTransition=function(){return Ie.current.useTransition()};V.version="18.3.1";Sc.exports=V;var E=Sc.exports;const B=Np(E);/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Yp=E,Qp=Symbol.for("react.element"),Kp=Symbol.for("react.fragment"),Gp=Object.prototype.hasOwnProperty,Xp=Yp.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,Zp={key:!0,ref:!0,__self:!0,__source:!0};function Ic(e,t,n){var r,o={},l=null,i=null;n!==void 0&&(l=""+n),t.key!==void 0&&(l=""+t.key),t.ref!==void 0&&(i=t.ref);for(r in t)Gp.call(t,r)&&!Zp.hasOwnProperty(r)&&(o[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps,t)o[r]===void 0&&(o[r]=t[r]);return{$$typeof:Qp,type:e,key:l,ref:i,props:o,_owner:Xp.current}}Cl.Fragment=Kp;Cl.jsx=Ic;Cl.jsxs=Ic;kc.exports=Cl;var $=kc.exports,Ii={},Oc={exports:{}},Ve={},Lc={exports:{}},Rc={};/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */(function(e){function t(_,L){var A=_.length;_.push(L);e:for(;0<A;){var R=A-1>>>1,z=_[R];if(0<o(z,L))_[R]=L,_[A]=z,A=R;else break e}}function n(_){return _.length===0?null:_[0]}function r(_){if(_.length===0)return null;var L=_[0],A=_.pop();if(A!==L){_[0]=A;e:for(var R=0,z=_.length,Y=z>>>1;R<Y;){var G=2*(R+1)-1,Z=_[G],ae=G+1,Pe=_[ae];if(0>o(Z,A))ae<z&&0>o(Pe,Z)?(_[R]=Pe,_[ae]=A,R=ae):(_[R]=Z,_[G]=A,R=G);else if(ae<z&&0>o(Pe,A))_[R]=Pe,_[ae]=A,R=ae;else break e}}return L}function o(_,L){var A=_.sortIndex-L.sortIndex;return A!==0?A:_.id-L.id}if(typeof performance=="object"&&typeof performance.now=="function"){var l=performance;e.unstable_now=function(){return l.now()}}else{var i=Date,s=i.now();e.unstable_now=function(){return i.now()-s}}var u=[],f=[],m=1,g=null,h=3,v=!1,w=!1,k=!1,P=typeof setTimeout=="function"?setTimeout:null,c=typeof clearTimeout=="function"?clearTimeout:null,a=typeof setImmediate<"u"?setImmediate:null;typeof navigator<"u"&&navigator.scheduling!==void 0&&navigator.scheduling.isInputPending!==void 0&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function d(_){for(var L=n(f);L!==null;){if(L.callback===null)r(f);else if(L.startTime<=_)r(f),L.sortIndex=L.expirationTime,t(u,L);else break;L=n(f)}}function p(_){if(k=!1,d(_),!w)if(n(u)!==null)w=!0,j(S);else{var L=n(f);L!==null&&F(p,L.startTime-_)}}function S(_,L){w=!1,k&&(k=!1,c(C),C=-1),v=!0;var A=h;try{for(d(L),g=n(u);g!==null&&(!(g.expirationTime>L)||_&&!D());){var R=g.callback;if(typeof R=="function"){g.callback=null,h=g.priorityLevel;var z=R(g.expirationTime<=L);L=e.unstable_now(),typeof z=="function"?g.callback=z:g===n(u)&&r(u),d(L)}else r(u);g=n(u)}if(g!==null)var Y=!0;else{var G=n(f);G!==null&&F(p,G.startTime-L),Y=!1}return Y}finally{g=null,h=A,v=!1}}var x=!1,y=null,C=-1,O=5,N=-1;function D(){return!(e.unstable_now()-N<O)}function ne(){if(y!==null){var _=e.unstable_now();N=_;var L=!0;try{L=y(!0,_)}finally{L?se():(x=!1,y=null)}}else x=!1}var se;if(typeof a=="function")se=function(){a(ne)};else if(typeof MessageChannel<"u"){var ue=new MessageChannel,I=ue.port2;ue.port1.onmessage=ne,se=function(){I.postMessage(null)}}else se=function(){P(ne,0)};function j(_){y=_,x||(x=!0,se())}function F(_,L){C=P(function(){_(e.unstable_now())},L)}e.unstable_IdlePriority=5,e.unstable_ImmediatePriority=1,e.unstable_LowPriority=4,e.unstable_NormalPriority=3,e.unstable_Profiling=null,e.unstable_UserBlockingPriority=2,e.unstable_cancelCallback=function(_){_.callback=null},e.unstable_continueExecution=function(){w||v||(w=!0,j(S))},e.unstable_forceFrameRate=function(_){0>_||125<_?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):O=0<_?Math.floor(1e3/_):5},e.unstable_getCurrentPriorityLevel=function(){return h},e.unstable_getFirstCallbackNode=function(){return n(u)},e.unstable_next=function(_){switch(h){case 1:case 2:case 3:var L=3;break;default:L=h}var A=h;h=L;try{return _()}finally{h=A}},e.unstable_pauseExecution=function(){},e.unstable_requestPaint=function(){},e.unstable_runWithPriority=function(_,L){switch(_){case 1:case 2:case 3:case 4:case 5:break;default:_=3}var A=h;h=_;try{return L()}finally{h=A}},e.unstable_scheduleCallback=function(_,L,A){var R=e.unstable_now();switch(typeof A=="object"&&A!==null?(A=A.delay,A=typeof A=="number"&&0<A?R+A:R):A=R,_){case 1:var z=-1;break;case 2:z=250;break;case 5:z=1073741823;break;case 4:z=1e4;break;default:z=5e3}return z=A+z,_={id:m++,callback:L,priorityLevel:_,startTime:A,expirationTime:z,sortIndex:-1},A>R?(_.sortIndex=A,t(f,_),n(u)===null&&_===n(f)&&(k?(c(C),C=-1):k=!0,F(p,A-R))):(_.sortIndex=z,t(u,_),w||v||(w=!0,j(S))),_},e.unstable_shouldYield=D,e.unstable_wrapCallback=function(_){var L=h;return function(){var A=h;h=L;try{return _.apply(this,arguments)}finally{h=A}}}})(Rc);Lc.exports=Rc;var qp=Lc.exports;/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Jp=E,We=qp;function T(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var jc=new Set,Nr={};function gn(e,t){Hn(e,t),Hn(e+"Capture",t)}function Hn(e,t){for(Nr[e]=t,e=0;e<t.length;e++)jc.add(t[e])}var kt=!(typeof window>"u"||typeof window.document>"u"||typeof window.document.createElement>"u"),Oi=Object.prototype.hasOwnProperty,bp=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,Mu={},Au={};function eh(e){return Oi.call(Au,e)?!0:Oi.call(Mu,e)?!1:bp.test(e)?Au[e]=!0:(Mu[e]=!0,!1)}function th(e,t,n,r){if(n!==null&&n.type===0)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return r?!1:n!==null?!n.acceptsBooleans:(e=e.toLowerCase().slice(0,5),e!=="data-"&&e!=="aria-");default:return!1}}function nh(e,t,n,r){if(t===null||typeof t>"u"||th(e,t,n,r))return!0;if(r)return!1;if(n!==null)switch(n.type){case 3:return!t;case 4:return t===!1;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}function Oe(e,t,n,r,o,l,i){this.acceptsBooleans=t===2||t===3||t===4,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=l,this.removeEmptyString=i}var ke={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){ke[e]=new Oe(e,0,!1,e,null,!1,!1)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];ke[t]=new Oe(t,1,!1,e[1],null,!1,!1)});["contentEditable","draggable","spellCheck","value"].forEach(function(e){ke[e]=new Oe(e,2,!1,e.toLowerCase(),null,!1,!1)});["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){ke[e]=new Oe(e,2,!1,e,null,!1,!1)});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){ke[e]=new Oe(e,3,!1,e.toLowerCase(),null,!1,!1)});["checked","multiple","muted","selected"].forEach(function(e){ke[e]=new Oe(e,3,!0,e,null,!1,!1)});["capture","download"].forEach(function(e){ke[e]=new Oe(e,4,!1,e,null,!1,!1)});["cols","rows","size","span"].forEach(function(e){ke[e]=new Oe(e,6,!1,e,null,!1,!1)});["rowSpan","start"].forEach(function(e){ke[e]=new Oe(e,5,!1,e.toLowerCase(),null,!1,!1)});var Ms=/[\-:]([a-z])/g;function As(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(Ms,As);ke[t]=new Oe(t,1,!1,e,null,!1,!1)});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(Ms,As);ke[t]=new Oe(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)});["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(Ms,As);ke[t]=new Oe(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)});["tabIndex","crossOrigin"].forEach(function(e){ke[e]=new Oe(e,1,!1,e.toLowerCase(),null,!1,!1)});ke.xlinkHref=new Oe("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1);["src","href","action","formAction"].forEach(function(e){ke[e]=new Oe(e,1,!1,e.toLowerCase(),null,!0,!0)});function Fs(e,t,n,r){var o=ke.hasOwnProperty(t)?ke[t]:null;(o!==null?o.type!==0:r||!(2<t.length)||t[0]!=="o"&&t[0]!=="O"||t[1]!=="n"&&t[1]!=="N")&&(nh(t,n,o,r)&&(n=null),r||o===null?eh(t)&&(n===null?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=n===null?o.type===3?!1:"":n:(t=o.attributeName,r=o.attributeNamespace,n===null?e.removeAttribute(t):(o=o.type,n=o===3||o===4&&n===!0?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}var Et=Jp.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,oo=Symbol.for("react.element"),xn=Symbol.for("react.portal"),Cn=Symbol.for("react.fragment"),Ds=Symbol.for("react.strict_mode"),Li=Symbol.for("react.profiler"),zc=Symbol.for("react.provider"),Mc=Symbol.for("react.context"),Us=Symbol.for("react.forward_ref"),Ri=Symbol.for("react.suspense"),ji=Symbol.for("react.suspense_list"),Bs=Symbol.for("react.memo"),$t=Symbol.for("react.lazy"),Ac=Symbol.for("react.offscreen"),Fu=Symbol.iterator;function rr(e){return e===null||typeof e!="object"?null:(e=Fu&&e[Fu]||e["@@iterator"],typeof e=="function"?e:null)}var le=Object.assign,ql;function fr(e){if(ql===void 0)try{throw Error()}catch(n){var t=n.stack.trim().match(/\n( *(at )?)/);ql=t&&t[1]||""}return`
`+ql+e}var Jl=!1;function bl(e,t){if(!e||Jl)return"";Jl=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),typeof Reflect=="object"&&Reflect.construct){try{Reflect.construct(t,[])}catch(f){var r=f}Reflect.construct(e,[],t)}else{try{t.call()}catch(f){r=f}e.call(t.prototype)}else{try{throw Error()}catch(f){r=f}e()}}catch(f){if(f&&r&&typeof f.stack=="string"){for(var o=f.stack.split(`
`),l=r.stack.split(`
`),i=o.length-1,s=l.length-1;1<=i&&0<=s&&o[i]!==l[s];)s--;for(;1<=i&&0<=s;i--,s--)if(o[i]!==l[s]){if(i!==1||s!==1)do if(i--,s--,0>s||o[i]!==l[s]){var u=`
`+o[i].replace(" at new "," at ");return e.displayName&&u.includes("<anonymous>")&&(u=u.replace("<anonymous>",e.displayName)),u}while(1<=i&&0<=s);break}}}finally{Jl=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?fr(e):""}function rh(e){switch(e.tag){case 5:return fr(e.type);case 16:return fr("Lazy");case 13:return fr("Suspense");case 19:return fr("SuspenseList");case 0:case 2:case 15:return e=bl(e.type,!1),e;case 11:return e=bl(e.type.render,!1),e;case 1:return e=bl(e.type,!0),e;default:return""}}function zi(e){if(e==null)return null;if(typeof e=="function")return e.displayName||e.name||null;if(typeof e=="string")return e;switch(e){case Cn:return"Fragment";case xn:return"Portal";case Li:return"Profiler";case Ds:return"StrictMode";case Ri:return"Suspense";case ji:return"SuspenseList"}if(typeof e=="object")switch(e.$$typeof){case Mc:return(e.displayName||"Context")+".Consumer";case zc:return(e._context.displayName||"Context")+".Provider";case Us:var t=e.render;return e=e.displayName,e||(e=t.displayName||t.name||"",e=e!==""?"ForwardRef("+e+")":"ForwardRef"),e;case Bs:return t=e.displayName||null,t!==null?t:zi(e.type)||"Memo";case $t:t=e._payload,e=e._init;try{return zi(e(t))}catch{}}return null}function oh(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=t.render,e=e.displayName||e.name||"",t.displayName||(e!==""?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return zi(t);case 8:return t===Ds?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if(typeof t=="function")return t.displayName||t.name||null;if(typeof t=="string")return t}return null}function Vt(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":return e;case"object":return e;default:return""}}function Fc(e){var t=e.type;return(e=e.nodeName)&&e.toLowerCase()==="input"&&(t==="checkbox"||t==="radio")}function lh(e){var t=Fc(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&typeof n<"u"&&typeof n.get=="function"&&typeof n.set=="function"){var o=n.get,l=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(i){r=""+i,l.call(this,i)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(i){r=""+i},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}function lo(e){e._valueTracker||(e._valueTracker=lh(e))}function Dc(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Fc(e)?e.checked?"true":"false":e.value),e=r,e!==n?(t.setValue(e),!0):!1}function Yo(e){if(e=e||(typeof document<"u"?document:void 0),typeof e>"u")return null;try{return e.activeElement||e.body}catch{return e.body}}function Mi(e,t){var n=t.checked;return le({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:n??e._wrapperState.initialChecked})}function Du(e,t){var n=t.defaultValue==null?"":t.defaultValue,r=t.checked!=null?t.checked:t.defaultChecked;n=Vt(t.value!=null?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:t.type==="checkbox"||t.type==="radio"?t.checked!=null:t.value!=null}}function Uc(e,t){t=t.checked,t!=null&&Fs(e,"checked",t,!1)}function Ai(e,t){Uc(e,t);var n=Vt(t.value),r=t.type;if(n!=null)r==="number"?(n===0&&e.value===""||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if(r==="submit"||r==="reset"){e.removeAttribute("value");return}t.hasOwnProperty("value")?Fi(e,t.type,n):t.hasOwnProperty("defaultValue")&&Fi(e,t.type,Vt(t.defaultValue)),t.checked==null&&t.defaultChecked!=null&&(e.defaultChecked=!!t.defaultChecked)}function Uu(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!(r!=="submit"&&r!=="reset"||t.value!==void 0&&t.value!==null))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}n=e.name,n!==""&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,n!==""&&(e.name=n)}function Fi(e,t,n){(t!=="number"||Yo(e.ownerDocument)!==e)&&(n==null?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var dr=Array.isArray;function Mn(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+Vt(n),t=null,o=0;o<e.length;o++){if(e[o].value===n){e[o].selected=!0,r&&(e[o].defaultSelected=!0);return}t!==null||e[o].disabled||(t=e[o])}t!==null&&(t.selected=!0)}}function Di(e,t){if(t.dangerouslySetInnerHTML!=null)throw Error(T(91));return le({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Bu(e,t){var n=t.value;if(n==null){if(n=t.children,t=t.defaultValue,n!=null){if(t!=null)throw Error(T(92));if(dr(n)){if(1<n.length)throw Error(T(93));n=n[0]}t=n}t==null&&(t=""),n=t}e._wrapperState={initialValue:Vt(n)}}function Bc(e,t){var n=Vt(t.value),r=Vt(t.defaultValue);n!=null&&(n=""+n,n!==e.value&&(e.value=n),t.defaultValue==null&&e.defaultValue!==n&&(e.defaultValue=n)),r!=null&&(e.defaultValue=""+r)}function Hu(e){var t=e.textContent;t===e._wrapperState.initialValue&&t!==""&&t!==null&&(e.value=t)}function Hc(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Ui(e,t){return e==null||e==="http://www.w3.org/1999/xhtml"?Hc(t):e==="http://www.w3.org/2000/svg"&&t==="foreignObject"?"http://www.w3.org/1999/xhtml":e}var io,Wc=function(e){return typeof MSApp<"u"&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction(function(){return e(t,n,r,o)})}:e}(function(e,t){if(e.namespaceURI!=="http://www.w3.org/2000/svg"||"innerHTML"in e)e.innerHTML=t;else{for(io=io||document.createElement("div"),io.innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=io.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}});function Ir(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&n.nodeType===3){n.nodeValue=t;return}}e.textContent=t}var yr={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ih=["Webkit","ms","Moz","O"];Object.keys(yr).forEach(function(e){ih.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),yr[t]=yr[e]})});function Vc(e,t,n){return t==null||typeof t=="boolean"||t===""?"":n||typeof t!="number"||t===0||yr.hasOwnProperty(e)&&yr[e]?(""+t).trim():t+"px"}function Yc(e,t){e=e.style;for(var n in t)if(t.hasOwnProperty(n)){var r=n.indexOf("--")===0,o=Vc(n,t[n],r);n==="float"&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}var sh=le({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Bi(e,t){if(t){if(sh[e]&&(t.children!=null||t.dangerouslySetInnerHTML!=null))throw Error(T(137,e));if(t.dangerouslySetInnerHTML!=null){if(t.children!=null)throw Error(T(60));if(typeof t.dangerouslySetInnerHTML!="object"||!("__html"in t.dangerouslySetInnerHTML))throw Error(T(61))}if(t.style!=null&&typeof t.style!="object")throw Error(T(62))}}function Hi(e,t){if(e.indexOf("-")===-1)return typeof t.is=="string";switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Wi=null;function Hs(e){return e=e.target||e.srcElement||window,e.correspondingUseElement&&(e=e.correspondingUseElement),e.nodeType===3?e.parentNode:e}var Vi=null,An=null,Fn=null;function Wu(e){if(e=br(e)){if(typeof Vi!="function")throw Error(T(280));var t=e.stateNode;t&&(t=$l(t),Vi(e.stateNode,e.type,t))}}function Qc(e){An?Fn?Fn.push(e):Fn=[e]:An=e}function Kc(){if(An){var e=An,t=Fn;if(Fn=An=null,Wu(e),t)for(e=0;e<t.length;e++)Wu(t[e])}}function Gc(e,t){return e(t)}function Xc(){}var ei=!1;function Zc(e,t,n){if(ei)return e(t,n);ei=!0;try{return Gc(e,t,n)}finally{ei=!1,(An!==null||Fn!==null)&&(Xc(),Kc())}}function Or(e,t){var n=e.stateNode;if(n===null)return null;var r=$l(n);if(r===null)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(e=e.type,r=!(e==="button"||e==="input"||e==="select"||e==="textarea")),e=!r;break e;default:e=!1}if(e)return null;if(n&&typeof n!="function")throw Error(T(231,t,typeof n));return n}var Yi=!1;if(kt)try{var or={};Object.defineProperty(or,"passive",{get:function(){Yi=!0}}),window.addEventListener("test",or,or),window.removeEventListener("test",or,or)}catch{Yi=!1}function uh(e,t,n,r,o,l,i,s,u){var f=Array.prototype.slice.call(arguments,3);try{t.apply(n,f)}catch(m){this.onError(m)}}var vr=!1,Qo=null,Ko=!1,Qi=null,ah={onError:function(e){vr=!0,Qo=e}};function ch(e,t,n,r,o,l,i,s,u){vr=!1,Qo=null,uh.apply(ah,arguments)}function fh(e,t,n,r,o,l,i,s,u){if(ch.apply(this,arguments),vr){if(vr){var f=Qo;vr=!1,Qo=null}else throw Error(T(198));Ko||(Ko=!0,Qi=f)}}function yn(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do t=e,t.flags&4098&&(n=t.return),e=t.return;while(e)}return t.tag===3?n:null}function qc(e){if(e.tag===13){var t=e.memoizedState;if(t===null&&(e=e.alternate,e!==null&&(t=e.memoizedState)),t!==null)return t.dehydrated}return null}function Vu(e){if(yn(e)!==e)throw Error(T(188))}function dh(e){var t=e.alternate;if(!t){if(t=yn(e),t===null)throw Error(T(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(o===null)break;var l=o.alternate;if(l===null){if(r=o.return,r!==null){n=r;continue}break}if(o.child===l.child){for(l=o.child;l;){if(l===n)return Vu(o),e;if(l===r)return Vu(o),t;l=l.sibling}throw Error(T(188))}if(n.return!==r.return)n=o,r=l;else{for(var i=!1,s=o.child;s;){if(s===n){i=!0,n=o,r=l;break}if(s===r){i=!0,r=o,n=l;break}s=s.sibling}if(!i){for(s=l.child;s;){if(s===n){i=!0,n=l,r=o;break}if(s===r){i=!0,r=l,n=o;break}s=s.sibling}if(!i)throw Error(T(189))}}if(n.alternate!==r)throw Error(T(190))}if(n.tag!==3)throw Error(T(188));return n.stateNode.current===n?e:t}function Jc(e){return e=dh(e),e!==null?bc(e):null}function bc(e){if(e.tag===5||e.tag===6)return e;for(e=e.child;e!==null;){var t=bc(e);if(t!==null)return t;e=e.sibling}return null}var ef=We.unstable_scheduleCallback,Yu=We.unstable_cancelCallback,ph=We.unstable_shouldYield,hh=We.unstable_requestPaint,ce=We.unstable_now,mh=We.unstable_getCurrentPriorityLevel,Ws=We.unstable_ImmediatePriority,tf=We.unstable_UserBlockingPriority,Go=We.unstable_NormalPriority,gh=We.unstable_LowPriority,nf=We.unstable_IdlePriority,El=null,dt=null;function yh(e){if(dt&&typeof dt.onCommitFiberRoot=="function")try{dt.onCommitFiberRoot(El,e,void 0,(e.current.flags&128)===128)}catch{}}var rt=Math.clz32?Math.clz32:kh,vh=Math.log,wh=Math.LN2;function kh(e){return e>>>=0,e===0?32:31-(vh(e)/wh|0)|0}var so=64,uo=4194304;function pr(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return e&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return e&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function Xo(e,t){var n=e.pendingLanes;if(n===0)return 0;var r=0,o=e.suspendedLanes,l=e.pingedLanes,i=n&268435455;if(i!==0){var s=i&~o;s!==0?r=pr(s):(l&=i,l!==0&&(r=pr(l)))}else i=n&~o,i!==0?r=pr(i):l!==0&&(r=pr(l));if(r===0)return 0;if(t!==0&&t!==r&&!(t&o)&&(o=r&-r,l=t&-t,o>=l||o===16&&(l&4194240)!==0))return t;if(r&4&&(r|=n&16),t=e.entangledLanes,t!==0)for(e=e.entanglements,t&=r;0<t;)n=31-rt(t),o=1<<n,r|=e[n],t&=~o;return r}function Sh(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return-1;case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}function xh(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,l=e.pendingLanes;0<l;){var i=31-rt(l),s=1<<i,u=o[i];u===-1?(!(s&n)||s&r)&&(o[i]=Sh(s,t)):u<=t&&(e.expiredLanes|=s),l&=~s}}function Ki(e){return e=e.pendingLanes&-1073741825,e!==0?e:e&1073741824?1073741824:0}function rf(){var e=so;return so<<=1,!(so&4194240)&&(so=64),e}function ti(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function qr(e,t,n){e.pendingLanes|=t,t!==536870912&&(e.suspendedLanes=0,e.pingedLanes=0),e=e.eventTimes,t=31-rt(t),e[t]=n}function Ch(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var o=31-rt(n),l=1<<o;t[o]=0,r[o]=-1,e[o]=-1,n&=~l}}function Vs(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-rt(n),o=1<<r;o&t|e[r]&t&&(e[r]|=t),n&=~o}}var X=0;function of(e){return e&=-e,1<e?4<e?e&268435455?16:536870912:4:1}var lf,Ys,sf,uf,af,Gi=!1,ao=[],zt=null,Mt=null,At=null,Lr=new Map,Rr=new Map,It=[],Eh="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Qu(e,t){switch(e){case"focusin":case"focusout":zt=null;break;case"dragenter":case"dragleave":Mt=null;break;case"mouseover":case"mouseout":At=null;break;case"pointerover":case"pointerout":Lr.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Rr.delete(t.pointerId)}}function lr(e,t,n,r,o,l){return e===null||e.nativeEvent!==l?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:l,targetContainers:[o]},t!==null&&(t=br(t),t!==null&&Ys(t)),e):(e.eventSystemFlags|=r,t=e.targetContainers,o!==null&&t.indexOf(o)===-1&&t.push(o),e)}function _h(e,t,n,r,o){switch(t){case"focusin":return zt=lr(zt,e,t,n,r,o),!0;case"dragenter":return Mt=lr(Mt,e,t,n,r,o),!0;case"mouseover":return At=lr(At,e,t,n,r,o),!0;case"pointerover":var l=o.pointerId;return Lr.set(l,lr(Lr.get(l)||null,e,t,n,r,o)),!0;case"gotpointercapture":return l=o.pointerId,Rr.set(l,lr(Rr.get(l)||null,e,t,n,r,o)),!0}return!1}function cf(e){var t=bt(e.target);if(t!==null){var n=yn(t);if(n!==null){if(t=n.tag,t===13){if(t=qc(n),t!==null){e.blockedOn=t,af(e.priority,function(){sf(n)});return}}else if(t===3&&n.stateNode.current.memoizedState.isDehydrated){e.blockedOn=n.tag===3?n.stateNode.containerInfo:null;return}}}e.blockedOn=null}function No(e){if(e.blockedOn!==null)return!1;for(var t=e.targetContainers;0<t.length;){var n=Xi(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(n===null){n=e.nativeEvent;var r=new n.constructor(n.type,n);Wi=r,n.target.dispatchEvent(r),Wi=null}else return t=br(n),t!==null&&Ys(t),e.blockedOn=n,!1;t.shift()}return!0}function Ku(e,t,n){No(e)&&n.delete(t)}function Ph(){Gi=!1,zt!==null&&No(zt)&&(zt=null),Mt!==null&&No(Mt)&&(Mt=null),At!==null&&No(At)&&(At=null),Lr.forEach(Ku),Rr.forEach(Ku)}function ir(e,t){e.blockedOn===t&&(e.blockedOn=null,Gi||(Gi=!0,We.unstable_scheduleCallback(We.unstable_NormalPriority,Ph)))}function jr(e){function t(o){return ir(o,e)}if(0<ao.length){ir(ao[0],e);for(var n=1;n<ao.length;n++){var r=ao[n];r.blockedOn===e&&(r.blockedOn=null)}}for(zt!==null&&ir(zt,e),Mt!==null&&ir(Mt,e),At!==null&&ir(At,e),Lr.forEach(t),Rr.forEach(t),n=0;n<It.length;n++)r=It[n],r.blockedOn===e&&(r.blockedOn=null);for(;0<It.length&&(n=It[0],n.blockedOn===null);)cf(n),n.blockedOn===null&&It.shift()}var Dn=Et.ReactCurrentBatchConfig,Zo=!0;function Th(e,t,n,r){var o=X,l=Dn.transition;Dn.transition=null;try{X=1,Qs(e,t,n,r)}finally{X=o,Dn.transition=l}}function $h(e,t,n,r){var o=X,l=Dn.transition;Dn.transition=null;try{X=4,Qs(e,t,n,r)}finally{X=o,Dn.transition=l}}function Qs(e,t,n,r){if(Zo){var o=Xi(e,t,n,r);if(o===null)fi(e,t,r,qo,n),Qu(e,r);else if(_h(o,e,t,n,r))r.stopPropagation();else if(Qu(e,r),t&4&&-1<Eh.indexOf(e)){for(;o!==null;){var l=br(o);if(l!==null&&lf(l),l=Xi(e,t,n,r),l===null&&fi(e,t,r,qo,n),l===o)break;o=l}o!==null&&r.stopPropagation()}else fi(e,t,r,null,n)}}var qo=null;function Xi(e,t,n,r){if(qo=null,e=Hs(r),e=bt(e),e!==null)if(t=yn(e),t===null)e=null;else if(n=t.tag,n===13){if(e=qc(t),e!==null)return e;e=null}else if(n===3){if(t.stateNode.current.memoizedState.isDehydrated)return t.tag===3?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return qo=e,null}function ff(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(mh()){case Ws:return 1;case tf:return 4;case Go:case gh:return 16;case nf:return 536870912;default:return 16}default:return 16}}var Lt=null,Ks=null,Io=null;function df(){if(Io)return Io;var e,t=Ks,n=t.length,r,o="value"in Lt?Lt.value:Lt.textContent,l=o.length;for(e=0;e<n&&t[e]===o[e];e++);var i=n-e;for(r=1;r<=i&&t[n-r]===o[l-r];r++);return Io=o.slice(e,1<r?1-r:void 0)}function Oo(e){var t=e.keyCode;return"charCode"in e?(e=e.charCode,e===0&&t===13&&(e=13)):e=t,e===10&&(e=13),32<=e||e===13?e:0}function co(){return!0}function Gu(){return!1}function Ye(e){function t(n,r,o,l,i){this._reactName=n,this._targetInst=o,this.type=r,this.nativeEvent=l,this.target=i,this.currentTarget=null;for(var s in e)e.hasOwnProperty(s)&&(n=e[s],this[s]=n?n(l):l[s]);return this.isDefaultPrevented=(l.defaultPrevented!=null?l.defaultPrevented:l.returnValue===!1)?co:Gu,this.isPropagationStopped=Gu,this}return le(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var n=this.nativeEvent;n&&(n.preventDefault?n.preventDefault():typeof n.returnValue!="unknown"&&(n.returnValue=!1),this.isDefaultPrevented=co)},stopPropagation:function(){var n=this.nativeEvent;n&&(n.stopPropagation?n.stopPropagation():typeof n.cancelBubble!="unknown"&&(n.cancelBubble=!0),this.isPropagationStopped=co)},persist:function(){},isPersistent:co}),t}var er={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},Gs=Ye(er),Jr=le({},er,{view:0,detail:0}),Nh=Ye(Jr),ni,ri,sr,_l=le({},Jr,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Xs,button:0,buttons:0,relatedTarget:function(e){return e.relatedTarget===void 0?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==sr&&(sr&&e.type==="mousemove"?(ni=e.screenX-sr.screenX,ri=e.screenY-sr.screenY):ri=ni=0,sr=e),ni)},movementY:function(e){return"movementY"in e?e.movementY:ri}}),Xu=Ye(_l),Ih=le({},_l,{dataTransfer:0}),Oh=Ye(Ih),Lh=le({},Jr,{relatedTarget:0}),oi=Ye(Lh),Rh=le({},er,{animationName:0,elapsedTime:0,pseudoElement:0}),jh=Ye(Rh),zh=le({},er,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Mh=Ye(zh),Ah=le({},er,{data:0}),Zu=Ye(Ah),Fh={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Dh={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Uh={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Bh(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):(e=Uh[e])?!!t[e]:!1}function Xs(){return Bh}var Hh=le({},Jr,{key:function(e){if(e.key){var t=Fh[e.key]||e.key;if(t!=="Unidentified")return t}return e.type==="keypress"?(e=Oo(e),e===13?"Enter":String.fromCharCode(e)):e.type==="keydown"||e.type==="keyup"?Dh[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Xs,charCode:function(e){return e.type==="keypress"?Oo(e):0},keyCode:function(e){return e.type==="keydown"||e.type==="keyup"?e.keyCode:0},which:function(e){return e.type==="keypress"?Oo(e):e.type==="keydown"||e.type==="keyup"?e.keyCode:0}}),Wh=Ye(Hh),Vh=le({},_l,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),qu=Ye(Vh),Yh=le({},Jr,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Xs}),Qh=Ye(Yh),Kh=le({},er,{propertyName:0,elapsedTime:0,pseudoElement:0}),Gh=Ye(Kh),Xh=le({},_l,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Zh=Ye(Xh),qh=[9,13,27,32],Zs=kt&&"CompositionEvent"in window,wr=null;kt&&"documentMode"in document&&(wr=document.documentMode);var Jh=kt&&"TextEvent"in window&&!wr,pf=kt&&(!Zs||wr&&8<wr&&11>=wr),Ju=" ",bu=!1;function hf(e,t){switch(e){case"keyup":return qh.indexOf(t.keyCode)!==-1;case"keydown":return t.keyCode!==229;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function mf(e){return e=e.detail,typeof e=="object"&&"data"in e?e.data:null}var En=!1;function bh(e,t){switch(e){case"compositionend":return mf(t);case"keypress":return t.which!==32?null:(bu=!0,Ju);case"textInput":return e=t.data,e===Ju&&bu?null:e;default:return null}}function em(e,t){if(En)return e==="compositionend"||!Zs&&hf(e,t)?(e=df(),Io=Ks=Lt=null,En=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return pf&&t.locale!=="ko"?null:t.data;default:return null}}var tm={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function ea(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t==="input"?!!tm[e.type]:t==="textarea"}function gf(e,t,n,r){Qc(r),t=Jo(t,"onChange"),0<t.length&&(n=new Gs("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var kr=null,zr=null;function nm(e){Tf(e,0)}function Pl(e){var t=Tn(e);if(Dc(t))return e}function rm(e,t){if(e==="change")return t}var yf=!1;if(kt){var li;if(kt){var ii="oninput"in document;if(!ii){var ta=document.createElement("div");ta.setAttribute("oninput","return;"),ii=typeof ta.oninput=="function"}li=ii}else li=!1;yf=li&&(!document.documentMode||9<document.documentMode)}function na(){kr&&(kr.detachEvent("onpropertychange",vf),zr=kr=null)}function vf(e){if(e.propertyName==="value"&&Pl(zr)){var t=[];gf(t,zr,e,Hs(e)),Zc(nm,t)}}function om(e,t,n){e==="focusin"?(na(),kr=t,zr=n,kr.attachEvent("onpropertychange",vf)):e==="focusout"&&na()}function lm(e){if(e==="selectionchange"||e==="keyup"||e==="keydown")return Pl(zr)}function im(e,t){if(e==="click")return Pl(t)}function sm(e,t){if(e==="input"||e==="change")return Pl(t)}function um(e,t){return e===t&&(e!==0||1/e===1/t)||e!==e&&t!==t}var it=typeof Object.is=="function"?Object.is:um;function Mr(e,t){if(it(e,t))return!0;if(typeof e!="object"||e===null||typeof t!="object"||t===null)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var o=n[r];if(!Oi.call(t,o)||!it(e[o],t[o]))return!1}return!0}function ra(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function oa(e,t){var n=ra(e);e=0;for(var r;n;){if(n.nodeType===3){if(r=e+n.textContent.length,e<=t&&r>=t)return{node:n,offset:t-e};e=r}e:{for(;n;){if(n.nextSibling){n=n.nextSibling;break e}n=n.parentNode}n=void 0}n=ra(n)}}function wf(e,t){return e&&t?e===t?!0:e&&e.nodeType===3?!1:t&&t.nodeType===3?wf(e,t.parentNode):"contains"in e?e.contains(t):e.compareDocumentPosition?!!(e.compareDocumentPosition(t)&16):!1:!1}function kf(){for(var e=window,t=Yo();t instanceof e.HTMLIFrameElement;){try{var n=typeof t.contentWindow.location.href=="string"}catch{n=!1}if(n)e=t.contentWindow;else break;t=Yo(e.document)}return t}function qs(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&(t==="input"&&(e.type==="text"||e.type==="search"||e.type==="tel"||e.type==="url"||e.type==="password")||t==="textarea"||e.contentEditable==="true")}function am(e){var t=kf(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&wf(n.ownerDocument.documentElement,n)){if(r!==null&&qs(n)){if(t=r.start,e=r.end,e===void 0&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if(e=(t=n.ownerDocument||document)&&t.defaultView||window,e.getSelection){e=e.getSelection();var o=n.textContent.length,l=Math.min(r.start,o);r=r.end===void 0?l:Math.min(r.end,o),!e.extend&&l>r&&(o=r,r=l,l=o),o=oa(n,l);var i=oa(n,r);o&&i&&(e.rangeCount!==1||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&(t=t.createRange(),t.setStart(o.node,o.offset),e.removeAllRanges(),l>r?(e.addRange(t),e.extend(i.node,i.offset)):(t.setEnd(i.node,i.offset),e.addRange(t)))}}for(t=[],e=n;e=e.parentNode;)e.nodeType===1&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(typeof n.focus=="function"&&n.focus(),n=0;n<t.length;n++)e=t[n],e.element.scrollLeft=e.left,e.element.scrollTop=e.top}}var cm=kt&&"documentMode"in document&&11>=document.documentMode,_n=null,Zi=null,Sr=null,qi=!1;function la(e,t,n){var r=n.window===n?n.document:n.nodeType===9?n:n.ownerDocument;qi||_n==null||_n!==Yo(r)||(r=_n,"selectionStart"in r&&qs(r)?r={start:r.selectionStart,end:r.selectionEnd}:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection(),r={anchorNode:r.anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset}),Sr&&Mr(Sr,r)||(Sr=r,r=Jo(Zi,"onSelect"),0<r.length&&(t=new Gs("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=_n)))}function fo(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Pn={animationend:fo("Animation","AnimationEnd"),animationiteration:fo("Animation","AnimationIteration"),animationstart:fo("Animation","AnimationStart"),transitionend:fo("Transition","TransitionEnd")},si={},Sf={};kt&&(Sf=document.createElement("div").style,"AnimationEvent"in window||(delete Pn.animationend.animation,delete Pn.animationiteration.animation,delete Pn.animationstart.animation),"TransitionEvent"in window||delete Pn.transitionend.transition);function Tl(e){if(si[e])return si[e];if(!Pn[e])return e;var t=Pn[e],n;for(n in t)if(t.hasOwnProperty(n)&&n in Sf)return si[e]=t[n];return e}var xf=Tl("animationend"),Cf=Tl("animationiteration"),Ef=Tl("animationstart"),_f=Tl("transitionend"),Pf=new Map,ia="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Qt(e,t){Pf.set(e,t),gn(t,[e])}for(var ui=0;ui<ia.length;ui++){var ai=ia[ui],fm=ai.toLowerCase(),dm=ai[0].toUpperCase()+ai.slice(1);Qt(fm,"on"+dm)}Qt(xf,"onAnimationEnd");Qt(Cf,"onAnimationIteration");Qt(Ef,"onAnimationStart");Qt("dblclick","onDoubleClick");Qt("focusin","onFocus");Qt("focusout","onBlur");Qt(_f,"onTransitionEnd");Hn("onMouseEnter",["mouseout","mouseover"]);Hn("onMouseLeave",["mouseout","mouseover"]);Hn("onPointerEnter",["pointerout","pointerover"]);Hn("onPointerLeave",["pointerout","pointerover"]);gn("onChange","change click focusin focusout input keydown keyup selectionchange".split(" "));gn("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));gn("onBeforeInput",["compositionend","keypress","textInput","paste"]);gn("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" "));gn("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" "));gn("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var hr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),pm=new Set("cancel close invalid load scroll toggle".split(" ").concat(hr));function sa(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,fh(r,t,void 0,e),e.currentTarget=null}function Tf(e,t){t=(t&4)!==0;for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var l=void 0;if(t)for(var i=r.length-1;0<=i;i--){var s=r[i],u=s.instance,f=s.currentTarget;if(s=s.listener,u!==l&&o.isPropagationStopped())break e;sa(o,s,f),l=u}else for(i=0;i<r.length;i++){if(s=r[i],u=s.instance,f=s.currentTarget,s=s.listener,u!==l&&o.isPropagationStopped())break e;sa(o,s,f),l=u}}}if(Ko)throw e=Qi,Ko=!1,Qi=null,e}function J(e,t){var n=t[ns];n===void 0&&(n=t[ns]=new Set);var r=e+"__bubble";n.has(r)||($f(t,e,2,!1),n.add(r))}function ci(e,t,n){var r=0;t&&(r|=4),$f(n,e,r,t)}var po="_reactListening"+Math.random().toString(36).slice(2);function Ar(e){if(!e[po]){e[po]=!0,jc.forEach(function(n){n!=="selectionchange"&&(pm.has(n)||ci(n,!1,e),ci(n,!0,e))});var t=e.nodeType===9?e:e.ownerDocument;t===null||t[po]||(t[po]=!0,ci("selectionchange",!1,t))}}function $f(e,t,n,r){switch(ff(t)){case 1:var o=Th;break;case 4:o=$h;break;default:o=Qs}n=o.bind(null,t,n,e),o=void 0,!Yi||t!=="touchstart"&&t!=="touchmove"&&t!=="wheel"||(o=!0),r?o!==void 0?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):o!==void 0?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function fi(e,t,n,r,o){var l=r;if(!(t&1)&&!(t&2)&&r!==null)e:for(;;){if(r===null)return;var i=r.tag;if(i===3||i===4){var s=r.stateNode.containerInfo;if(s===o||s.nodeType===8&&s.parentNode===o)break;if(i===4)for(i=r.return;i!==null;){var u=i.tag;if((u===3||u===4)&&(u=i.stateNode.containerInfo,u===o||u.nodeType===8&&u.parentNode===o))return;i=i.return}for(;s!==null;){if(i=bt(s),i===null)return;if(u=i.tag,u===5||u===6){r=l=i;continue e}s=s.parentNode}}r=r.return}Zc(function(){var f=l,m=Hs(n),g=[];e:{var h=Pf.get(e);if(h!==void 0){var v=Gs,w=e;switch(e){case"keypress":if(Oo(n)===0)break e;case"keydown":case"keyup":v=Wh;break;case"focusin":w="focus",v=oi;break;case"focusout":w="blur",v=oi;break;case"beforeblur":case"afterblur":v=oi;break;case"click":if(n.button===2)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":v=Xu;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":v=Oh;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":v=Qh;break;case xf:case Cf:case Ef:v=jh;break;case _f:v=Gh;break;case"scroll":v=Nh;break;case"wheel":v=Zh;break;case"copy":case"cut":case"paste":v=Mh;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":v=qu}var k=(t&4)!==0,P=!k&&e==="scroll",c=k?h!==null?h+"Capture":null:h;k=[];for(var a=f,d;a!==null;){d=a;var p=d.stateNode;if(d.tag===5&&p!==null&&(d=p,c!==null&&(p=Or(a,c),p!=null&&k.push(Fr(a,p,d)))),P)break;a=a.return}0<k.length&&(h=new v(h,w,null,n,m),g.push({event:h,listeners:k}))}}if(!(t&7)){e:{if(h=e==="mouseover"||e==="pointerover",v=e==="mouseout"||e==="pointerout",h&&n!==Wi&&(w=n.relatedTarget||n.fromElement)&&(bt(w)||w[St]))break e;if((v||h)&&(h=m.window===m?m:(h=m.ownerDocument)?h.defaultView||h.parentWindow:window,v?(w=n.relatedTarget||n.toElement,v=f,w=w?bt(w):null,w!==null&&(P=yn(w),w!==P||w.tag!==5&&w.tag!==6)&&(w=null)):(v=null,w=f),v!==w)){if(k=Xu,p="onMouseLeave",c="onMouseEnter",a="mouse",(e==="pointerout"||e==="pointerover")&&(k=qu,p="onPointerLeave",c="onPointerEnter",a="pointer"),P=v==null?h:Tn(v),d=w==null?h:Tn(w),h=new k(p,a+"leave",v,n,m),h.target=P,h.relatedTarget=d,p=null,bt(m)===f&&(k=new k(c,a+"enter",w,n,m),k.target=d,k.relatedTarget=P,p=k),P=p,v&&w)t:{for(k=v,c=w,a=0,d=k;d;d=vn(d))a++;for(d=0,p=c;p;p=vn(p))d++;for(;0<a-d;)k=vn(k),a--;for(;0<d-a;)c=vn(c),d--;for(;a--;){if(k===c||c!==null&&k===c.alternate)break t;k=vn(k),c=vn(c)}k=null}else k=null;v!==null&&ua(g,h,v,k,!1),w!==null&&P!==null&&ua(g,P,w,k,!0)}}e:{if(h=f?Tn(f):window,v=h.nodeName&&h.nodeName.toLowerCase(),v==="select"||v==="input"&&h.type==="file")var S=rm;else if(ea(h))if(yf)S=sm;else{S=lm;var x=om}else(v=h.nodeName)&&v.toLowerCase()==="input"&&(h.type==="checkbox"||h.type==="radio")&&(S=im);if(S&&(S=S(e,f))){gf(g,S,n,m);break e}x&&x(e,h,f),e==="focusout"&&(x=h._wrapperState)&&x.controlled&&h.type==="number"&&Fi(h,"number",h.value)}switch(x=f?Tn(f):window,e){case"focusin":(ea(x)||x.contentEditable==="true")&&(_n=x,Zi=f,Sr=null);break;case"focusout":Sr=Zi=_n=null;break;case"mousedown":qi=!0;break;case"contextmenu":case"mouseup":case"dragend":qi=!1,la(g,n,m);break;case"selectionchange":if(cm)break;case"keydown":case"keyup":la(g,n,m)}var y;if(Zs)e:{switch(e){case"compositionstart":var C="onCompositionStart";break e;case"compositionend":C="onCompositionEnd";break e;case"compositionupdate":C="onCompositionUpdate";break e}C=void 0}else En?hf(e,n)&&(C="onCompositionEnd"):e==="keydown"&&n.keyCode===229&&(C="onCompositionStart");C&&(pf&&n.locale!=="ko"&&(En||C!=="onCompositionStart"?C==="onCompositionEnd"&&En&&(y=df()):(Lt=m,Ks="value"in Lt?Lt.value:Lt.textContent,En=!0)),x=Jo(f,C),0<x.length&&(C=new Zu(C,e,null,n,m),g.push({event:C,listeners:x}),y?C.data=y:(y=mf(n),y!==null&&(C.data=y)))),(y=Jh?bh(e,n):em(e,n))&&(f=Jo(f,"onBeforeInput"),0<f.length&&(m=new Zu("onBeforeInput","beforeinput",null,n,m),g.push({event:m,listeners:f}),m.data=y))}Tf(g,t)})}function Fr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Jo(e,t){for(var n=t+"Capture",r=[];e!==null;){var o=e,l=o.stateNode;o.tag===5&&l!==null&&(o=l,l=Or(e,n),l!=null&&r.unshift(Fr(e,l,o)),l=Or(e,t),l!=null&&r.push(Fr(e,l,o))),e=e.return}return r}function vn(e){if(e===null)return null;do e=e.return;while(e&&e.tag!==5);return e||null}function ua(e,t,n,r,o){for(var l=t._reactName,i=[];n!==null&&n!==r;){var s=n,u=s.alternate,f=s.stateNode;if(u!==null&&u===r)break;s.tag===5&&f!==null&&(s=f,o?(u=Or(n,l),u!=null&&i.unshift(Fr(n,u,s))):o||(u=Or(n,l),u!=null&&i.push(Fr(n,u,s)))),n=n.return}i.length!==0&&e.push({event:t,listeners:i})}var hm=/\r\n?/g,mm=/\u0000|\uFFFD/g;function aa(e){return(typeof e=="string"?e:""+e).replace(hm,`
`).replace(mm,"")}function ho(e,t,n){if(t=aa(t),aa(e)!==t&&n)throw Error(T(425))}function bo(){}var Ji=null,bi=null;function es(e,t){return e==="textarea"||e==="noscript"||typeof t.children=="string"||typeof t.children=="number"||typeof t.dangerouslySetInnerHTML=="object"&&t.dangerouslySetInnerHTML!==null&&t.dangerouslySetInnerHTML.__html!=null}var ts=typeof setTimeout=="function"?setTimeout:void 0,gm=typeof clearTimeout=="function"?clearTimeout:void 0,ca=typeof Promise=="function"?Promise:void 0,ym=typeof queueMicrotask=="function"?queueMicrotask:typeof ca<"u"?function(e){return ca.resolve(null).then(e).catch(vm)}:ts;function vm(e){setTimeout(function(){throw e})}function di(e,t){var n=t,r=0;do{var o=n.nextSibling;if(e.removeChild(n),o&&o.nodeType===8)if(n=o.data,n==="/$"){if(r===0){e.removeChild(o),jr(t);return}r--}else n!=="$"&&n!=="$?"&&n!=="$!"||r++;n=o}while(n);jr(t)}function Ft(e){for(;e!=null;e=e.nextSibling){var t=e.nodeType;if(t===1||t===3)break;if(t===8){if(t=e.data,t==="$"||t==="$!"||t==="$?")break;if(t==="/$")return null}}return e}function fa(e){e=e.previousSibling;for(var t=0;e;){if(e.nodeType===8){var n=e.data;if(n==="$"||n==="$!"||n==="$?"){if(t===0)return e;t--}else n==="/$"&&t++}e=e.previousSibling}return null}var tr=Math.random().toString(36).slice(2),ft="__reactFiber$"+tr,Dr="__reactProps$"+tr,St="__reactContainer$"+tr,ns="__reactEvents$"+tr,wm="__reactListeners$"+tr,km="__reactHandles$"+tr;function bt(e){var t=e[ft];if(t)return t;for(var n=e.parentNode;n;){if(t=n[St]||n[ft]){if(n=t.alternate,t.child!==null||n!==null&&n.child!==null)for(e=fa(e);e!==null;){if(n=e[ft])return n;e=fa(e)}return t}e=n,n=e.parentNode}return null}function br(e){return e=e[ft]||e[St],!e||e.tag!==5&&e.tag!==6&&e.tag!==13&&e.tag!==3?null:e}function Tn(e){if(e.tag===5||e.tag===6)return e.stateNode;throw Error(T(33))}function $l(e){return e[Dr]||null}var rs=[],$n=-1;function Kt(e){return{current:e}}function ee(e){0>$n||(e.current=rs[$n],rs[$n]=null,$n--)}function q(e,t){$n++,rs[$n]=e.current,e.current=t}var Yt={},_e=Kt(Yt),je=Kt(!1),an=Yt;function Wn(e,t){var n=e.type.contextTypes;if(!n)return Yt;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o={},l;for(l in n)o[l]=t[l];return r&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function ze(e){return e=e.childContextTypes,e!=null}function el(){ee(je),ee(_e)}function da(e,t,n){if(_e.current!==Yt)throw Error(T(168));q(_e,t),q(je,n)}function Nf(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,typeof r.getChildContext!="function")return n;r=r.getChildContext();for(var o in r)if(!(o in t))throw Error(T(108,oh(e)||"Unknown",o));return le({},n,r)}function tl(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Yt,an=_e.current,q(_e,e),q(je,je.current),!0}function pa(e,t,n){var r=e.stateNode;if(!r)throw Error(T(169));n?(e=Nf(e,t,an),r.__reactInternalMemoizedMergedChildContext=e,ee(je),ee(_e),q(_e,e)):ee(je),q(je,n)}var gt=null,Nl=!1,pi=!1;function If(e){gt===null?gt=[e]:gt.push(e)}function Sm(e){Nl=!0,If(e)}function Gt(){if(!pi&&gt!==null){pi=!0;var e=0,t=X;try{var n=gt;for(X=1;e<n.length;e++){var r=n[e];do r=r(!0);while(r!==null)}gt=null,Nl=!1}catch(o){throw gt!==null&&(gt=gt.slice(e+1)),ef(Ws,Gt),o}finally{X=t,pi=!1}}return null}var Nn=[],In=0,nl=null,rl=0,Qe=[],Ke=0,cn=null,yt=1,vt="";function qt(e,t){Nn[In++]=rl,Nn[In++]=nl,nl=e,rl=t}function Of(e,t,n){Qe[Ke++]=yt,Qe[Ke++]=vt,Qe[Ke++]=cn,cn=e;var r=yt;e=vt;var o=32-rt(r)-1;r&=~(1<<o),n+=1;var l=32-rt(t)+o;if(30<l){var i=o-o%5;l=(r&(1<<i)-1).toString(32),r>>=i,o-=i,yt=1<<32-rt(t)+o|n<<o|r,vt=l+e}else yt=1<<l|n<<o|r,vt=e}function Js(e){e.return!==null&&(qt(e,1),Of(e,1,0))}function bs(e){for(;e===nl;)nl=Nn[--In],Nn[In]=null,rl=Nn[--In],Nn[In]=null;for(;e===cn;)cn=Qe[--Ke],Qe[Ke]=null,vt=Qe[--Ke],Qe[Ke]=null,yt=Qe[--Ke],Qe[Ke]=null}var He=null,Ue=null,te=!1,nt=null;function Lf(e,t){var n=Ge(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,t=e.deletions,t===null?(e.deletions=[n],e.flags|=16):t.push(n)}function ha(e,t){switch(e.tag){case 5:var n=e.type;return t=t.nodeType!==1||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t,t!==null?(e.stateNode=t,He=e,Ue=Ft(t.firstChild),!0):!1;case 6:return t=e.pendingProps===""||t.nodeType!==3?null:t,t!==null?(e.stateNode=t,He=e,Ue=null,!0):!1;case 13:return t=t.nodeType!==8?null:t,t!==null?(n=cn!==null?{id:yt,overflow:vt}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},n=Ge(18,null,null,0),n.stateNode=t,n.return=e,e.child=n,He=e,Ue=null,!0):!1;default:return!1}}function os(e){return(e.mode&1)!==0&&(e.flags&128)===0}function ls(e){if(te){var t=Ue;if(t){var n=t;if(!ha(e,t)){if(os(e))throw Error(T(418));t=Ft(n.nextSibling);var r=He;t&&ha(e,t)?Lf(r,n):(e.flags=e.flags&-4097|2,te=!1,He=e)}}else{if(os(e))throw Error(T(418));e.flags=e.flags&-4097|2,te=!1,He=e}}}function ma(e){for(e=e.return;e!==null&&e.tag!==5&&e.tag!==3&&e.tag!==13;)e=e.return;He=e}function mo(e){if(e!==He)return!1;if(!te)return ma(e),te=!0,!1;var t;if((t=e.tag!==3)&&!(t=e.tag!==5)&&(t=e.type,t=t!=="head"&&t!=="body"&&!es(e.type,e.memoizedProps)),t&&(t=Ue)){if(os(e))throw Rf(),Error(T(418));for(;t;)Lf(e,t),t=Ft(t.nextSibling)}if(ma(e),e.tag===13){if(e=e.memoizedState,e=e!==null?e.dehydrated:null,!e)throw Error(T(317));e:{for(e=e.nextSibling,t=0;e;){if(e.nodeType===8){var n=e.data;if(n==="/$"){if(t===0){Ue=Ft(e.nextSibling);break e}t--}else n!=="$"&&n!=="$!"&&n!=="$?"||t++}e=e.nextSibling}Ue=null}}else Ue=He?Ft(e.stateNode.nextSibling):null;return!0}function Rf(){for(var e=Ue;e;)e=Ft(e.nextSibling)}function Vn(){Ue=He=null,te=!1}function eu(e){nt===null?nt=[e]:nt.push(e)}var xm=Et.ReactCurrentBatchConfig;function ur(e,t,n){if(e=n.ref,e!==null&&typeof e!="function"&&typeof e!="object"){if(n._owner){if(n=n._owner,n){if(n.tag!==1)throw Error(T(309));var r=n.stateNode}if(!r)throw Error(T(147,e));var o=r,l=""+e;return t!==null&&t.ref!==null&&typeof t.ref=="function"&&t.ref._stringRef===l?t.ref:(t=function(i){var s=o.refs;i===null?delete s[l]:s[l]=i},t._stringRef=l,t)}if(typeof e!="string")throw Error(T(284));if(!n._owner)throw Error(T(290,e))}return e}function go(e,t){throw e=Object.prototype.toString.call(t),Error(T(31,e==="[object Object]"?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function ga(e){var t=e._init;return t(e._payload)}function jf(e){function t(c,a){if(e){var d=c.deletions;d===null?(c.deletions=[a],c.flags|=16):d.push(a)}}function n(c,a){if(!e)return null;for(;a!==null;)t(c,a),a=a.sibling;return null}function r(c,a){for(c=new Map;a!==null;)a.key!==null?c.set(a.key,a):c.set(a.index,a),a=a.sibling;return c}function o(c,a){return c=Ht(c,a),c.index=0,c.sibling=null,c}function l(c,a,d){return c.index=d,e?(d=c.alternate,d!==null?(d=d.index,d<a?(c.flags|=2,a):d):(c.flags|=2,a)):(c.flags|=1048576,a)}function i(c){return e&&c.alternate===null&&(c.flags|=2),c}function s(c,a,d,p){return a===null||a.tag!==6?(a=ki(d,c.mode,p),a.return=c,a):(a=o(a,d),a.return=c,a)}function u(c,a,d,p){var S=d.type;return S===Cn?m(c,a,d.props.children,p,d.key):a!==null&&(a.elementType===S||typeof S=="object"&&S!==null&&S.$$typeof===$t&&ga(S)===a.type)?(p=o(a,d.props),p.ref=ur(c,a,d),p.return=c,p):(p=Fo(d.type,d.key,d.props,null,c.mode,p),p.ref=ur(c,a,d),p.return=c,p)}function f(c,a,d,p){return a===null||a.tag!==4||a.stateNode.containerInfo!==d.containerInfo||a.stateNode.implementation!==d.implementation?(a=Si(d,c.mode,p),a.return=c,a):(a=o(a,d.children||[]),a.return=c,a)}function m(c,a,d,p,S){return a===null||a.tag!==7?(a=on(d,c.mode,p,S),a.return=c,a):(a=o(a,d),a.return=c,a)}function g(c,a,d){if(typeof a=="string"&&a!==""||typeof a=="number")return a=ki(""+a,c.mode,d),a.return=c,a;if(typeof a=="object"&&a!==null){switch(a.$$typeof){case oo:return d=Fo(a.type,a.key,a.props,null,c.mode,d),d.ref=ur(c,null,a),d.return=c,d;case xn:return a=Si(a,c.mode,d),a.return=c,a;case $t:var p=a._init;return g(c,p(a._payload),d)}if(dr(a)||rr(a))return a=on(a,c.mode,d,null),a.return=c,a;go(c,a)}return null}function h(c,a,d,p){var S=a!==null?a.key:null;if(typeof d=="string"&&d!==""||typeof d=="number")return S!==null?null:s(c,a,""+d,p);if(typeof d=="object"&&d!==null){switch(d.$$typeof){case oo:return d.key===S?u(c,a,d,p):null;case xn:return d.key===S?f(c,a,d,p):null;case $t:return S=d._init,h(c,a,S(d._payload),p)}if(dr(d)||rr(d))return S!==null?null:m(c,a,d,p,null);go(c,d)}return null}function v(c,a,d,p,S){if(typeof p=="string"&&p!==""||typeof p=="number")return c=c.get(d)||null,s(a,c,""+p,S);if(typeof p=="object"&&p!==null){switch(p.$$typeof){case oo:return c=c.get(p.key===null?d:p.key)||null,u(a,c,p,S);case xn:return c=c.get(p.key===null?d:p.key)||null,f(a,c,p,S);case $t:var x=p._init;return v(c,a,d,x(p._payload),S)}if(dr(p)||rr(p))return c=c.get(d)||null,m(a,c,p,S,null);go(a,p)}return null}function w(c,a,d,p){for(var S=null,x=null,y=a,C=a=0,O=null;y!==null&&C<d.length;C++){y.index>C?(O=y,y=null):O=y.sibling;var N=h(c,y,d[C],p);if(N===null){y===null&&(y=O);break}e&&y&&N.alternate===null&&t(c,y),a=l(N,a,C),x===null?S=N:x.sibling=N,x=N,y=O}if(C===d.length)return n(c,y),te&&qt(c,C),S;if(y===null){for(;C<d.length;C++)y=g(c,d[C],p),y!==null&&(a=l(y,a,C),x===null?S=y:x.sibling=y,x=y);return te&&qt(c,C),S}for(y=r(c,y);C<d.length;C++)O=v(y,c,C,d[C],p),O!==null&&(e&&O.alternate!==null&&y.delete(O.key===null?C:O.key),a=l(O,a,C),x===null?S=O:x.sibling=O,x=O);return e&&y.forEach(function(D){return t(c,D)}),te&&qt(c,C),S}function k(c,a,d,p){var S=rr(d);if(typeof S!="function")throw Error(T(150));if(d=S.call(d),d==null)throw Error(T(151));for(var x=S=null,y=a,C=a=0,O=null,N=d.next();y!==null&&!N.done;C++,N=d.next()){y.index>C?(O=y,y=null):O=y.sibling;var D=h(c,y,N.value,p);if(D===null){y===null&&(y=O);break}e&&y&&D.alternate===null&&t(c,y),a=l(D,a,C),x===null?S=D:x.sibling=D,x=D,y=O}if(N.done)return n(c,y),te&&qt(c,C),S;if(y===null){for(;!N.done;C++,N=d.next())N=g(c,N.value,p),N!==null&&(a=l(N,a,C),x===null?S=N:x.sibling=N,x=N);return te&&qt(c,C),S}for(y=r(c,y);!N.done;C++,N=d.next())N=v(y,c,C,N.value,p),N!==null&&(e&&N.alternate!==null&&y.delete(N.key===null?C:N.key),a=l(N,a,C),x===null?S=N:x.sibling=N,x=N);return e&&y.forEach(function(ne){return t(c,ne)}),te&&qt(c,C),S}function P(c,a,d,p){if(typeof d=="object"&&d!==null&&d.type===Cn&&d.key===null&&(d=d.props.children),typeof d=="object"&&d!==null){switch(d.$$typeof){case oo:e:{for(var S=d.key,x=a;x!==null;){if(x.key===S){if(S=d.type,S===Cn){if(x.tag===7){n(c,x.sibling),a=o(x,d.props.children),a.return=c,c=a;break e}}else if(x.elementType===S||typeof S=="object"&&S!==null&&S.$$typeof===$t&&ga(S)===x.type){n(c,x.sibling),a=o(x,d.props),a.ref=ur(c,x,d),a.return=c,c=a;break e}n(c,x);break}else t(c,x);x=x.sibling}d.type===Cn?(a=on(d.props.children,c.mode,p,d.key),a.return=c,c=a):(p=Fo(d.type,d.key,d.props,null,c.mode,p),p.ref=ur(c,a,d),p.return=c,c=p)}return i(c);case xn:e:{for(x=d.key;a!==null;){if(a.key===x)if(a.tag===4&&a.stateNode.containerInfo===d.containerInfo&&a.stateNode.implementation===d.implementation){n(c,a.sibling),a=o(a,d.children||[]),a.return=c,c=a;break e}else{n(c,a);break}else t(c,a);a=a.sibling}a=Si(d,c.mode,p),a.return=c,c=a}return i(c);case $t:return x=d._init,P(c,a,x(d._payload),p)}if(dr(d))return w(c,a,d,p);if(rr(d))return k(c,a,d,p);go(c,d)}return typeof d=="string"&&d!==""||typeof d=="number"?(d=""+d,a!==null&&a.tag===6?(n(c,a.sibling),a=o(a,d),a.return=c,c=a):(n(c,a),a=ki(d,c.mode,p),a.return=c,c=a),i(c)):n(c,a)}return P}var Yn=jf(!0),zf=jf(!1),ol=Kt(null),ll=null,On=null,tu=null;function nu(){tu=On=ll=null}function ru(e){var t=ol.current;ee(ol),e._currentValue=t}function is(e,t,n){for(;e!==null;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,r!==null&&(r.childLanes|=t)):r!==null&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Un(e,t){ll=e,tu=On=null,e=e.dependencies,e!==null&&e.firstContext!==null&&(e.lanes&t&&(Re=!0),e.firstContext=null)}function Ze(e){var t=e._currentValue;if(tu!==e)if(e={context:e,memoizedValue:t,next:null},On===null){if(ll===null)throw Error(T(308));On=e,ll.dependencies={lanes:0,firstContext:e}}else On=On.next=e;return t}var en=null;function ou(e){en===null?en=[e]:en.push(e)}function Mf(e,t,n,r){var o=t.interleaved;return o===null?(n.next=n,ou(t)):(n.next=o.next,o.next=n),t.interleaved=n,xt(e,r)}function xt(e,t){e.lanes|=t;var n=e.alternate;for(n!==null&&(n.lanes|=t),n=e,e=e.return;e!==null;)e.childLanes|=t,n=e.alternate,n!==null&&(n.childLanes|=t),n=e,e=e.return;return n.tag===3?n.stateNode:null}var Nt=!1;function lu(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Af(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function wt(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Dt(e,t,n){var r=e.updateQueue;if(r===null)return null;if(r=r.shared,Q&2){var o=r.pending;return o===null?t.next=t:(t.next=o.next,o.next=t),r.pending=t,xt(e,n)}return o=r.interleaved,o===null?(t.next=t,ou(r)):(t.next=o.next,o.next=t),r.interleaved=t,xt(e,n)}function Lo(e,t,n){if(t=t.updateQueue,t!==null&&(t=t.shared,(n&4194240)!==0)){var r=t.lanes;r&=e.pendingLanes,n|=r,t.lanes=n,Vs(e,n)}}function ya(e,t){var n=e.updateQueue,r=e.alternate;if(r!==null&&(r=r.updateQueue,n===r)){var o=null,l=null;if(n=n.firstBaseUpdate,n!==null){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};l===null?o=l=i:l=l.next=i,n=n.next}while(n!==null);l===null?o=l=t:l=l.next=t}else o=l=t;n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:l,shared:r.shared,effects:r.effects},e.updateQueue=n;return}e=n.lastBaseUpdate,e===null?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function il(e,t,n,r){var o=e.updateQueue;Nt=!1;var l=o.firstBaseUpdate,i=o.lastBaseUpdate,s=o.shared.pending;if(s!==null){o.shared.pending=null;var u=s,f=u.next;u.next=null,i===null?l=f:i.next=f,i=u;var m=e.alternate;m!==null&&(m=m.updateQueue,s=m.lastBaseUpdate,s!==i&&(s===null?m.firstBaseUpdate=f:s.next=f,m.lastBaseUpdate=u))}if(l!==null){var g=o.baseState;i=0,m=f=u=null,s=l;do{var h=s.lane,v=s.eventTime;if((r&h)===h){m!==null&&(m=m.next={eventTime:v,lane:0,tag:s.tag,payload:s.payload,callback:s.callback,next:null});e:{var w=e,k=s;switch(h=t,v=n,k.tag){case 1:if(w=k.payload,typeof w=="function"){g=w.call(v,g,h);break e}g=w;break e;case 3:w.flags=w.flags&-65537|128;case 0:if(w=k.payload,h=typeof w=="function"?w.call(v,g,h):w,h==null)break e;g=le({},g,h);break e;case 2:Nt=!0}}s.callback!==null&&s.lane!==0&&(e.flags|=64,h=o.effects,h===null?o.effects=[s]:h.push(s))}else v={eventTime:v,lane:h,tag:s.tag,payload:s.payload,callback:s.callback,next:null},m===null?(f=m=v,u=g):m=m.next=v,i|=h;if(s=s.next,s===null){if(s=o.shared.pending,s===null)break;h=s,s=h.next,h.next=null,o.lastBaseUpdate=h,o.shared.pending=null}}while(!0);if(m===null&&(u=g),o.baseState=u,o.firstBaseUpdate=f,o.lastBaseUpdate=m,t=o.shared.interleaved,t!==null){o=t;do i|=o.lane,o=o.next;while(o!==t)}else l===null&&(o.shared.lanes=0);dn|=i,e.lanes=i,e.memoizedState=g}}function va(e,t,n){if(e=t.effects,t.effects=null,e!==null)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(o!==null){if(r.callback=null,r=n,typeof o!="function")throw Error(T(191,o));o.call(r)}}}var eo={},pt=Kt(eo),Ur=Kt(eo),Br=Kt(eo);function tn(e){if(e===eo)throw Error(T(174));return e}function iu(e,t){switch(q(Br,t),q(Ur,e),q(pt,eo),e=t.nodeType,e){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Ui(null,"");break;default:e=e===8?t.parentNode:t,t=e.namespaceURI||null,e=e.tagName,t=Ui(t,e)}ee(pt),q(pt,t)}function Qn(){ee(pt),ee(Ur),ee(Br)}function Ff(e){tn(Br.current);var t=tn(pt.current),n=Ui(t,e.type);t!==n&&(q(Ur,e),q(pt,n))}function su(e){Ur.current===e&&(ee(pt),ee(Ur))}var re=Kt(0);function sl(e){for(var t=e;t!==null;){if(t.tag===13){var n=t.memoizedState;if(n!==null&&(n=n.dehydrated,n===null||n.data==="$?"||n.data==="$!"))return t}else if(t.tag===19&&t.memoizedProps.revealOrder!==void 0){if(t.flags&128)return t}else if(t.child!==null){t.child.return=t,t=t.child;continue}if(t===e)break;for(;t.sibling===null;){if(t.return===null||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var hi=[];function uu(){for(var e=0;e<hi.length;e++)hi[e]._workInProgressVersionPrimary=null;hi.length=0}var Ro=Et.ReactCurrentDispatcher,mi=Et.ReactCurrentBatchConfig,fn=0,oe=null,pe=null,me=null,ul=!1,xr=!1,Hr=0,Cm=0;function Se(){throw Error(T(321))}function au(e,t){if(t===null)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!it(e[n],t[n]))return!1;return!0}function cu(e,t,n,r,o,l){if(fn=l,oe=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Ro.current=e===null||e.memoizedState===null?Tm:$m,e=n(r,o),xr){l=0;do{if(xr=!1,Hr=0,25<=l)throw Error(T(301));l+=1,me=pe=null,t.updateQueue=null,Ro.current=Nm,e=n(r,o)}while(xr)}if(Ro.current=al,t=pe!==null&&pe.next!==null,fn=0,me=pe=oe=null,ul=!1,t)throw Error(T(300));return e}function fu(){var e=Hr!==0;return Hr=0,e}function at(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return me===null?oe.memoizedState=me=e:me=me.next=e,me}function qe(){if(pe===null){var e=oe.alternate;e=e!==null?e.memoizedState:null}else e=pe.next;var t=me===null?oe.memoizedState:me.next;if(t!==null)me=t,pe=e;else{if(e===null)throw Error(T(310));pe=e,e={memoizedState:pe.memoizedState,baseState:pe.baseState,baseQueue:pe.baseQueue,queue:pe.queue,next:null},me===null?oe.memoizedState=me=e:me=me.next=e}return me}function Wr(e,t){return typeof t=="function"?t(e):t}function gi(e){var t=qe(),n=t.queue;if(n===null)throw Error(T(311));n.lastRenderedReducer=e;var r=pe,o=r.baseQueue,l=n.pending;if(l!==null){if(o!==null){var i=o.next;o.next=l.next,l.next=i}r.baseQueue=o=l,n.pending=null}if(o!==null){l=o.next,r=r.baseState;var s=i=null,u=null,f=l;do{var m=f.lane;if((fn&m)===m)u!==null&&(u=u.next={lane:0,action:f.action,hasEagerState:f.hasEagerState,eagerState:f.eagerState,next:null}),r=f.hasEagerState?f.eagerState:e(r,f.action);else{var g={lane:m,action:f.action,hasEagerState:f.hasEagerState,eagerState:f.eagerState,next:null};u===null?(s=u=g,i=r):u=u.next=g,oe.lanes|=m,dn|=m}f=f.next}while(f!==null&&f!==l);u===null?i=r:u.next=s,it(r,t.memoizedState)||(Re=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=u,n.lastRenderedState=r}if(e=n.interleaved,e!==null){o=e;do l=o.lane,oe.lanes|=l,dn|=l,o=o.next;while(o!==e)}else o===null&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function yi(e){var t=qe(),n=t.queue;if(n===null)throw Error(T(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,l=t.memoizedState;if(o!==null){n.pending=null;var i=o=o.next;do l=e(l,i.action),i=i.next;while(i!==o);it(l,t.memoizedState)||(Re=!0),t.memoizedState=l,t.baseQueue===null&&(t.baseState=l),n.lastRenderedState=l}return[l,r]}function Df(){}function Uf(e,t){var n=oe,r=qe(),o=t(),l=!it(r.memoizedState,o);if(l&&(r.memoizedState=o,Re=!0),r=r.queue,du(Wf.bind(null,n,r,e),[e]),r.getSnapshot!==t||l||me!==null&&me.memoizedState.tag&1){if(n.flags|=2048,Vr(9,Hf.bind(null,n,r,o,t),void 0,null),ye===null)throw Error(T(349));fn&30||Bf(n,t,o)}return o}function Bf(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},t=oe.updateQueue,t===null?(t={lastEffect:null,stores:null},oe.updateQueue=t,t.stores=[e]):(n=t.stores,n===null?t.stores=[e]:n.push(e))}function Hf(e,t,n,r){t.value=n,t.getSnapshot=r,Vf(t)&&Yf(e)}function Wf(e,t,n){return n(function(){Vf(t)&&Yf(e)})}function Vf(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!it(e,n)}catch{return!0}}function Yf(e){var t=xt(e,1);t!==null&&ot(t,e,1,-1)}function wa(e){var t=at();return typeof e=="function"&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Wr,lastRenderedState:e},t.queue=e,e=e.dispatch=Pm.bind(null,oe,e),[t.memoizedState,e]}function Vr(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},t=oe.updateQueue,t===null?(t={lastEffect:null,stores:null},oe.updateQueue=t,t.lastEffect=e.next=e):(n=t.lastEffect,n===null?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e)),e}function Qf(){return qe().memoizedState}function jo(e,t,n,r){var o=at();oe.flags|=e,o.memoizedState=Vr(1|t,n,void 0,r===void 0?null:r)}function Il(e,t,n,r){var o=qe();r=r===void 0?null:r;var l=void 0;if(pe!==null){var i=pe.memoizedState;if(l=i.destroy,r!==null&&au(r,i.deps)){o.memoizedState=Vr(t,n,l,r);return}}oe.flags|=e,o.memoizedState=Vr(1|t,n,l,r)}function ka(e,t){return jo(8390656,8,e,t)}function du(e,t){return Il(2048,8,e,t)}function Kf(e,t){return Il(4,2,e,t)}function Gf(e,t){return Il(4,4,e,t)}function Xf(e,t){if(typeof t=="function")return e=e(),t(e),function(){t(null)};if(t!=null)return e=e(),t.current=e,function(){t.current=null}}function Zf(e,t,n){return n=n!=null?n.concat([e]):null,Il(4,4,Xf.bind(null,t,e),n)}function pu(){}function qf(e,t){var n=qe();t=t===void 0?null:t;var r=n.memoizedState;return r!==null&&t!==null&&au(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Jf(e,t){var n=qe();t=t===void 0?null:t;var r=n.memoizedState;return r!==null&&t!==null&&au(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function bf(e,t,n){return fn&21?(it(n,t)||(n=rf(),oe.lanes|=n,dn|=n,e.baseState=!0),t):(e.baseState&&(e.baseState=!1,Re=!0),e.memoizedState=n)}function Em(e,t){var n=X;X=n!==0&&4>n?n:4,e(!0);var r=mi.transition;mi.transition={};try{e(!1),t()}finally{X=n,mi.transition=r}}function ed(){return qe().memoizedState}function _m(e,t,n){var r=Bt(e);if(n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},td(e))nd(t,n);else if(n=Mf(e,t,n,r),n!==null){var o=Ne();ot(n,e,r,o),rd(n,t,r)}}function Pm(e,t,n){var r=Bt(e),o={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(td(e))nd(t,o);else{var l=e.alternate;if(e.lanes===0&&(l===null||l.lanes===0)&&(l=t.lastRenderedReducer,l!==null))try{var i=t.lastRenderedState,s=l(i,n);if(o.hasEagerState=!0,o.eagerState=s,it(s,i)){var u=t.interleaved;u===null?(o.next=o,ou(t)):(o.next=u.next,u.next=o),t.interleaved=o;return}}catch{}finally{}n=Mf(e,t,o,r),n!==null&&(o=Ne(),ot(n,e,r,o),rd(n,t,r))}}function td(e){var t=e.alternate;return e===oe||t!==null&&t===oe}function nd(e,t){xr=ul=!0;var n=e.pending;n===null?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function rd(e,t,n){if(n&4194240){var r=t.lanes;r&=e.pendingLanes,n|=r,t.lanes=n,Vs(e,n)}}var al={readContext:Ze,useCallback:Se,useContext:Se,useEffect:Se,useImperativeHandle:Se,useInsertionEffect:Se,useLayoutEffect:Se,useMemo:Se,useReducer:Se,useRef:Se,useState:Se,useDebugValue:Se,useDeferredValue:Se,useTransition:Se,useMutableSource:Se,useSyncExternalStore:Se,useId:Se,unstable_isNewReconciler:!1},Tm={readContext:Ze,useCallback:function(e,t){return at().memoizedState=[e,t===void 0?null:t],e},useContext:Ze,useEffect:ka,useImperativeHandle:function(e,t,n){return n=n!=null?n.concat([e]):null,jo(4194308,4,Xf.bind(null,t,e),n)},useLayoutEffect:function(e,t){return jo(4194308,4,e,t)},useInsertionEffect:function(e,t){return jo(4,2,e,t)},useMemo:function(e,t){var n=at();return t=t===void 0?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=at();return t=n!==void 0?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=_m.bind(null,oe,e),[r.memoizedState,e]},useRef:function(e){var t=at();return e={current:e},t.memoizedState=e},useState:wa,useDebugValue:pu,useDeferredValue:function(e){return at().memoizedState=e},useTransition:function(){var e=wa(!1),t=e[0];return e=Em.bind(null,e[1]),at().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=oe,o=at();if(te){if(n===void 0)throw Error(T(407));n=n()}else{if(n=t(),ye===null)throw Error(T(349));fn&30||Bf(r,t,n)}o.memoizedState=n;var l={value:n,getSnapshot:t};return o.queue=l,ka(Wf.bind(null,r,l,e),[e]),r.flags|=2048,Vr(9,Hf.bind(null,r,l,n,t),void 0,null),n},useId:function(){var e=at(),t=ye.identifierPrefix;if(te){var n=vt,r=yt;n=(r&~(1<<32-rt(r)-1)).toString(32)+n,t=":"+t+"R"+n,n=Hr++,0<n&&(t+="H"+n.toString(32)),t+=":"}else n=Cm++,t=":"+t+"r"+n.toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},$m={readContext:Ze,useCallback:qf,useContext:Ze,useEffect:du,useImperativeHandle:Zf,useInsertionEffect:Kf,useLayoutEffect:Gf,useMemo:Jf,useReducer:gi,useRef:Qf,useState:function(){return gi(Wr)},useDebugValue:pu,useDeferredValue:function(e){var t=qe();return bf(t,pe.memoizedState,e)},useTransition:function(){var e=gi(Wr)[0],t=qe().memoizedState;return[e,t]},useMutableSource:Df,useSyncExternalStore:Uf,useId:ed,unstable_isNewReconciler:!1},Nm={readContext:Ze,useCallback:qf,useContext:Ze,useEffect:du,useImperativeHandle:Zf,useInsertionEffect:Kf,useLayoutEffect:Gf,useMemo:Jf,useReducer:yi,useRef:Qf,useState:function(){return yi(Wr)},useDebugValue:pu,useDeferredValue:function(e){var t=qe();return pe===null?t.memoizedState=e:bf(t,pe.memoizedState,e)},useTransition:function(){var e=yi(Wr)[0],t=qe().memoizedState;return[e,t]},useMutableSource:Df,useSyncExternalStore:Uf,useId:ed,unstable_isNewReconciler:!1};function et(e,t){if(e&&e.defaultProps){t=le({},t),e=e.defaultProps;for(var n in e)t[n]===void 0&&(t[n]=e[n]);return t}return t}function ss(e,t,n,r){t=e.memoizedState,n=n(r,t),n=n==null?t:le({},t,n),e.memoizedState=n,e.lanes===0&&(e.updateQueue.baseState=n)}var Ol={isMounted:function(e){return(e=e._reactInternals)?yn(e)===e:!1},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=Ne(),o=Bt(e),l=wt(r,o);l.payload=t,n!=null&&(l.callback=n),t=Dt(e,l,o),t!==null&&(ot(t,e,o,r),Lo(t,e,o))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=Ne(),o=Bt(e),l=wt(r,o);l.tag=1,l.payload=t,n!=null&&(l.callback=n),t=Dt(e,l,o),t!==null&&(ot(t,e,o,r),Lo(t,e,o))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=Ne(),r=Bt(e),o=wt(n,r);o.tag=2,t!=null&&(o.callback=t),t=Dt(e,o,r),t!==null&&(ot(t,e,r,n),Lo(t,e,r))}};function Sa(e,t,n,r,o,l,i){return e=e.stateNode,typeof e.shouldComponentUpdate=="function"?e.shouldComponentUpdate(r,l,i):t.prototype&&t.prototype.isPureReactComponent?!Mr(n,r)||!Mr(o,l):!0}function od(e,t,n){var r=!1,o=Yt,l=t.contextType;return typeof l=="object"&&l!==null?l=Ze(l):(o=ze(t)?an:_e.current,r=t.contextTypes,l=(r=r!=null)?Wn(e,o):Yt),t=new t(n,l),e.memoizedState=t.state!==null&&t.state!==void 0?t.state:null,t.updater=Ol,e.stateNode=t,t._reactInternals=e,r&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=l),t}function xa(e,t,n,r){e=t.state,typeof t.componentWillReceiveProps=="function"&&t.componentWillReceiveProps(n,r),typeof t.UNSAFE_componentWillReceiveProps=="function"&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Ol.enqueueReplaceState(t,t.state,null)}function us(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs={},lu(e);var l=t.contextType;typeof l=="object"&&l!==null?o.context=Ze(l):(l=ze(t)?an:_e.current,o.context=Wn(e,l)),o.state=e.memoizedState,l=t.getDerivedStateFromProps,typeof l=="function"&&(ss(e,t,l,n),o.state=e.memoizedState),typeof t.getDerivedStateFromProps=="function"||typeof o.getSnapshotBeforeUpdate=="function"||typeof o.UNSAFE_componentWillMount!="function"&&typeof o.componentWillMount!="function"||(t=o.state,typeof o.componentWillMount=="function"&&o.componentWillMount(),typeof o.UNSAFE_componentWillMount=="function"&&o.UNSAFE_componentWillMount(),t!==o.state&&Ol.enqueueReplaceState(o,o.state,null),il(e,n,o,r),o.state=e.memoizedState),typeof o.componentDidMount=="function"&&(e.flags|=4194308)}function Kn(e,t){try{var n="",r=t;do n+=rh(r),r=r.return;while(r);var o=n}catch(l){o=`
Error generating stack: `+l.message+`
`+l.stack}return{value:e,source:t,stack:o,digest:null}}function vi(e,t,n){return{value:e,source:null,stack:n??null,digest:t??null}}function as(e,t){try{console.error(t.value)}catch(n){setTimeout(function(){throw n})}}var Im=typeof WeakMap=="function"?WeakMap:Map;function ld(e,t,n){n=wt(-1,n),n.tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){fl||(fl=!0,ws=r),as(e,t)},n}function id(e,t,n){n=wt(-1,n),n.tag=3;var r=e.type.getDerivedStateFromError;if(typeof r=="function"){var o=t.value;n.payload=function(){return r(o)},n.callback=function(){as(e,t)}}var l=e.stateNode;return l!==null&&typeof l.componentDidCatch=="function"&&(n.callback=function(){as(e,t),typeof r!="function"&&(Ut===null?Ut=new Set([this]):Ut.add(this));var i=t.stack;this.componentDidCatch(t.value,{componentStack:i!==null?i:""})}),n}function Ca(e,t,n){var r=e.pingCache;if(r===null){r=e.pingCache=new Im;var o=new Set;r.set(t,o)}else o=r.get(t),o===void 0&&(o=new Set,r.set(t,o));o.has(n)||(o.add(n),e=Vm.bind(null,e,t,n),t.then(e,e))}function Ea(e){do{var t;if((t=e.tag===13)&&(t=e.memoizedState,t=t!==null?t.dehydrated!==null:!0),t)return e;e=e.return}while(e!==null);return null}function _a(e,t,n,r,o){return e.mode&1?(e.flags|=65536,e.lanes=o,e):(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,n.tag===1&&(n.alternate===null?n.tag=17:(t=wt(-1,1),t.tag=2,Dt(n,t,1))),n.lanes|=1),e)}var Om=Et.ReactCurrentOwner,Re=!1;function Te(e,t,n,r){t.child=e===null?zf(t,null,n,r):Yn(t,e.child,n,r)}function Pa(e,t,n,r,o){n=n.render;var l=t.ref;return Un(t,o),r=cu(e,t,n,r,l,o),n=fu(),e!==null&&!Re?(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Ct(e,t,o)):(te&&n&&Js(t),t.flags|=1,Te(e,t,r,o),t.child)}function Ta(e,t,n,r,o){if(e===null){var l=n.type;return typeof l=="function"&&!Su(l)&&l.defaultProps===void 0&&n.compare===null&&n.defaultProps===void 0?(t.tag=15,t.type=l,sd(e,t,l,r,o)):(e=Fo(n.type,null,r,t,t.mode,o),e.ref=t.ref,e.return=t,t.child=e)}if(l=e.child,!(e.lanes&o)){var i=l.memoizedProps;if(n=n.compare,n=n!==null?n:Mr,n(i,r)&&e.ref===t.ref)return Ct(e,t,o)}return t.flags|=1,e=Ht(l,r),e.ref=t.ref,e.return=t,t.child=e}function sd(e,t,n,r,o){if(e!==null){var l=e.memoizedProps;if(Mr(l,r)&&e.ref===t.ref)if(Re=!1,t.pendingProps=r=l,(e.lanes&o)!==0)e.flags&131072&&(Re=!0);else return t.lanes=e.lanes,Ct(e,t,o)}return cs(e,t,n,r,o)}function ud(e,t,n){var r=t.pendingProps,o=r.children,l=e!==null?e.memoizedState:null;if(r.mode==="hidden")if(!(t.mode&1))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},q(Rn,Fe),Fe|=n;else{if(!(n&1073741824))return e=l!==null?l.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,q(Rn,Fe),Fe|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=l!==null?l.baseLanes:n,q(Rn,Fe),Fe|=r}else l!==null?(r=l.baseLanes|n,t.memoizedState=null):r=n,q(Rn,Fe),Fe|=r;return Te(e,t,o,n),t.child}function ad(e,t){var n=t.ref;(e===null&&n!==null||e!==null&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function cs(e,t,n,r,o){var l=ze(n)?an:_e.current;return l=Wn(t,l),Un(t,o),n=cu(e,t,n,r,l,o),r=fu(),e!==null&&!Re?(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Ct(e,t,o)):(te&&r&&Js(t),t.flags|=1,Te(e,t,n,o),t.child)}function $a(e,t,n,r,o){if(ze(n)){var l=!0;tl(t)}else l=!1;if(Un(t,o),t.stateNode===null)zo(e,t),od(t,n,r),us(t,n,r,o),r=!0;else if(e===null){var i=t.stateNode,s=t.memoizedProps;i.props=s;var u=i.context,f=n.contextType;typeof f=="object"&&f!==null?f=Ze(f):(f=ze(n)?an:_e.current,f=Wn(t,f));var m=n.getDerivedStateFromProps,g=typeof m=="function"||typeof i.getSnapshotBeforeUpdate=="function";g||typeof i.UNSAFE_componentWillReceiveProps!="function"&&typeof i.componentWillReceiveProps!="function"||(s!==r||u!==f)&&xa(t,i,r,f),Nt=!1;var h=t.memoizedState;i.state=h,il(t,r,i,o),u=t.memoizedState,s!==r||h!==u||je.current||Nt?(typeof m=="function"&&(ss(t,n,m,r),u=t.memoizedState),(s=Nt||Sa(t,n,s,r,h,u,f))?(g||typeof i.UNSAFE_componentWillMount!="function"&&typeof i.componentWillMount!="function"||(typeof i.componentWillMount=="function"&&i.componentWillMount(),typeof i.UNSAFE_componentWillMount=="function"&&i.UNSAFE_componentWillMount()),typeof i.componentDidMount=="function"&&(t.flags|=4194308)):(typeof i.componentDidMount=="function"&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=u),i.props=r,i.state=u,i.context=f,r=s):(typeof i.componentDidMount=="function"&&(t.flags|=4194308),r=!1)}else{i=t.stateNode,Af(e,t),s=t.memoizedProps,f=t.type===t.elementType?s:et(t.type,s),i.props=f,g=t.pendingProps,h=i.context,u=n.contextType,typeof u=="object"&&u!==null?u=Ze(u):(u=ze(n)?an:_e.current,u=Wn(t,u));var v=n.getDerivedStateFromProps;(m=typeof v=="function"||typeof i.getSnapshotBeforeUpdate=="function")||typeof i.UNSAFE_componentWillReceiveProps!="function"&&typeof i.componentWillReceiveProps!="function"||(s!==g||h!==u)&&xa(t,i,r,u),Nt=!1,h=t.memoizedState,i.state=h,il(t,r,i,o);var w=t.memoizedState;s!==g||h!==w||je.current||Nt?(typeof v=="function"&&(ss(t,n,v,r),w=t.memoizedState),(f=Nt||Sa(t,n,f,r,h,w,u)||!1)?(m||typeof i.UNSAFE_componentWillUpdate!="function"&&typeof i.componentWillUpdate!="function"||(typeof i.componentWillUpdate=="function"&&i.componentWillUpdate(r,w,u),typeof i.UNSAFE_componentWillUpdate=="function"&&i.UNSAFE_componentWillUpdate(r,w,u)),typeof i.componentDidUpdate=="function"&&(t.flags|=4),typeof i.getSnapshotBeforeUpdate=="function"&&(t.flags|=1024)):(typeof i.componentDidUpdate!="function"||s===e.memoizedProps&&h===e.memoizedState||(t.flags|=4),typeof i.getSnapshotBeforeUpdate!="function"||s===e.memoizedProps&&h===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=w),i.props=r,i.state=w,i.context=u,r=f):(typeof i.componentDidUpdate!="function"||s===e.memoizedProps&&h===e.memoizedState||(t.flags|=4),typeof i.getSnapshotBeforeUpdate!="function"||s===e.memoizedProps&&h===e.memoizedState||(t.flags|=1024),r=!1)}return fs(e,t,n,r,l,o)}function fs(e,t,n,r,o,l){ad(e,t);var i=(t.flags&128)!==0;if(!r&&!i)return o&&pa(t,n,!1),Ct(e,t,l);r=t.stateNode,Om.current=t;var s=i&&typeof n.getDerivedStateFromError!="function"?null:r.render();return t.flags|=1,e!==null&&i?(t.child=Yn(t,e.child,null,l),t.child=Yn(t,null,s,l)):Te(e,t,s,l),t.memoizedState=r.state,o&&pa(t,n,!0),t.child}function cd(e){var t=e.stateNode;t.pendingContext?da(e,t.pendingContext,t.pendingContext!==t.context):t.context&&da(e,t.context,!1),iu(e,t.containerInfo)}function Na(e,t,n,r,o){return Vn(),eu(o),t.flags|=256,Te(e,t,n,r),t.child}var ds={dehydrated:null,treeContext:null,retryLane:0};function ps(e){return{baseLanes:e,cachePool:null,transitions:null}}function fd(e,t,n){var r=t.pendingProps,o=re.current,l=!1,i=(t.flags&128)!==0,s;if((s=i)||(s=e!==null&&e.memoizedState===null?!1:(o&2)!==0),s?(l=!0,t.flags&=-129):(e===null||e.memoizedState!==null)&&(o|=1),q(re,o&1),e===null)return ls(t),e=t.memoizedState,e!==null&&(e=e.dehydrated,e!==null)?(t.mode&1?e.data==="$!"?t.lanes=8:t.lanes=1073741824:t.lanes=1,null):(i=r.children,e=r.fallback,l?(r=t.mode,l=t.child,i={mode:"hidden",children:i},!(r&1)&&l!==null?(l.childLanes=0,l.pendingProps=i):l=jl(i,r,0,null),e=on(e,r,n,null),l.return=t,e.return=t,l.sibling=e,t.child=l,t.child.memoizedState=ps(n),t.memoizedState=ds,e):hu(t,i));if(o=e.memoizedState,o!==null&&(s=o.dehydrated,s!==null))return Lm(e,t,i,r,s,o,n);if(l){l=r.fallback,i=t.mode,o=e.child,s=o.sibling;var u={mode:"hidden",children:r.children};return!(i&1)&&t.child!==o?(r=t.child,r.childLanes=0,r.pendingProps=u,t.deletions=null):(r=Ht(o,u),r.subtreeFlags=o.subtreeFlags&14680064),s!==null?l=Ht(s,l):(l=on(l,i,n,null),l.flags|=2),l.return=t,r.return=t,r.sibling=l,t.child=r,r=l,l=t.child,i=e.child.memoizedState,i=i===null?ps(n):{baseLanes:i.baseLanes|n,cachePool:null,transitions:i.transitions},l.memoizedState=i,l.childLanes=e.childLanes&~n,t.memoizedState=ds,r}return l=e.child,e=l.sibling,r=Ht(l,{mode:"visible",children:r.children}),!(t.mode&1)&&(r.lanes=n),r.return=t,r.sibling=null,e!==null&&(n=t.deletions,n===null?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=r,t.memoizedState=null,r}function hu(e,t){return t=jl({mode:"visible",children:t},e.mode,0,null),t.return=e,e.child=t}function yo(e,t,n,r){return r!==null&&eu(r),Yn(t,e.child,null,n),e=hu(t,t.pendingProps.children),e.flags|=2,t.memoizedState=null,e}function Lm(e,t,n,r,o,l,i){if(n)return t.flags&256?(t.flags&=-257,r=vi(Error(T(422))),yo(e,t,i,r)):t.memoizedState!==null?(t.child=e.child,t.flags|=128,null):(l=r.fallback,o=t.mode,r=jl({mode:"visible",children:r.children},o,0,null),l=on(l,o,i,null),l.flags|=2,r.return=t,l.return=t,r.sibling=l,t.child=r,t.mode&1&&Yn(t,e.child,null,i),t.child.memoizedState=ps(i),t.memoizedState=ds,l);if(!(t.mode&1))return yo(e,t,i,null);if(o.data==="$!"){if(r=o.nextSibling&&o.nextSibling.dataset,r)var s=r.dgst;return r=s,l=Error(T(419)),r=vi(l,r,void 0),yo(e,t,i,r)}if(s=(i&e.childLanes)!==0,Re||s){if(r=ye,r!==null){switch(i&-i){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}o=o&(r.suspendedLanes|i)?0:o,o!==0&&o!==l.retryLane&&(l.retryLane=o,xt(e,o),ot(r,e,o,-1))}return ku(),r=vi(Error(T(421))),yo(e,t,i,r)}return o.data==="$?"?(t.flags|=128,t.child=e.child,t=Ym.bind(null,e),o._reactRetry=t,null):(e=l.treeContext,Ue=Ft(o.nextSibling),He=t,te=!0,nt=null,e!==null&&(Qe[Ke++]=yt,Qe[Ke++]=vt,Qe[Ke++]=cn,yt=e.id,vt=e.overflow,cn=t),t=hu(t,r.children),t.flags|=4096,t)}function Ia(e,t,n){e.lanes|=t;var r=e.alternate;r!==null&&(r.lanes|=t),is(e.return,t,n)}function wi(e,t,n,r,o){var l=e.memoizedState;l===null?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(l.isBackwards=t,l.rendering=null,l.renderingStartTime=0,l.last=r,l.tail=n,l.tailMode=o)}function dd(e,t,n){var r=t.pendingProps,o=r.revealOrder,l=r.tail;if(Te(e,t,r.children,n),r=re.current,r&2)r=r&1|2,t.flags|=128;else{if(e!==null&&e.flags&128)e:for(e=t.child;e!==null;){if(e.tag===13)e.memoizedState!==null&&Ia(e,n,t);else if(e.tag===19)Ia(e,n,t);else if(e.child!==null){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;e.sibling===null;){if(e.return===null||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(q(re,r),!(t.mode&1))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;n!==null;)e=n.alternate,e!==null&&sl(e)===null&&(o=n),n=n.sibling;n=o,n===null?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),wi(t,!1,o,n,l);break;case"backwards":for(n=null,o=t.child,t.child=null;o!==null;){if(e=o.alternate,e!==null&&sl(e)===null){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}wi(t,!0,n,null,l);break;case"together":wi(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function zo(e,t){!(t.mode&1)&&e!==null&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Ct(e,t,n){if(e!==null&&(t.dependencies=e.dependencies),dn|=t.lanes,!(n&t.childLanes))return null;if(e!==null&&t.child!==e.child)throw Error(T(153));if(t.child!==null){for(e=t.child,n=Ht(e,e.pendingProps),t.child=n,n.return=t;e.sibling!==null;)e=e.sibling,n=n.sibling=Ht(e,e.pendingProps),n.return=t;n.sibling=null}return t.child}function Rm(e,t,n){switch(t.tag){case 3:cd(t),Vn();break;case 5:Ff(t);break;case 1:ze(t.type)&&tl(t);break;case 4:iu(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,o=t.memoizedProps.value;q(ol,r._currentValue),r._currentValue=o;break;case 13:if(r=t.memoizedState,r!==null)return r.dehydrated!==null?(q(re,re.current&1),t.flags|=128,null):n&t.child.childLanes?fd(e,t,n):(q(re,re.current&1),e=Ct(e,t,n),e!==null?e.sibling:null);q(re,re.current&1);break;case 19:if(r=(n&t.childLanes)!==0,e.flags&128){if(r)return dd(e,t,n);t.flags|=128}if(o=t.memoizedState,o!==null&&(o.rendering=null,o.tail=null,o.lastEffect=null),q(re,re.current),r)break;return null;case 22:case 23:return t.lanes=0,ud(e,t,n)}return Ct(e,t,n)}var pd,hs,hd,md;pd=function(e,t){for(var n=t.child;n!==null;){if(n.tag===5||n.tag===6)e.appendChild(n.stateNode);else if(n.tag!==4&&n.child!==null){n.child.return=n,n=n.child;continue}if(n===t)break;for(;n.sibling===null;){if(n.return===null||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}};hs=function(){};hd=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,tn(pt.current);var l=null;switch(n){case"input":o=Mi(e,o),r=Mi(e,r),l=[];break;case"select":o=le({},o,{value:void 0}),r=le({},r,{value:void 0}),l=[];break;case"textarea":o=Di(e,o),r=Di(e,r),l=[];break;default:typeof o.onClick!="function"&&typeof r.onClick=="function"&&(e.onclick=bo)}Bi(n,r);var i;n=null;for(f in o)if(!r.hasOwnProperty(f)&&o.hasOwnProperty(f)&&o[f]!=null)if(f==="style"){var s=o[f];for(i in s)s.hasOwnProperty(i)&&(n||(n={}),n[i]="")}else f!=="dangerouslySetInnerHTML"&&f!=="children"&&f!=="suppressContentEditableWarning"&&f!=="suppressHydrationWarning"&&f!=="autoFocus"&&(Nr.hasOwnProperty(f)?l||(l=[]):(l=l||[]).push(f,null));for(f in r){var u=r[f];if(s=o!=null?o[f]:void 0,r.hasOwnProperty(f)&&u!==s&&(u!=null||s!=null))if(f==="style")if(s){for(i in s)!s.hasOwnProperty(i)||u&&u.hasOwnProperty(i)||(n||(n={}),n[i]="");for(i in u)u.hasOwnProperty(i)&&s[i]!==u[i]&&(n||(n={}),n[i]=u[i])}else n||(l||(l=[]),l.push(f,n)),n=u;else f==="dangerouslySetInnerHTML"?(u=u?u.__html:void 0,s=s?s.__html:void 0,u!=null&&s!==u&&(l=l||[]).push(f,u)):f==="children"?typeof u!="string"&&typeof u!="number"||(l=l||[]).push(f,""+u):f!=="suppressContentEditableWarning"&&f!=="suppressHydrationWarning"&&(Nr.hasOwnProperty(f)?(u!=null&&f==="onScroll"&&J("scroll",e),l||s===u||(l=[])):(l=l||[]).push(f,u))}n&&(l=l||[]).push("style",n);var f=l;(t.updateQueue=f)&&(t.flags|=4)}};md=function(e,t,n,r){n!==r&&(t.flags|=4)};function ar(e,t){if(!te)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;t!==null;)t.alternate!==null&&(n=t),t=t.sibling;n===null?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;n!==null;)n.alternate!==null&&(r=n),n=n.sibling;r===null?t||e.tail===null?e.tail=null:e.tail.sibling=null:r.sibling=null}}function xe(e){var t=e.alternate!==null&&e.alternate.child===e.child,n=0,r=0;if(t)for(var o=e.child;o!==null;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags&14680064,r|=o.flags&14680064,o.return=e,o=o.sibling;else for(o=e.child;o!==null;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function jm(e,t,n){var r=t.pendingProps;switch(bs(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return xe(t),null;case 1:return ze(t.type)&&el(),xe(t),null;case 3:return r=t.stateNode,Qn(),ee(je),ee(_e),uu(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),(e===null||e.child===null)&&(mo(t)?t.flags|=4:e===null||e.memoizedState.isDehydrated&&!(t.flags&256)||(t.flags|=1024,nt!==null&&(xs(nt),nt=null))),hs(e,t),xe(t),null;case 5:su(t);var o=tn(Br.current);if(n=t.type,e!==null&&t.stateNode!=null)hd(e,t,n,r,o),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(t.stateNode===null)throw Error(T(166));return xe(t),null}if(e=tn(pt.current),mo(t)){r=t.stateNode,n=t.type;var l=t.memoizedProps;switch(r[ft]=t,r[Dr]=l,e=(t.mode&1)!==0,n){case"dialog":J("cancel",r),J("close",r);break;case"iframe":case"object":case"embed":J("load",r);break;case"video":case"audio":for(o=0;o<hr.length;o++)J(hr[o],r);break;case"source":J("error",r);break;case"img":case"image":case"link":J("error",r),J("load",r);break;case"details":J("toggle",r);break;case"input":Du(r,l),J("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!l.multiple},J("invalid",r);break;case"textarea":Bu(r,l),J("invalid",r)}Bi(n,l),o=null;for(var i in l)if(l.hasOwnProperty(i)){var s=l[i];i==="children"?typeof s=="string"?r.textContent!==s&&(l.suppressHydrationWarning!==!0&&ho(r.textContent,s,e),o=["children",s]):typeof s=="number"&&r.textContent!==""+s&&(l.suppressHydrationWarning!==!0&&ho(r.textContent,s,e),o=["children",""+s]):Nr.hasOwnProperty(i)&&s!=null&&i==="onScroll"&&J("scroll",r)}switch(n){case"input":lo(r),Uu(r,l,!0);break;case"textarea":lo(r),Hu(r);break;case"select":case"option":break;default:typeof l.onClick=="function"&&(r.onclick=bo)}r=o,t.updateQueue=r,r!==null&&(t.flags|=4)}else{i=o.nodeType===9?o:o.ownerDocument,e==="http://www.w3.org/1999/xhtml"&&(e=Hc(n)),e==="http://www.w3.org/1999/xhtml"?n==="script"?(e=i.createElement("div"),e.innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):typeof r.is=="string"?e=i.createElement(n,{is:r.is}):(e=i.createElement(n),n==="select"&&(i=e,r.multiple?i.multiple=!0:r.size&&(i.size=r.size))):e=i.createElementNS(e,n),e[ft]=t,e[Dr]=r,pd(e,t,!1,!1),t.stateNode=e;e:{switch(i=Hi(n,r),n){case"dialog":J("cancel",e),J("close",e),o=r;break;case"iframe":case"object":case"embed":J("load",e),o=r;break;case"video":case"audio":for(o=0;o<hr.length;o++)J(hr[o],e);o=r;break;case"source":J("error",e),o=r;break;case"img":case"image":case"link":J("error",e),J("load",e),o=r;break;case"details":J("toggle",e),o=r;break;case"input":Du(e,r),o=Mi(e,r),J("invalid",e);break;case"option":o=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=le({},r,{value:void 0}),J("invalid",e);break;case"textarea":Bu(e,r),o=Di(e,r),J("invalid",e);break;default:o=r}Bi(n,o),s=o;for(l in s)if(s.hasOwnProperty(l)){var u=s[l];l==="style"?Yc(e,u):l==="dangerouslySetInnerHTML"?(u=u?u.__html:void 0,u!=null&&Wc(e,u)):l==="children"?typeof u=="string"?(n!=="textarea"||u!=="")&&Ir(e,u):typeof u=="number"&&Ir(e,""+u):l!=="suppressContentEditableWarning"&&l!=="suppressHydrationWarning"&&l!=="autoFocus"&&(Nr.hasOwnProperty(l)?u!=null&&l==="onScroll"&&J("scroll",e):u!=null&&Fs(e,l,u,i))}switch(n){case"input":lo(e),Uu(e,r,!1);break;case"textarea":lo(e),Hu(e);break;case"option":r.value!=null&&e.setAttribute("value",""+Vt(r.value));break;case"select":e.multiple=!!r.multiple,l=r.value,l!=null?Mn(e,!!r.multiple,l,!1):r.defaultValue!=null&&Mn(e,!!r.multiple,r.defaultValue,!0);break;default:typeof o.onClick=="function"&&(e.onclick=bo)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}t.ref!==null&&(t.flags|=512,t.flags|=2097152)}return xe(t),null;case 6:if(e&&t.stateNode!=null)md(e,t,e.memoizedProps,r);else{if(typeof r!="string"&&t.stateNode===null)throw Error(T(166));if(n=tn(Br.current),tn(pt.current),mo(t)){if(r=t.stateNode,n=t.memoizedProps,r[ft]=t,(l=r.nodeValue!==n)&&(e=He,e!==null))switch(e.tag){case 3:ho(r.nodeValue,n,(e.mode&1)!==0);break;case 5:e.memoizedProps.suppressHydrationWarning!==!0&&ho(r.nodeValue,n,(e.mode&1)!==0)}l&&(t.flags|=4)}else r=(n.nodeType===9?n:n.ownerDocument).createTextNode(r),r[ft]=t,t.stateNode=r}return xe(t),null;case 13:if(ee(re),r=t.memoizedState,e===null||e.memoizedState!==null&&e.memoizedState.dehydrated!==null){if(te&&Ue!==null&&t.mode&1&&!(t.flags&128))Rf(),Vn(),t.flags|=98560,l=!1;else if(l=mo(t),r!==null&&r.dehydrated!==null){if(e===null){if(!l)throw Error(T(318));if(l=t.memoizedState,l=l!==null?l.dehydrated:null,!l)throw Error(T(317));l[ft]=t}else Vn(),!(t.flags&128)&&(t.memoizedState=null),t.flags|=4;xe(t),l=!1}else nt!==null&&(xs(nt),nt=null),l=!0;if(!l)return t.flags&65536?t:null}return t.flags&128?(t.lanes=n,t):(r=r!==null,r!==(e!==null&&e.memoizedState!==null)&&r&&(t.child.flags|=8192,t.mode&1&&(e===null||re.current&1?he===0&&(he=3):ku())),t.updateQueue!==null&&(t.flags|=4),xe(t),null);case 4:return Qn(),hs(e,t),e===null&&Ar(t.stateNode.containerInfo),xe(t),null;case 10:return ru(t.type._context),xe(t),null;case 17:return ze(t.type)&&el(),xe(t),null;case 19:if(ee(re),l=t.memoizedState,l===null)return xe(t),null;if(r=(t.flags&128)!==0,i=l.rendering,i===null)if(r)ar(l,!1);else{if(he!==0||e!==null&&e.flags&128)for(e=t.child;e!==null;){if(i=sl(e),i!==null){for(t.flags|=128,ar(l,!1),r=i.updateQueue,r!==null&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;n!==null;)l=n,e=r,l.flags&=14680066,i=l.alternate,i===null?(l.childLanes=0,l.lanes=e,l.child=null,l.subtreeFlags=0,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=i.childLanes,l.lanes=i.lanes,l.child=i.child,l.subtreeFlags=0,l.deletions=null,l.memoizedProps=i.memoizedProps,l.memoizedState=i.memoizedState,l.updateQueue=i.updateQueue,l.type=i.type,e=i.dependencies,l.dependencies=e===null?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return q(re,re.current&1|2),t.child}e=e.sibling}l.tail!==null&&ce()>Gn&&(t.flags|=128,r=!0,ar(l,!1),t.lanes=4194304)}else{if(!r)if(e=sl(i),e!==null){if(t.flags|=128,r=!0,n=e.updateQueue,n!==null&&(t.updateQueue=n,t.flags|=4),ar(l,!0),l.tail===null&&l.tailMode==="hidden"&&!i.alternate&&!te)return xe(t),null}else 2*ce()-l.renderingStartTime>Gn&&n!==1073741824&&(t.flags|=128,r=!0,ar(l,!1),t.lanes=4194304);l.isBackwards?(i.sibling=t.child,t.child=i):(n=l.last,n!==null?n.sibling=i:t.child=i,l.last=i)}return l.tail!==null?(t=l.tail,l.rendering=t,l.tail=t.sibling,l.renderingStartTime=ce(),t.sibling=null,n=re.current,q(re,r?n&1|2:n&1),t):(xe(t),null);case 22:case 23:return wu(),r=t.memoizedState!==null,e!==null&&e.memoizedState!==null!==r&&(t.flags|=8192),r&&t.mode&1?Fe&1073741824&&(xe(t),t.subtreeFlags&6&&(t.flags|=8192)):xe(t),null;case 24:return null;case 25:return null}throw Error(T(156,t.tag))}function zm(e,t){switch(bs(t),t.tag){case 1:return ze(t.type)&&el(),e=t.flags,e&65536?(t.flags=e&-65537|128,t):null;case 3:return Qn(),ee(je),ee(_e),uu(),e=t.flags,e&65536&&!(e&128)?(t.flags=e&-65537|128,t):null;case 5:return su(t),null;case 13:if(ee(re),e=t.memoizedState,e!==null&&e.dehydrated!==null){if(t.alternate===null)throw Error(T(340));Vn()}return e=t.flags,e&65536?(t.flags=e&-65537|128,t):null;case 19:return ee(re),null;case 4:return Qn(),null;case 10:return ru(t.type._context),null;case 22:case 23:return wu(),null;case 24:return null;default:return null}}var vo=!1,Ce=!1,Mm=typeof WeakSet=="function"?WeakSet:Set,M=null;function Ln(e,t){var n=e.ref;if(n!==null)if(typeof n=="function")try{n(null)}catch(r){ie(e,t,r)}else n.current=null}function ms(e,t,n){try{n()}catch(r){ie(e,t,r)}}var Oa=!1;function Am(e,t){if(Ji=Zo,e=kf(),qs(e)){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{n=(n=e.ownerDocument)&&n.defaultView||window;var r=n.getSelection&&n.getSelection();if(r&&r.rangeCount!==0){n=r.anchorNode;var o=r.anchorOffset,l=r.focusNode;r=r.focusOffset;try{n.nodeType,l.nodeType}catch{n=null;break e}var i=0,s=-1,u=-1,f=0,m=0,g=e,h=null;t:for(;;){for(var v;g!==n||o!==0&&g.nodeType!==3||(s=i+o),g!==l||r!==0&&g.nodeType!==3||(u=i+r),g.nodeType===3&&(i+=g.nodeValue.length),(v=g.firstChild)!==null;)h=g,g=v;for(;;){if(g===e)break t;if(h===n&&++f===o&&(s=i),h===l&&++m===r&&(u=i),(v=g.nextSibling)!==null)break;g=h,h=g.parentNode}g=v}n=s===-1||u===-1?null:{start:s,end:u}}else n=null}n=n||{start:0,end:0}}else n=null;for(bi={focusedElem:e,selectionRange:n},Zo=!1,M=t;M!==null;)if(t=M,e=t.child,(t.subtreeFlags&1028)!==0&&e!==null)e.return=t,M=e;else for(;M!==null;){t=M;try{var w=t.alternate;if(t.flags&1024)switch(t.tag){case 0:case 11:case 15:break;case 1:if(w!==null){var k=w.memoizedProps,P=w.memoizedState,c=t.stateNode,a=c.getSnapshotBeforeUpdate(t.elementType===t.type?k:et(t.type,k),P);c.__reactInternalSnapshotBeforeUpdate=a}break;case 3:var d=t.stateNode.containerInfo;d.nodeType===1?d.textContent="":d.nodeType===9&&d.documentElement&&d.removeChild(d.documentElement);break;case 5:case 6:case 4:case 17:break;default:throw Error(T(163))}}catch(p){ie(t,t.return,p)}if(e=t.sibling,e!==null){e.return=t.return,M=e;break}M=t.return}return w=Oa,Oa=!1,w}function Cr(e,t,n){var r=t.updateQueue;if(r=r!==null?r.lastEffect:null,r!==null){var o=r=r.next;do{if((o.tag&e)===e){var l=o.destroy;o.destroy=void 0,l!==void 0&&ms(t,n,l)}o=o.next}while(o!==r)}}function Ll(e,t){if(t=t.updateQueue,t=t!==null?t.lastEffect:null,t!==null){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function gs(e){var t=e.ref;if(t!==null){var n=e.stateNode;switch(e.tag){case 5:e=n;break;default:e=n}typeof t=="function"?t(e):t.current=e}}function gd(e){var t=e.alternate;t!==null&&(e.alternate=null,gd(t)),e.child=null,e.deletions=null,e.sibling=null,e.tag===5&&(t=e.stateNode,t!==null&&(delete t[ft],delete t[Dr],delete t[ns],delete t[wm],delete t[km])),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function yd(e){return e.tag===5||e.tag===3||e.tag===4}function La(e){e:for(;;){for(;e.sibling===null;){if(e.return===null||yd(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;e.tag!==5&&e.tag!==6&&e.tag!==18;){if(e.flags&2||e.child===null||e.tag===4)continue e;e.child.return=e,e=e.child}if(!(e.flags&2))return e.stateNode}}function ys(e,t,n){var r=e.tag;if(r===5||r===6)e=e.stateNode,t?n.nodeType===8?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(n.nodeType===8?(t=n.parentNode,t.insertBefore(e,n)):(t=n,t.appendChild(e)),n=n._reactRootContainer,n!=null||t.onclick!==null||(t.onclick=bo));else if(r!==4&&(e=e.child,e!==null))for(ys(e,t,n),e=e.sibling;e!==null;)ys(e,t,n),e=e.sibling}function vs(e,t,n){var r=e.tag;if(r===5||r===6)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(r!==4&&(e=e.child,e!==null))for(vs(e,t,n),e=e.sibling;e!==null;)vs(e,t,n),e=e.sibling}var ve=null,tt=!1;function Pt(e,t,n){for(n=n.child;n!==null;)vd(e,t,n),n=n.sibling}function vd(e,t,n){if(dt&&typeof dt.onCommitFiberUnmount=="function")try{dt.onCommitFiberUnmount(El,n)}catch{}switch(n.tag){case 5:Ce||Ln(n,t);case 6:var r=ve,o=tt;ve=null,Pt(e,t,n),ve=r,tt=o,ve!==null&&(tt?(e=ve,n=n.stateNode,e.nodeType===8?e.parentNode.removeChild(n):e.removeChild(n)):ve.removeChild(n.stateNode));break;case 18:ve!==null&&(tt?(e=ve,n=n.stateNode,e.nodeType===8?di(e.parentNode,n):e.nodeType===1&&di(e,n),jr(e)):di(ve,n.stateNode));break;case 4:r=ve,o=tt,ve=n.stateNode.containerInfo,tt=!0,Pt(e,t,n),ve=r,tt=o;break;case 0:case 11:case 14:case 15:if(!Ce&&(r=n.updateQueue,r!==null&&(r=r.lastEffect,r!==null))){o=r=r.next;do{var l=o,i=l.destroy;l=l.tag,i!==void 0&&(l&2||l&4)&&ms(n,t,i),o=o.next}while(o!==r)}Pt(e,t,n);break;case 1:if(!Ce&&(Ln(n,t),r=n.stateNode,typeof r.componentWillUnmount=="function"))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(s){ie(n,t,s)}Pt(e,t,n);break;case 21:Pt(e,t,n);break;case 22:n.mode&1?(Ce=(r=Ce)||n.memoizedState!==null,Pt(e,t,n),Ce=r):Pt(e,t,n);break;default:Pt(e,t,n)}}function Ra(e){var t=e.updateQueue;if(t!==null){e.updateQueue=null;var n=e.stateNode;n===null&&(n=e.stateNode=new Mm),t.forEach(function(r){var o=Qm.bind(null,e,r);n.has(r)||(n.add(r),r.then(o,o))})}}function be(e,t){var n=t.deletions;if(n!==null)for(var r=0;r<n.length;r++){var o=n[r];try{var l=e,i=t,s=i;e:for(;s!==null;){switch(s.tag){case 5:ve=s.stateNode,tt=!1;break e;case 3:ve=s.stateNode.containerInfo,tt=!0;break e;case 4:ve=s.stateNode.containerInfo,tt=!0;break e}s=s.return}if(ve===null)throw Error(T(160));vd(l,i,o),ve=null,tt=!1;var u=o.alternate;u!==null&&(u.return=null),o.return=null}catch(f){ie(o,t,f)}}if(t.subtreeFlags&12854)for(t=t.child;t!==null;)wd(t,e),t=t.sibling}function wd(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(be(t,e),st(e),r&4){try{Cr(3,e,e.return),Ll(3,e)}catch(k){ie(e,e.return,k)}try{Cr(5,e,e.return)}catch(k){ie(e,e.return,k)}}break;case 1:be(t,e),st(e),r&512&&n!==null&&Ln(n,n.return);break;case 5:if(be(t,e),st(e),r&512&&n!==null&&Ln(n,n.return),e.flags&32){var o=e.stateNode;try{Ir(o,"")}catch(k){ie(e,e.return,k)}}if(r&4&&(o=e.stateNode,o!=null)){var l=e.memoizedProps,i=n!==null?n.memoizedProps:l,s=e.type,u=e.updateQueue;if(e.updateQueue=null,u!==null)try{s==="input"&&l.type==="radio"&&l.name!=null&&Uc(o,l),Hi(s,i);var f=Hi(s,l);for(i=0;i<u.length;i+=2){var m=u[i],g=u[i+1];m==="style"?Yc(o,g):m==="dangerouslySetInnerHTML"?Wc(o,g):m==="children"?Ir(o,g):Fs(o,m,g,f)}switch(s){case"input":Ai(o,l);break;case"textarea":Bc(o,l);break;case"select":var h=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!l.multiple;var v=l.value;v!=null?Mn(o,!!l.multiple,v,!1):h!==!!l.multiple&&(l.defaultValue!=null?Mn(o,!!l.multiple,l.defaultValue,!0):Mn(o,!!l.multiple,l.multiple?[]:"",!1))}o[Dr]=l}catch(k){ie(e,e.return,k)}}break;case 6:if(be(t,e),st(e),r&4){if(e.stateNode===null)throw Error(T(162));o=e.stateNode,l=e.memoizedProps;try{o.nodeValue=l}catch(k){ie(e,e.return,k)}}break;case 3:if(be(t,e),st(e),r&4&&n!==null&&n.memoizedState.isDehydrated)try{jr(t.containerInfo)}catch(k){ie(e,e.return,k)}break;case 4:be(t,e),st(e);break;case 13:be(t,e),st(e),o=e.child,o.flags&8192&&(l=o.memoizedState!==null,o.stateNode.isHidden=l,!l||o.alternate!==null&&o.alternate.memoizedState!==null||(yu=ce())),r&4&&Ra(e);break;case 22:if(m=n!==null&&n.memoizedState!==null,e.mode&1?(Ce=(f=Ce)||m,be(t,e),Ce=f):be(t,e),st(e),r&8192){if(f=e.memoizedState!==null,(e.stateNode.isHidden=f)&&!m&&e.mode&1)for(M=e,m=e.child;m!==null;){for(g=M=m;M!==null;){switch(h=M,v=h.child,h.tag){case 0:case 11:case 14:case 15:Cr(4,h,h.return);break;case 1:Ln(h,h.return);var w=h.stateNode;if(typeof w.componentWillUnmount=="function"){r=h,n=h.return;try{t=r,w.props=t.memoizedProps,w.state=t.memoizedState,w.componentWillUnmount()}catch(k){ie(r,n,k)}}break;case 5:Ln(h,h.return);break;case 22:if(h.memoizedState!==null){za(g);continue}}v!==null?(v.return=h,M=v):za(g)}m=m.sibling}e:for(m=null,g=e;;){if(g.tag===5){if(m===null){m=g;try{o=g.stateNode,f?(l=o.style,typeof l.setProperty=="function"?l.setProperty("display","none","important"):l.display="none"):(s=g.stateNode,u=g.memoizedProps.style,i=u!=null&&u.hasOwnProperty("display")?u.display:null,s.style.display=Vc("display",i))}catch(k){ie(e,e.return,k)}}}else if(g.tag===6){if(m===null)try{g.stateNode.nodeValue=f?"":g.memoizedProps}catch(k){ie(e,e.return,k)}}else if((g.tag!==22&&g.tag!==23||g.memoizedState===null||g===e)&&g.child!==null){g.child.return=g,g=g.child;continue}if(g===e)break e;for(;g.sibling===null;){if(g.return===null||g.return===e)break e;m===g&&(m=null),g=g.return}m===g&&(m=null),g.sibling.return=g.return,g=g.sibling}}break;case 19:be(t,e),st(e),r&4&&Ra(e);break;case 21:break;default:be(t,e),st(e)}}function st(e){var t=e.flags;if(t&2){try{e:{for(var n=e.return;n!==null;){if(yd(n)){var r=n;break e}n=n.return}throw Error(T(160))}switch(r.tag){case 5:var o=r.stateNode;r.flags&32&&(Ir(o,""),r.flags&=-33);var l=La(e);vs(e,l,o);break;case 3:case 4:var i=r.stateNode.containerInfo,s=La(e);ys(e,s,i);break;default:throw Error(T(161))}}catch(u){ie(e,e.return,u)}e.flags&=-3}t&4096&&(e.flags&=-4097)}function Fm(e,t,n){M=e,kd(e)}function kd(e,t,n){for(var r=(e.mode&1)!==0;M!==null;){var o=M,l=o.child;if(o.tag===22&&r){var i=o.memoizedState!==null||vo;if(!i){var s=o.alternate,u=s!==null&&s.memoizedState!==null||Ce;s=vo;var f=Ce;if(vo=i,(Ce=u)&&!f)for(M=o;M!==null;)i=M,u=i.child,i.tag===22&&i.memoizedState!==null?Ma(o):u!==null?(u.return=i,M=u):Ma(o);for(;l!==null;)M=l,kd(l),l=l.sibling;M=o,vo=s,Ce=f}ja(e)}else o.subtreeFlags&8772&&l!==null?(l.return=o,M=l):ja(e)}}function ja(e){for(;M!==null;){var t=M;if(t.flags&8772){var n=t.alternate;try{if(t.flags&8772)switch(t.tag){case 0:case 11:case 15:Ce||Ll(5,t);break;case 1:var r=t.stateNode;if(t.flags&4&&!Ce)if(n===null)r.componentDidMount();else{var o=t.elementType===t.type?n.memoizedProps:et(t.type,n.memoizedProps);r.componentDidUpdate(o,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var l=t.updateQueue;l!==null&&va(t,l,r);break;case 3:var i=t.updateQueue;if(i!==null){if(n=null,t.child!==null)switch(t.child.tag){case 5:n=t.child.stateNode;break;case 1:n=t.child.stateNode}va(t,i,n)}break;case 5:var s=t.stateNode;if(n===null&&t.flags&4){n=s;var u=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":u.autoFocus&&n.focus();break;case"img":u.src&&(n.src=u.src)}}break;case 6:break;case 4:break;case 12:break;case 13:if(t.memoizedState===null){var f=t.alternate;if(f!==null){var m=f.memoizedState;if(m!==null){var g=m.dehydrated;g!==null&&jr(g)}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;default:throw Error(T(163))}Ce||t.flags&512&&gs(t)}catch(h){ie(t,t.return,h)}}if(t===e){M=null;break}if(n=t.sibling,n!==null){n.return=t.return,M=n;break}M=t.return}}function za(e){for(;M!==null;){var t=M;if(t===e){M=null;break}var n=t.sibling;if(n!==null){n.return=t.return,M=n;break}M=t.return}}function Ma(e){for(;M!==null;){var t=M;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{Ll(4,t)}catch(u){ie(t,n,u)}break;case 1:var r=t.stateNode;if(typeof r.componentDidMount=="function"){var o=t.return;try{r.componentDidMount()}catch(u){ie(t,o,u)}}var l=t.return;try{gs(t)}catch(u){ie(t,l,u)}break;case 5:var i=t.return;try{gs(t)}catch(u){ie(t,i,u)}}}catch(u){ie(t,t.return,u)}if(t===e){M=null;break}var s=t.sibling;if(s!==null){s.return=t.return,M=s;break}M=t.return}}var Dm=Math.ceil,cl=Et.ReactCurrentDispatcher,mu=Et.ReactCurrentOwner,Xe=Et.ReactCurrentBatchConfig,Q=0,ye=null,de=null,we=0,Fe=0,Rn=Kt(0),he=0,Yr=null,dn=0,Rl=0,gu=0,Er=null,Le=null,yu=0,Gn=1/0,ht=null,fl=!1,ws=null,Ut=null,wo=!1,Rt=null,dl=0,_r=0,ks=null,Mo=-1,Ao=0;function Ne(){return Q&6?ce():Mo!==-1?Mo:Mo=ce()}function Bt(e){return e.mode&1?Q&2&&we!==0?we&-we:xm.transition!==null?(Ao===0&&(Ao=rf()),Ao):(e=X,e!==0||(e=window.event,e=e===void 0?16:ff(e.type)),e):1}function ot(e,t,n,r){if(50<_r)throw _r=0,ks=null,Error(T(185));qr(e,n,r),(!(Q&2)||e!==ye)&&(e===ye&&(!(Q&2)&&(Rl|=n),he===4&&Ot(e,we)),Me(e,r),n===1&&Q===0&&!(t.mode&1)&&(Gn=ce()+500,Nl&&Gt()))}function Me(e,t){var n=e.callbackNode;xh(e,t);var r=Xo(e,e===ye?we:0);if(r===0)n!==null&&Yu(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(n!=null&&Yu(n),t===1)e.tag===0?Sm(Aa.bind(null,e)):If(Aa.bind(null,e)),ym(function(){!(Q&6)&&Gt()}),n=null;else{switch(of(r)){case 1:n=Ws;break;case 4:n=tf;break;case 16:n=Go;break;case 536870912:n=nf;break;default:n=Go}n=$d(n,Sd.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function Sd(e,t){if(Mo=-1,Ao=0,Q&6)throw Error(T(327));var n=e.callbackNode;if(Bn()&&e.callbackNode!==n)return null;var r=Xo(e,e===ye?we:0);if(r===0)return null;if(r&30||r&e.expiredLanes||t)t=pl(e,r);else{t=r;var o=Q;Q|=2;var l=Cd();(ye!==e||we!==t)&&(ht=null,Gn=ce()+500,rn(e,t));do try{Hm();break}catch(s){xd(e,s)}while(!0);nu(),cl.current=l,Q=o,de!==null?t=0:(ye=null,we=0,t=he)}if(t!==0){if(t===2&&(o=Ki(e),o!==0&&(r=o,t=Ss(e,o))),t===1)throw n=Yr,rn(e,0),Ot(e,r),Me(e,ce()),n;if(t===6)Ot(e,r);else{if(o=e.current.alternate,!(r&30)&&!Um(o)&&(t=pl(e,r),t===2&&(l=Ki(e),l!==0&&(r=l,t=Ss(e,l))),t===1))throw n=Yr,rn(e,0),Ot(e,r),Me(e,ce()),n;switch(e.finishedWork=o,e.finishedLanes=r,t){case 0:case 1:throw Error(T(345));case 2:Jt(e,Le,ht);break;case 3:if(Ot(e,r),(r&130023424)===r&&(t=yu+500-ce(),10<t)){if(Xo(e,0)!==0)break;if(o=e.suspendedLanes,(o&r)!==r){Ne(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=ts(Jt.bind(null,e,Le,ht),t);break}Jt(e,Le,ht);break;case 4:if(Ot(e,r),(r&4194240)===r)break;for(t=e.eventTimes,o=-1;0<r;){var i=31-rt(r);l=1<<i,i=t[i],i>o&&(o=i),r&=~l}if(r=o,r=ce()-r,r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Dm(r/1960))-r,10<r){e.timeoutHandle=ts(Jt.bind(null,e,Le,ht),r);break}Jt(e,Le,ht);break;case 5:Jt(e,Le,ht);break;default:throw Error(T(329))}}}return Me(e,ce()),e.callbackNode===n?Sd.bind(null,e):null}function Ss(e,t){var n=Er;return e.current.memoizedState.isDehydrated&&(rn(e,t).flags|=256),e=pl(e,t),e!==2&&(t=Le,Le=n,t!==null&&xs(t)),e}function xs(e){Le===null?Le=e:Le.push.apply(Le,e)}function Um(e){for(var t=e;;){if(t.flags&16384){var n=t.updateQueue;if(n!==null&&(n=n.stores,n!==null))for(var r=0;r<n.length;r++){var o=n[r],l=o.getSnapshot;o=o.value;try{if(!it(l(),o))return!1}catch{return!1}}}if(n=t.child,t.subtreeFlags&16384&&n!==null)n.return=t,t=n;else{if(t===e)break;for(;t.sibling===null;){if(t.return===null||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function Ot(e,t){for(t&=~gu,t&=~Rl,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-rt(t),r=1<<n;e[n]=-1,t&=~r}}function Aa(e){if(Q&6)throw Error(T(327));Bn();var t=Xo(e,0);if(!(t&1))return Me(e,ce()),null;var n=pl(e,t);if(e.tag!==0&&n===2){var r=Ki(e);r!==0&&(t=r,n=Ss(e,r))}if(n===1)throw n=Yr,rn(e,0),Ot(e,t),Me(e,ce()),n;if(n===6)throw Error(T(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,Jt(e,Le,ht),Me(e,ce()),null}function vu(e,t){var n=Q;Q|=1;try{return e(t)}finally{Q=n,Q===0&&(Gn=ce()+500,Nl&&Gt())}}function pn(e){Rt!==null&&Rt.tag===0&&!(Q&6)&&Bn();var t=Q;Q|=1;var n=Xe.transition,r=X;try{if(Xe.transition=null,X=1,e)return e()}finally{X=r,Xe.transition=n,Q=t,!(Q&6)&&Gt()}}function wu(){Fe=Rn.current,ee(Rn)}function rn(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(n!==-1&&(e.timeoutHandle=-1,gm(n)),de!==null)for(n=de.return;n!==null;){var r=n;switch(bs(r),r.tag){case 1:r=r.type.childContextTypes,r!=null&&el();break;case 3:Qn(),ee(je),ee(_e),uu();break;case 5:su(r);break;case 4:Qn();break;case 13:ee(re);break;case 19:ee(re);break;case 10:ru(r.type._context);break;case 22:case 23:wu()}n=n.return}if(ye=e,de=e=Ht(e.current,null),we=Fe=t,he=0,Yr=null,gu=Rl=dn=0,Le=Er=null,en!==null){for(t=0;t<en.length;t++)if(n=en[t],r=n.interleaved,r!==null){n.interleaved=null;var o=r.next,l=n.pending;if(l!==null){var i=l.next;l.next=o,r.next=i}n.pending=r}en=null}return e}function xd(e,t){do{var n=de;try{if(nu(),Ro.current=al,ul){for(var r=oe.memoizedState;r!==null;){var o=r.queue;o!==null&&(o.pending=null),r=r.next}ul=!1}if(fn=0,me=pe=oe=null,xr=!1,Hr=0,mu.current=null,n===null||n.return===null){he=1,Yr=t,de=null;break}e:{var l=e,i=n.return,s=n,u=t;if(t=we,s.flags|=32768,u!==null&&typeof u=="object"&&typeof u.then=="function"){var f=u,m=s,g=m.tag;if(!(m.mode&1)&&(g===0||g===11||g===15)){var h=m.alternate;h?(m.updateQueue=h.updateQueue,m.memoizedState=h.memoizedState,m.lanes=h.lanes):(m.updateQueue=null,m.memoizedState=null)}var v=Ea(i);if(v!==null){v.flags&=-257,_a(v,i,s,l,t),v.mode&1&&Ca(l,f,t),t=v,u=f;var w=t.updateQueue;if(w===null){var k=new Set;k.add(u),t.updateQueue=k}else w.add(u);break e}else{if(!(t&1)){Ca(l,f,t),ku();break e}u=Error(T(426))}}else if(te&&s.mode&1){var P=Ea(i);if(P!==null){!(P.flags&65536)&&(P.flags|=256),_a(P,i,s,l,t),eu(Kn(u,s));break e}}l=u=Kn(u,s),he!==4&&(he=2),Er===null?Er=[l]:Er.push(l),l=i;do{switch(l.tag){case 3:l.flags|=65536,t&=-t,l.lanes|=t;var c=ld(l,u,t);ya(l,c);break e;case 1:s=u;var a=l.type,d=l.stateNode;if(!(l.flags&128)&&(typeof a.getDerivedStateFromError=="function"||d!==null&&typeof d.componentDidCatch=="function"&&(Ut===null||!Ut.has(d)))){l.flags|=65536,t&=-t,l.lanes|=t;var p=id(l,s,t);ya(l,p);break e}}l=l.return}while(l!==null)}_d(n)}catch(S){t=S,de===n&&n!==null&&(de=n=n.return);continue}break}while(!0)}function Cd(){var e=cl.current;return cl.current=al,e===null?al:e}function ku(){(he===0||he===3||he===2)&&(he=4),ye===null||!(dn&268435455)&&!(Rl&268435455)||Ot(ye,we)}function pl(e,t){var n=Q;Q|=2;var r=Cd();(ye!==e||we!==t)&&(ht=null,rn(e,t));do try{Bm();break}catch(o){xd(e,o)}while(!0);if(nu(),Q=n,cl.current=r,de!==null)throw Error(T(261));return ye=null,we=0,he}function Bm(){for(;de!==null;)Ed(de)}function Hm(){for(;de!==null&&!ph();)Ed(de)}function Ed(e){var t=Td(e.alternate,e,Fe);e.memoizedProps=e.pendingProps,t===null?_d(e):de=t,mu.current=null}function _d(e){var t=e;do{var n=t.alternate;if(e=t.return,t.flags&32768){if(n=zm(n,t),n!==null){n.flags&=32767,de=n;return}if(e!==null)e.flags|=32768,e.subtreeFlags=0,e.deletions=null;else{he=6,de=null;return}}else if(n=jm(n,t,Fe),n!==null){de=n;return}if(t=t.sibling,t!==null){de=t;return}de=t=e}while(t!==null);he===0&&(he=5)}function Jt(e,t,n){var r=X,o=Xe.transition;try{Xe.transition=null,X=1,Wm(e,t,n,r)}finally{Xe.transition=o,X=r}return null}function Wm(e,t,n,r){do Bn();while(Rt!==null);if(Q&6)throw Error(T(327));n=e.finishedWork;var o=e.finishedLanes;if(n===null)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(T(177));e.callbackNode=null,e.callbackPriority=0;var l=n.lanes|n.childLanes;if(Ch(e,l),e===ye&&(de=ye=null,we=0),!(n.subtreeFlags&2064)&&!(n.flags&2064)||wo||(wo=!0,$d(Go,function(){return Bn(),null})),l=(n.flags&15990)!==0,n.subtreeFlags&15990||l){l=Xe.transition,Xe.transition=null;var i=X;X=1;var s=Q;Q|=4,mu.current=null,Am(e,n),wd(n,e),am(bi),Zo=!!Ji,bi=Ji=null,e.current=n,Fm(n),hh(),Q=s,X=i,Xe.transition=l}else e.current=n;if(wo&&(wo=!1,Rt=e,dl=o),l=e.pendingLanes,l===0&&(Ut=null),yh(n.stateNode),Me(e,ce()),t!==null)for(r=e.onRecoverableError,n=0;n<t.length;n++)o=t[n],r(o.value,{componentStack:o.stack,digest:o.digest});if(fl)throw fl=!1,e=ws,ws=null,e;return dl&1&&e.tag!==0&&Bn(),l=e.pendingLanes,l&1?e===ks?_r++:(_r=0,ks=e):_r=0,Gt(),null}function Bn(){if(Rt!==null){var e=of(dl),t=Xe.transition,n=X;try{if(Xe.transition=null,X=16>e?16:e,Rt===null)var r=!1;else{if(e=Rt,Rt=null,dl=0,Q&6)throw Error(T(331));var o=Q;for(Q|=4,M=e.current;M!==null;){var l=M,i=l.child;if(M.flags&16){var s=l.deletions;if(s!==null){for(var u=0;u<s.length;u++){var f=s[u];for(M=f;M!==null;){var m=M;switch(m.tag){case 0:case 11:case 15:Cr(8,m,l)}var g=m.child;if(g!==null)g.return=m,M=g;else for(;M!==null;){m=M;var h=m.sibling,v=m.return;if(gd(m),m===f){M=null;break}if(h!==null){h.return=v,M=h;break}M=v}}}var w=l.alternate;if(w!==null){var k=w.child;if(k!==null){w.child=null;do{var P=k.sibling;k.sibling=null,k=P}while(k!==null)}}M=l}}if(l.subtreeFlags&2064&&i!==null)i.return=l,M=i;else e:for(;M!==null;){if(l=M,l.flags&2048)switch(l.tag){case 0:case 11:case 15:Cr(9,l,l.return)}var c=l.sibling;if(c!==null){c.return=l.return,M=c;break e}M=l.return}}var a=e.current;for(M=a;M!==null;){i=M;var d=i.child;if(i.subtreeFlags&2064&&d!==null)d.return=i,M=d;else e:for(i=a;M!==null;){if(s=M,s.flags&2048)try{switch(s.tag){case 0:case 11:case 15:Ll(9,s)}}catch(S){ie(s,s.return,S)}if(s===i){M=null;break e}var p=s.sibling;if(p!==null){p.return=s.return,M=p;break e}M=s.return}}if(Q=o,Gt(),dt&&typeof dt.onPostCommitFiberRoot=="function")try{dt.onPostCommitFiberRoot(El,e)}catch{}r=!0}return r}finally{X=n,Xe.transition=t}}return!1}function Fa(e,t,n){t=Kn(n,t),t=ld(e,t,1),e=Dt(e,t,1),t=Ne(),e!==null&&(qr(e,1,t),Me(e,t))}function ie(e,t,n){if(e.tag===3)Fa(e,e,n);else for(;t!==null;){if(t.tag===3){Fa(t,e,n);break}else if(t.tag===1){var r=t.stateNode;if(typeof t.type.getDerivedStateFromError=="function"||typeof r.componentDidCatch=="function"&&(Ut===null||!Ut.has(r))){e=Kn(n,e),e=id(t,e,1),t=Dt(t,e,1),e=Ne(),t!==null&&(qr(t,1,e),Me(t,e));break}}t=t.return}}function Vm(e,t,n){var r=e.pingCache;r!==null&&r.delete(t),t=Ne(),e.pingedLanes|=e.suspendedLanes&n,ye===e&&(we&n)===n&&(he===4||he===3&&(we&130023424)===we&&500>ce()-yu?rn(e,0):gu|=n),Me(e,t)}function Pd(e,t){t===0&&(e.mode&1?(t=uo,uo<<=1,!(uo&130023424)&&(uo=4194304)):t=1);var n=Ne();e=xt(e,t),e!==null&&(qr(e,t,n),Me(e,n))}function Ym(e){var t=e.memoizedState,n=0;t!==null&&(n=t.retryLane),Pd(e,n)}function Qm(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;o!==null&&(n=o.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(T(314))}r!==null&&r.delete(t),Pd(e,n)}var Td;Td=function(e,t,n){if(e!==null)if(e.memoizedProps!==t.pendingProps||je.current)Re=!0;else{if(!(e.lanes&n)&&!(t.flags&128))return Re=!1,Rm(e,t,n);Re=!!(e.flags&131072)}else Re=!1,te&&t.flags&1048576&&Of(t,rl,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;zo(e,t),e=t.pendingProps;var o=Wn(t,_e.current);Un(t,n),o=cu(null,t,r,e,o,n);var l=fu();return t.flags|=1,typeof o=="object"&&o!==null&&typeof o.render=="function"&&o.$$typeof===void 0?(t.tag=1,t.memoizedState=null,t.updateQueue=null,ze(r)?(l=!0,tl(t)):l=!1,t.memoizedState=o.state!==null&&o.state!==void 0?o.state:null,lu(t),o.updater=Ol,t.stateNode=o,o._reactInternals=t,us(t,r,e,n),t=fs(null,t,r,!0,l,n)):(t.tag=0,te&&l&&Js(t),Te(null,t,o,n),t=t.child),t;case 16:r=t.elementType;e:{switch(zo(e,t),e=t.pendingProps,o=r._init,r=o(r._payload),t.type=r,o=t.tag=Gm(r),e=et(r,e),o){case 0:t=cs(null,t,r,e,n);break e;case 1:t=$a(null,t,r,e,n);break e;case 11:t=Pa(null,t,r,e,n);break e;case 14:t=Ta(null,t,r,et(r.type,e),n);break e}throw Error(T(306,r,""))}return t;case 0:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:et(r,o),cs(e,t,r,o,n);case 1:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:et(r,o),$a(e,t,r,o,n);case 3:e:{if(cd(t),e===null)throw Error(T(387));r=t.pendingProps,l=t.memoizedState,o=l.element,Af(e,t),il(t,r,null,n);var i=t.memoizedState;if(r=i.element,l.isDehydrated)if(l={element:r,isDehydrated:!1,cache:i.cache,pendingSuspenseBoundaries:i.pendingSuspenseBoundaries,transitions:i.transitions},t.updateQueue.baseState=l,t.memoizedState=l,t.flags&256){o=Kn(Error(T(423)),t),t=Na(e,t,r,n,o);break e}else if(r!==o){o=Kn(Error(T(424)),t),t=Na(e,t,r,n,o);break e}else for(Ue=Ft(t.stateNode.containerInfo.firstChild),He=t,te=!0,nt=null,n=zf(t,null,r,n),t.child=n;n;)n.flags=n.flags&-3|4096,n=n.sibling;else{if(Vn(),r===o){t=Ct(e,t,n);break e}Te(e,t,r,n)}t=t.child}return t;case 5:return Ff(t),e===null&&ls(t),r=t.type,o=t.pendingProps,l=e!==null?e.memoizedProps:null,i=o.children,es(r,o)?i=null:l!==null&&es(r,l)&&(t.flags|=32),ad(e,t),Te(e,t,i,n),t.child;case 6:return e===null&&ls(t),null;case 13:return fd(e,t,n);case 4:return iu(t,t.stateNode.containerInfo),r=t.pendingProps,e===null?t.child=Yn(t,null,r,n):Te(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:et(r,o),Pa(e,t,r,o,n);case 7:return Te(e,t,t.pendingProps,n),t.child;case 8:return Te(e,t,t.pendingProps.children,n),t.child;case 12:return Te(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,l=t.memoizedProps,i=o.value,q(ol,r._currentValue),r._currentValue=i,l!==null)if(it(l.value,i)){if(l.children===o.children&&!je.current){t=Ct(e,t,n);break e}}else for(l=t.child,l!==null&&(l.return=t);l!==null;){var s=l.dependencies;if(s!==null){i=l.child;for(var u=s.firstContext;u!==null;){if(u.context===r){if(l.tag===1){u=wt(-1,n&-n),u.tag=2;var f=l.updateQueue;if(f!==null){f=f.shared;var m=f.pending;m===null?u.next=u:(u.next=m.next,m.next=u),f.pending=u}}l.lanes|=n,u=l.alternate,u!==null&&(u.lanes|=n),is(l.return,n,t),s.lanes|=n;break}u=u.next}}else if(l.tag===10)i=l.type===t.type?null:l.child;else if(l.tag===18){if(i=l.return,i===null)throw Error(T(341));i.lanes|=n,s=i.alternate,s!==null&&(s.lanes|=n),is(i,n,t),i=l.sibling}else i=l.child;if(i!==null)i.return=l;else for(i=l;i!==null;){if(i===t){i=null;break}if(l=i.sibling,l!==null){l.return=i.return,i=l;break}i=i.return}l=i}Te(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=t.pendingProps.children,Un(t,n),o=Ze(o),r=r(o),t.flags|=1,Te(e,t,r,n),t.child;case 14:return r=t.type,o=et(r,t.pendingProps),o=et(r.type,o),Ta(e,t,r,o,n);case 15:return sd(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:et(r,o),zo(e,t),t.tag=1,ze(r)?(e=!0,tl(t)):e=!1,Un(t,n),od(t,r,o),us(t,r,o,n),fs(null,t,r,!0,e,n);case 19:return dd(e,t,n);case 22:return ud(e,t,n)}throw Error(T(156,t.tag))};function $d(e,t){return ef(e,t)}function Km(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Ge(e,t,n,r){return new Km(e,t,n,r)}function Su(e){return e=e.prototype,!(!e||!e.isReactComponent)}function Gm(e){if(typeof e=="function")return Su(e)?1:0;if(e!=null){if(e=e.$$typeof,e===Us)return 11;if(e===Bs)return 14}return 2}function Ht(e,t){var n=e.alternate;return n===null?(n=Ge(e.tag,t,e.key,e.mode),n.elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=e.flags&14680064,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=t===null?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Fo(e,t,n,r,o,l){var i=2;if(r=e,typeof e=="function")Su(e)&&(i=1);else if(typeof e=="string")i=5;else e:switch(e){case Cn:return on(n.children,o,l,t);case Ds:i=8,o|=8;break;case Li:return e=Ge(12,n,t,o|2),e.elementType=Li,e.lanes=l,e;case Ri:return e=Ge(13,n,t,o),e.elementType=Ri,e.lanes=l,e;case ji:return e=Ge(19,n,t,o),e.elementType=ji,e.lanes=l,e;case Ac:return jl(n,o,l,t);default:if(typeof e=="object"&&e!==null)switch(e.$$typeof){case zc:i=10;break e;case Mc:i=9;break e;case Us:i=11;break e;case Bs:i=14;break e;case $t:i=16,r=null;break e}throw Error(T(130,e==null?e:typeof e,""))}return t=Ge(i,n,t,o),t.elementType=e,t.type=r,t.lanes=l,t}function on(e,t,n,r){return e=Ge(7,e,r,t),e.lanes=n,e}function jl(e,t,n,r){return e=Ge(22,e,r,t),e.elementType=Ac,e.lanes=n,e.stateNode={isHidden:!1},e}function ki(e,t,n){return e=Ge(6,e,null,t),e.lanes=n,e}function Si(e,t,n){return t=Ge(4,e.children!==null?e.children:[],e.key,t),t.lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Xm(e,t,n,r,o){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=ti(0),this.expirationTimes=ti(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=ti(0),this.identifierPrefix=r,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function xu(e,t,n,r,o,l,i,s,u){return e=new Xm(e,t,n,s,u),t===1?(t=1,l===!0&&(t|=8)):t=0,l=Ge(3,null,null,t),e.current=l,l.stateNode=e,l.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},lu(l),e}function Zm(e,t,n){var r=3<arguments.length&&arguments[3]!==void 0?arguments[3]:null;return{$$typeof:xn,key:r==null?null:""+r,children:e,containerInfo:t,implementation:n}}function Nd(e){if(!e)return Yt;e=e._reactInternals;e:{if(yn(e)!==e||e.tag!==1)throw Error(T(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(ze(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(t!==null);throw Error(T(171))}if(e.tag===1){var n=e.type;if(ze(n))return Nf(e,n,t)}return t}function Id(e,t,n,r,o,l,i,s,u){return e=xu(n,r,!0,e,o,l,i,s,u),e.context=Nd(null),n=e.current,r=Ne(),o=Bt(n),l=wt(r,o),l.callback=t??null,Dt(n,l,o),e.current.lanes=o,qr(e,o,r),Me(e,r),e}function zl(e,t,n,r){var o=t.current,l=Ne(),i=Bt(o);return n=Nd(n),t.context===null?t.context=n:t.pendingContext=n,t=wt(l,i),t.payload={element:e},r=r===void 0?null:r,r!==null&&(t.callback=r),e=Dt(o,t,i),e!==null&&(ot(e,o,i,l),Lo(e,o,i)),i}function hl(e){if(e=e.current,!e.child)return null;switch(e.child.tag){case 5:return e.child.stateNode;default:return e.child.stateNode}}function Da(e,t){if(e=e.memoizedState,e!==null&&e.dehydrated!==null){var n=e.retryLane;e.retryLane=n!==0&&n<t?n:t}}function Cu(e,t){Da(e,t),(e=e.alternate)&&Da(e,t)}function qm(){return null}var Od=typeof reportError=="function"?reportError:function(e){console.error(e)};function Eu(e){this._internalRoot=e}Ml.prototype.render=Eu.prototype.render=function(e){var t=this._internalRoot;if(t===null)throw Error(T(409));zl(e,t,null,null)};Ml.prototype.unmount=Eu.prototype.unmount=function(){var e=this._internalRoot;if(e!==null){this._internalRoot=null;var t=e.containerInfo;pn(function(){zl(null,e,null,null)}),t[St]=null}};function Ml(e){this._internalRoot=e}Ml.prototype.unstable_scheduleHydration=function(e){if(e){var t=uf();e={blockedOn:null,target:e,priority:t};for(var n=0;n<It.length&&t!==0&&t<It[n].priority;n++);It.splice(n,0,e),n===0&&cf(e)}};function _u(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11)}function Al(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11&&(e.nodeType!==8||e.nodeValue!==" react-mount-point-unstable "))}function Ua(){}function Jm(e,t,n,r,o){if(o){if(typeof r=="function"){var l=r;r=function(){var f=hl(i);l.call(f)}}var i=Id(t,r,e,0,null,!1,!1,"",Ua);return e._reactRootContainer=i,e[St]=i.current,Ar(e.nodeType===8?e.parentNode:e),pn(),i}for(;o=e.lastChild;)e.removeChild(o);if(typeof r=="function"){var s=r;r=function(){var f=hl(u);s.call(f)}}var u=xu(e,0,!1,null,null,!1,!1,"",Ua);return e._reactRootContainer=u,e[St]=u.current,Ar(e.nodeType===8?e.parentNode:e),pn(function(){zl(t,u,n,r)}),u}function Fl(e,t,n,r,o){var l=n._reactRootContainer;if(l){var i=l;if(typeof o=="function"){var s=o;o=function(){var u=hl(i);s.call(u)}}zl(t,i,e,o)}else i=Jm(n,t,e,o,r);return hl(i)}lf=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=pr(t.pendingLanes);n!==0&&(Vs(t,n|1),Me(t,ce()),!(Q&6)&&(Gn=ce()+500,Gt()))}break;case 13:pn(function(){var r=xt(e,1);if(r!==null){var o=Ne();ot(r,e,1,o)}}),Cu(e,1)}};Ys=function(e){if(e.tag===13){var t=xt(e,134217728);if(t!==null){var n=Ne();ot(t,e,134217728,n)}Cu(e,134217728)}};sf=function(e){if(e.tag===13){var t=Bt(e),n=xt(e,t);if(n!==null){var r=Ne();ot(n,e,t,r)}Cu(e,t)}};uf=function(){return X};af=function(e,t){var n=X;try{return X=e,t()}finally{X=n}};Vi=function(e,t,n){switch(t){case"input":if(Ai(e,n),t=n.name,n.type==="radio"&&t!=null){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=$l(r);if(!o)throw Error(T(90));Dc(r),Ai(r,o)}}}break;case"textarea":Bc(e,n);break;case"select":t=n.value,t!=null&&Mn(e,!!n.multiple,t,!1)}};Gc=vu;Xc=pn;var bm={usingClientEntryPoint:!1,Events:[br,Tn,$l,Qc,Kc,vu]},cr={findFiberByHostInstance:bt,bundleType:0,version:"18.3.1",rendererPackageName:"react-dom"},eg={bundleType:cr.bundleType,version:cr.version,rendererPackageName:cr.rendererPackageName,rendererConfig:cr.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:Et.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return e=Jc(e),e===null?null:e.stateNode},findFiberByHostInstance:cr.findFiberByHostInstance||qm,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.3.1-next-f1338f8080-20240426"};if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__<"u"){var ko=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ko.isDisabled&&ko.supportsFiber)try{El=ko.inject(eg),dt=ko}catch{}}Ve.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=bm;Ve.createPortal=function(e,t){var n=2<arguments.length&&arguments[2]!==void 0?arguments[2]:null;if(!_u(t))throw Error(T(200));return Zm(e,t,null,n)};Ve.createRoot=function(e,t){if(!_u(e))throw Error(T(299));var n=!1,r="",o=Od;return t!=null&&(t.unstable_strictMode===!0&&(n=!0),t.identifierPrefix!==void 0&&(r=t.identifierPrefix),t.onRecoverableError!==void 0&&(o=t.onRecoverableError)),t=xu(e,1,!1,null,null,n,!1,r,o),e[St]=t.current,Ar(e.nodeType===8?e.parentNode:e),new Eu(t)};Ve.findDOMNode=function(e){if(e==null)return null;if(e.nodeType===1)return e;var t=e._reactInternals;if(t===void 0)throw typeof e.render=="function"?Error(T(188)):(e=Object.keys(e).join(","),Error(T(268,e)));return e=Jc(t),e=e===null?null:e.stateNode,e};Ve.flushSync=function(e){return pn(e)};Ve.hydrate=function(e,t,n){if(!Al(t))throw Error(T(200));return Fl(null,e,t,!0,n)};Ve.hydrateRoot=function(e,t,n){if(!_u(e))throw Error(T(405));var r=n!=null&&n.hydratedSources||null,o=!1,l="",i=Od;if(n!=null&&(n.unstable_strictMode===!0&&(o=!0),n.identifierPrefix!==void 0&&(l=n.identifierPrefix),n.onRecoverableError!==void 0&&(i=n.onRecoverableError)),t=Id(t,null,e,1,n??null,o,!1,l,i),e[St]=t.current,Ar(e),r)for(e=0;e<r.length;e++)n=r[e],o=n._getVersion,o=o(n._source),t.mutableSourceEagerHydrationData==null?t.mutableSourceEagerHydrationData=[n,o]:t.mutableSourceEagerHydrationData.push(n,o);return new Ml(t)};Ve.render=function(e,t,n){if(!Al(t))throw Error(T(200));return Fl(null,e,t,!1,n)};Ve.unmountComponentAtNode=function(e){if(!Al(e))throw Error(T(40));return e._reactRootContainer?(pn(function(){Fl(null,null,e,!1,function(){e._reactRootContainer=null,e[St]=null})}),!0):!1};Ve.unstable_batchedUpdates=vu;Ve.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Al(n))throw Error(T(200));if(e==null||e._reactInternals===void 0)throw Error(T(38));return Fl(e,t,n,!1,r)};Ve.version="18.3.1-next-f1338f8080-20240426";function Ld(){if(!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__>"u"||typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE!="function"))try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(Ld)}catch(e){console.error(e)}}Ld(),Oc.exports=Ve;var tg=Oc.exports,Ba=tg;Ii.createRoot=Ba.createRoot,Ii.hydrateRoot=Ba.hydrateRoot;var Ee=function(){return Ee=Object.assign||function(t){for(var n,r=1,o=arguments.length;r<o;r++){n=arguments[r];for(var l in n)Object.prototype.hasOwnProperty.call(n,l)&&(t[l]=n[l])}return t},Ee.apply(this,arguments)};function ml(e,t,n){if(n||arguments.length===2)for(var r=0,o=t.length,l;r<o;r++)(l||!(r in t))&&(l||(l=Array.prototype.slice.call(t,0,r)),l[r]=t[r]);return e.concat(l||Array.prototype.slice.call(t))}var b="-ms-",Pr="-moz-",K="-webkit-",Rd="comm",Dl="rule",Pu="decl",ng="@import",jd="@keyframes",rg="@layer",zd=Math.abs,Tu=String.fromCharCode,Cs=Object.assign;function og(e,t){return ge(e,0)^45?(((t<<2^ge(e,0))<<2^ge(e,1))<<2^ge(e,2))<<2^ge(e,3):0}function Md(e){return e.trim()}function mt(e,t){return(e=t.exec(e))?e[0]:e}function H(e,t,n){return e.replace(t,n)}function Do(e,t,n){return e.indexOf(t,n)}function ge(e,t){return e.charCodeAt(t)|0}function Xn(e,t,n){return e.slice(t,n)}function ct(e){return e.length}function Ad(e){return e.length}function mr(e,t){return t.push(e),e}function lg(e,t){return e.map(t).join("")}function Ha(e,t){return e.filter(function(n){return!mt(n,t)})}var Ul=1,Zn=1,Fd=0,Je=0,fe=0,nr="";function Bl(e,t,n,r,o,l,i,s){return{value:e,root:t,parent:n,type:r,props:o,children:l,line:Ul,column:Zn,length:i,return:"",siblings:s}}function Tt(e,t){return Cs(Bl("",null,null,"",null,null,0,e.siblings),e,{length:-e.length},t)}function wn(e){for(;e.root;)e=Tt(e.root,{children:[e]});mr(e,e.siblings)}function ig(){return fe}function sg(){return fe=Je>0?ge(nr,--Je):0,Zn--,fe===10&&(Zn=1,Ul--),fe}function lt(){return fe=Je<Fd?ge(nr,Je++):0,Zn++,fe===10&&(Zn=1,Ul++),fe}function ln(){return ge(nr,Je)}function Uo(){return Je}function Hl(e,t){return Xn(nr,e,t)}function Es(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function ug(e){return Ul=Zn=1,Fd=ct(nr=e),Je=0,[]}function ag(e){return nr="",e}function xi(e){return Md(Hl(Je-1,_s(e===91?e+2:e===40?e+1:e)))}function cg(e){for(;(fe=ln())&&fe<33;)lt();return Es(e)>2||Es(fe)>3?"":" "}function fg(e,t){for(;--t&&lt()&&!(fe<48||fe>102||fe>57&&fe<65||fe>70&&fe<97););return Hl(e,Uo()+(t<6&&ln()==32&&lt()==32))}function _s(e){for(;lt();)switch(fe){case e:return Je;case 34:case 39:e!==34&&e!==39&&_s(fe);break;case 40:e===41&&_s(e);break;case 92:lt();break}return Je}function dg(e,t){for(;lt()&&e+fe!==57;)if(e+fe===84&&ln()===47)break;return"/*"+Hl(t,Je-1)+"*"+Tu(e===47?e:lt())}function pg(e){for(;!Es(ln());)lt();return Hl(e,Je)}function hg(e){return ag(Bo("",null,null,null,[""],e=ug(e),0,[0],e))}function Bo(e,t,n,r,o,l,i,s,u){for(var f=0,m=0,g=i,h=0,v=0,w=0,k=1,P=1,c=1,a=0,d="",p=o,S=l,x=r,y=d;P;)switch(w=a,a=lt()){case 40:if(w!=108&&ge(y,g-1)==58){Do(y+=H(xi(a),"&","&\f"),"&\f",zd(f?s[f-1]:0))!=-1&&(c=-1);break}case 34:case 39:case 91:y+=xi(a);break;case 9:case 10:case 13:case 32:y+=cg(w);break;case 92:y+=fg(Uo()-1,7);continue;case 47:switch(ln()){case 42:case 47:mr(mg(dg(lt(),Uo()),t,n,u),u);break;default:y+="/"}break;case 123*k:s[f++]=ct(y)*c;case 125*k:case 59:case 0:switch(a){case 0:case 125:P=0;case 59+m:c==-1&&(y=H(y,/\f/g,"")),v>0&&ct(y)-g&&mr(v>32?Va(y+";",r,n,g-1,u):Va(H(y," ","")+";",r,n,g-2,u),u);break;case 59:y+=";";default:if(mr(x=Wa(y,t,n,f,m,o,s,d,p=[],S=[],g,l),l),a===123)if(m===0)Bo(y,t,x,x,p,l,g,s,S);else switch(h===99&&ge(y,3)===110?100:h){case 100:case 108:case 109:case 115:Bo(e,x,x,r&&mr(Wa(e,x,x,0,0,o,s,d,o,p=[],g,S),S),o,S,g,s,r?p:S);break;default:Bo(y,x,x,x,[""],S,0,s,S)}}f=m=v=0,k=c=1,d=y="",g=i;break;case 58:g=1+ct(y),v=w;default:if(k<1){if(a==123)--k;else if(a==125&&k++==0&&sg()==125)continue}switch(y+=Tu(a),a*k){case 38:c=m>0?1:(y+="\f",-1);break;case 44:s[f++]=(ct(y)-1)*c,c=1;break;case 64:ln()===45&&(y+=xi(lt())),h=ln(),m=g=ct(d=y+=pg(Uo())),a++;break;case 45:w===45&&ct(y)==2&&(k=0)}}return l}function Wa(e,t,n,r,o,l,i,s,u,f,m,g){for(var h=o-1,v=o===0?l:[""],w=Ad(v),k=0,P=0,c=0;k<r;++k)for(var a=0,d=Xn(e,h+1,h=zd(P=i[k])),p=e;a<w;++a)(p=Md(P>0?v[a]+" "+d:H(d,/&\f/g,v[a])))&&(u[c++]=p);return Bl(e,t,n,o===0?Dl:s,u,f,m,g)}function mg(e,t,n,r){return Bl(e,t,n,Rd,Tu(ig()),Xn(e,2,-2),0,r)}function Va(e,t,n,r,o){return Bl(e,t,n,Pu,Xn(e,0,r),Xn(e,r+1,-1),r,o)}function Dd(e,t,n){switch(og(e,t)){case 5103:return K+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return K+e+e;case 4789:return Pr+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return K+e+Pr+e+b+e+e;case 5936:switch(ge(e,t+11)){case 114:return K+e+b+H(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return K+e+b+H(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return K+e+b+H(e,/[svh]\w+-[tblr]{2}/,"lr")+e}case 6828:case 4268:case 2903:return K+e+b+e+e;case 6165:return K+e+b+"flex-"+e+e;case 5187:return K+e+H(e,/(\w+).+(:[^]+)/,K+"box-$1$2"+b+"flex-$1$2")+e;case 5443:return K+e+b+"flex-item-"+H(e,/flex-|-self/g,"")+(mt(e,/flex-|baseline/)?"":b+"grid-row-"+H(e,/flex-|-self/g,""))+e;case 4675:return K+e+b+"flex-line-pack"+H(e,/align-content|flex-|-self/g,"")+e;case 5548:return K+e+b+H(e,"shrink","negative")+e;case 5292:return K+e+b+H(e,"basis","preferred-size")+e;case 6060:return K+"box-"+H(e,"-grow","")+K+e+b+H(e,"grow","positive")+e;case 4554:return K+H(e,/([^-])(transform)/g,"$1"+K+"$2")+e;case 6187:return H(H(H(e,/(zoom-|grab)/,K+"$1"),/(image-set)/,K+"$1"),e,"")+e;case 5495:case 3959:return H(e,/(image-set\([^]*)/,K+"$1$`$1");case 4968:return H(H(e,/(.+:)(flex-)?(.*)/,K+"box-pack:$3"+b+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+K+e+e;case 4200:if(!mt(e,/flex-|baseline/))return b+"grid-column-align"+Xn(e,t)+e;break;case 2592:case 3360:return b+H(e,"template-","")+e;case 4384:case 3616:return n&&n.some(function(r,o){return t=o,mt(r.props,/grid-\w+-end/)})?~Do(e+(n=n[t].value),"span",0)?e:b+H(e,"-start","")+e+b+"grid-row-span:"+(~Do(n,"span",0)?mt(n,/\d+/):+mt(n,/\d+/)-+mt(e,/\d+/))+";":b+H(e,"-start","")+e;case 4896:case 4128:return n&&n.some(function(r){return mt(r.props,/grid-\w+-start/)})?e:b+H(H(e,"-end","-span"),"span ","")+e;case 4095:case 3583:case 4068:case 2532:return H(e,/(.+)-inline(.+)/,K+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(ct(e)-1-t>6)switch(ge(e,t+1)){case 109:if(ge(e,t+4)!==45)break;case 102:return H(e,/(.+:)(.+)-([^]+)/,"$1"+K+"$2-$3$1"+Pr+(ge(e,t+3)==108?"$3":"$2-$3"))+e;case 115:return~Do(e,"stretch",0)?Dd(H(e,"stretch","fill-available"),t,n)+e:e}break;case 5152:case 5920:return H(e,/(.+?):(\d+)(\s*\/\s*(span)?\s*(\d+))?(.*)/,function(r,o,l,i,s,u,f){return b+o+":"+l+f+(i?b+o+"-span:"+(s?u:+u-+l)+f:"")+e});case 4949:if(ge(e,t+6)===121)return H(e,":",":"+K)+e;break;case 6444:switch(ge(e,ge(e,14)===45?18:11)){case 120:return H(e,/(.+:)([^;\s!]+)(;|(\s+)?!.+)?/,"$1"+K+(ge(e,14)===45?"inline-":"")+"box$3$1"+K+"$2$3$1"+b+"$2box$3")+e;case 100:return H(e,":",":"+b)+e}break;case 5719:case 2647:case 2135:case 3927:case 2391:return H(e,"scroll-","scroll-snap-")+e}return e}function gl(e,t){for(var n="",r=0;r<e.length;r++)n+=t(e[r],r,e,t)||"";return n}function gg(e,t,n,r){switch(e.type){case rg:if(e.children.length)break;case ng:case Pu:return e.return=e.return||e.value;case Rd:return"";case jd:return e.return=e.value+"{"+gl(e.children,r)+"}";case Dl:if(!ct(e.value=e.props.join(",")))return""}return ct(n=gl(e.children,r))?e.return=e.value+"{"+n+"}":""}function yg(e){var t=Ad(e);return function(n,r,o,l){for(var i="",s=0;s<t;s++)i+=e[s](n,r,o,l)||"";return i}}function vg(e){return function(t){t.root||(t=t.return)&&e(t)}}function wg(e,t,n,r){if(e.length>-1&&!e.return)switch(e.type){case Pu:e.return=Dd(e.value,e.length,n);return;case jd:return gl([Tt(e,{value:H(e.value,"@","@"+K)})],r);case Dl:if(e.length)return lg(n=e.props,function(o){switch(mt(o,r=/(::plac\w+|:read-\w+)/)){case":read-only":case":read-write":wn(Tt(e,{props:[H(o,/:(read-\w+)/,":"+Pr+"$1")]})),wn(Tt(e,{props:[o]})),Cs(e,{props:Ha(n,r)});break;case"::placeholder":wn(Tt(e,{props:[H(o,/:(plac\w+)/,":"+K+"input-$1")]})),wn(Tt(e,{props:[H(o,/:(plac\w+)/,":"+Pr+"$1")]})),wn(Tt(e,{props:[H(o,/:(plac\w+)/,b+"input-$1")]})),wn(Tt(e,{props:[o]})),Cs(e,{props:Ha(n,r)});break}return""})}}var kg={animationIterationCount:1,aspectRatio:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},Ae={},qn=typeof process<"u"&&Ae!==void 0&&(Ae.REACT_APP_SC_ATTR||Ae.SC_ATTR)||"data-styled",Ud="active",Bd="data-styled-version",Wl="6.1.19",$u=`/*!sc*/
`,yl=typeof window<"u"&&typeof document<"u",Sg=!!(typeof SC_DISABLE_SPEEDY=="boolean"?SC_DISABLE_SPEEDY:typeof process<"u"&&Ae!==void 0&&Ae.REACT_APP_SC_DISABLE_SPEEDY!==void 0&&Ae.REACT_APP_SC_DISABLE_SPEEDY!==""?Ae.REACT_APP_SC_DISABLE_SPEEDY!=="false"&&Ae.REACT_APP_SC_DISABLE_SPEEDY:typeof process<"u"&&Ae!==void 0&&Ae.SC_DISABLE_SPEEDY!==void 0&&Ae.SC_DISABLE_SPEEDY!==""&&Ae.SC_DISABLE_SPEEDY!=="false"&&Ae.SC_DISABLE_SPEEDY),Vl=Object.freeze([]),Jn=Object.freeze({});function xg(e,t,n){return n===void 0&&(n=Jn),e.theme!==n.theme&&e.theme||t||n.theme}var Hd=new Set(["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","tr","track","u","ul","use","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"]),Cg=/[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g,Eg=/(^-|-$)/g;function Ya(e){return e.replace(Cg,"-").replace(Eg,"")}var _g=/(a)(d)/gi,So=52,Qa=function(e){return String.fromCharCode(e+(e>25?39:97))};function Ps(e){var t,n="";for(t=Math.abs(e);t>So;t=t/So|0)n=Qa(t%So)+n;return(Qa(t%So)+n).replace(_g,"$1-$2")}var Ci,Wd=5381,jn=function(e,t){for(var n=t.length;n;)e=33*e^t.charCodeAt(--n);return e},Vd=function(e){return jn(Wd,e)};function Pg(e){return Ps(Vd(e)>>>0)}function Tg(e){return e.displayName||e.name||"Component"}function Ei(e){return typeof e=="string"&&!0}var Yd=typeof Symbol=="function"&&Symbol.for,Qd=Yd?Symbol.for("react.memo"):60115,$g=Yd?Symbol.for("react.forward_ref"):60112,Ng={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},Ig={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},Kd={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},Og=((Ci={})[$g]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},Ci[Qd]=Kd,Ci);function Ka(e){return("type"in(t=e)&&t.type.$$typeof)===Qd?Kd:"$$typeof"in e?Og[e.$$typeof]:Ng;var t}var Lg=Object.defineProperty,Rg=Object.getOwnPropertyNames,Ga=Object.getOwnPropertySymbols,jg=Object.getOwnPropertyDescriptor,zg=Object.getPrototypeOf,Xa=Object.prototype;function Gd(e,t,n){if(typeof t!="string"){if(Xa){var r=zg(t);r&&r!==Xa&&Gd(e,r,n)}var o=Rg(t);Ga&&(o=o.concat(Ga(t)));for(var l=Ka(e),i=Ka(t),s=0;s<o.length;++s){var u=o[s];if(!(u in Ig||n&&n[u]||i&&u in i||l&&u in l)){var f=jg(t,u);try{Lg(e,u,f)}catch{}}}}return e}function hn(e){return typeof e=="function"}function Nu(e){return typeof e=="object"&&"styledComponentId"in e}function nn(e,t){return e&&t?"".concat(e," ").concat(t):e||t||""}function Za(e,t){if(e.length===0)return"";for(var n=e[0],r=1;r<e.length;r++)n+=e[r];return n}function Qr(e){return e!==null&&typeof e=="object"&&e.constructor.name===Object.name&&!("props"in e&&e.$$typeof)}function Ts(e,t,n){if(n===void 0&&(n=!1),!n&&!Qr(e)&&!Array.isArray(e))return t;if(Array.isArray(t))for(var r=0;r<t.length;r++)e[r]=Ts(e[r],t[r]);else if(Qr(t))for(var r in t)e[r]=Ts(e[r],t[r]);return e}function Iu(e,t){Object.defineProperty(e,"toString",{value:t})}function mn(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return new Error("An error occurred. See https://github.com/styled-components/styled-components/blob/main/packages/styled-components/src/utils/errors.md#".concat(e," for more information.").concat(t.length>0?" Args: ".concat(t.join(", ")):""))}var Mg=function(){function e(t){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=t}return e.prototype.indexOfGroup=function(t){for(var n=0,r=0;r<t;r++)n+=this.groupSizes[r];return n},e.prototype.insertRules=function(t,n){if(t>=this.groupSizes.length){for(var r=this.groupSizes,o=r.length,l=o;t>=l;)if((l<<=1)<0)throw mn(16,"".concat(t));this.groupSizes=new Uint32Array(l),this.groupSizes.set(r),this.length=l;for(var i=o;i<l;i++)this.groupSizes[i]=0}for(var s=this.indexOfGroup(t+1),u=(i=0,n.length);i<u;i++)this.tag.insertRule(s,n[i])&&(this.groupSizes[t]++,s++)},e.prototype.clearGroup=function(t){if(t<this.length){var n=this.groupSizes[t],r=this.indexOfGroup(t),o=r+n;this.groupSizes[t]=0;for(var l=r;l<o;l++)this.tag.deleteRule(r)}},e.prototype.getGroup=function(t){var n="";if(t>=this.length||this.groupSizes[t]===0)return n;for(var r=this.groupSizes[t],o=this.indexOfGroup(t),l=o+r,i=o;i<l;i++)n+="".concat(this.tag.getRule(i)).concat($u);return n},e}(),Ho=new Map,vl=new Map,Wo=1,xo=function(e){if(Ho.has(e))return Ho.get(e);for(;vl.has(Wo);)Wo++;var t=Wo++;return Ho.set(e,t),vl.set(t,e),t},Ag=function(e,t){Wo=t+1,Ho.set(e,t),vl.set(t,e)},Fg="style[".concat(qn,"][").concat(Bd,'="').concat(Wl,'"]'),Dg=new RegExp("^".concat(qn,'\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)')),Ug=function(e,t,n){for(var r,o=n.split(","),l=0,i=o.length;l<i;l++)(r=o[l])&&e.registerName(t,r)},Bg=function(e,t){for(var n,r=((n=t.textContent)!==null&&n!==void 0?n:"").split($u),o=[],l=0,i=r.length;l<i;l++){var s=r[l].trim();if(s){var u=s.match(Dg);if(u){var f=0|parseInt(u[1],10),m=u[2];f!==0&&(Ag(m,f),Ug(e,m,u[3]),e.getTag().insertRules(f,o)),o.length=0}else o.push(s)}}},qa=function(e){for(var t=document.querySelectorAll(Fg),n=0,r=t.length;n<r;n++){var o=t[n];o&&o.getAttribute(qn)!==Ud&&(Bg(e,o),o.parentNode&&o.parentNode.removeChild(o))}};function Hg(){return typeof __webpack_nonce__<"u"?__webpack_nonce__:null}var Xd=function(e){var t=document.head,n=e||t,r=document.createElement("style"),o=function(s){var u=Array.from(s.querySelectorAll("style[".concat(qn,"]")));return u[u.length-1]}(n),l=o!==void 0?o.nextSibling:null;r.setAttribute(qn,Ud),r.setAttribute(Bd,Wl);var i=Hg();return i&&r.setAttribute("nonce",i),n.insertBefore(r,l),r},Wg=function(){function e(t){this.element=Xd(t),this.element.appendChild(document.createTextNode("")),this.sheet=function(n){if(n.sheet)return n.sheet;for(var r=document.styleSheets,o=0,l=r.length;o<l;o++){var i=r[o];if(i.ownerNode===n)return i}throw mn(17)}(this.element),this.length=0}return e.prototype.insertRule=function(t,n){try{return this.sheet.insertRule(n,t),this.length++,!0}catch{return!1}},e.prototype.deleteRule=function(t){this.sheet.deleteRule(t),this.length--},e.prototype.getRule=function(t){var n=this.sheet.cssRules[t];return n&&n.cssText?n.cssText:""},e}(),Vg=function(){function e(t){this.element=Xd(t),this.nodes=this.element.childNodes,this.length=0}return e.prototype.insertRule=function(t,n){if(t<=this.length&&t>=0){var r=document.createTextNode(n);return this.element.insertBefore(r,this.nodes[t]||null),this.length++,!0}return!1},e.prototype.deleteRule=function(t){this.element.removeChild(this.nodes[t]),this.length--},e.prototype.getRule=function(t){return t<this.length?this.nodes[t].textContent:""},e}(),Yg=function(){function e(t){this.rules=[],this.length=0}return e.prototype.insertRule=function(t,n){return t<=this.length&&(this.rules.splice(t,0,n),this.length++,!0)},e.prototype.deleteRule=function(t){this.rules.splice(t,1),this.length--},e.prototype.getRule=function(t){return t<this.length?this.rules[t]:""},e}(),Ja=yl,Qg={isServer:!yl,useCSSOMInjection:!Sg},Zd=function(){function e(t,n,r){t===void 0&&(t=Jn),n===void 0&&(n={});var o=this;this.options=Ee(Ee({},Qg),t),this.gs=n,this.names=new Map(r),this.server=!!t.isServer,!this.server&&yl&&Ja&&(Ja=!1,qa(this)),Iu(this,function(){return function(l){for(var i=l.getTag(),s=i.length,u="",f=function(g){var h=function(c){return vl.get(c)}(g);if(h===void 0)return"continue";var v=l.names.get(h),w=i.getGroup(g);if(v===void 0||!v.size||w.length===0)return"continue";var k="".concat(qn,".g").concat(g,'[id="').concat(h,'"]'),P="";v!==void 0&&v.forEach(function(c){c.length>0&&(P+="".concat(c,","))}),u+="".concat(w).concat(k,'{content:"').concat(P,'"}').concat($u)},m=0;m<s;m++)f(m);return u}(o)})}return e.registerId=function(t){return xo(t)},e.prototype.rehydrate=function(){!this.server&&yl&&qa(this)},e.prototype.reconstructWithOptions=function(t,n){return n===void 0&&(n=!0),new e(Ee(Ee({},this.options),t),this.gs,n&&this.names||void 0)},e.prototype.allocateGSInstance=function(t){return this.gs[t]=(this.gs[t]||0)+1},e.prototype.getTag=function(){return this.tag||(this.tag=(t=function(n){var r=n.useCSSOMInjection,o=n.target;return n.isServer?new Yg(o):r?new Wg(o):new Vg(o)}(this.options),new Mg(t)));var t},e.prototype.hasNameForId=function(t,n){return this.names.has(t)&&this.names.get(t).has(n)},e.prototype.registerName=function(t,n){if(xo(t),this.names.has(t))this.names.get(t).add(n);else{var r=new Set;r.add(n),this.names.set(t,r)}},e.prototype.insertRules=function(t,n,r){this.registerName(t,n),this.getTag().insertRules(xo(t),r)},e.prototype.clearNames=function(t){this.names.has(t)&&this.names.get(t).clear()},e.prototype.clearRules=function(t){this.getTag().clearGroup(xo(t)),this.clearNames(t)},e.prototype.clearTag=function(){this.tag=void 0},e}(),Kg=/&/g,Gg=/^\s*\/\/.*$/gm;function qd(e,t){return e.map(function(n){return n.type==="rule"&&(n.value="".concat(t," ").concat(n.value),n.value=n.value.replaceAll(",",",".concat(t," ")),n.props=n.props.map(function(r){return"".concat(t," ").concat(r)})),Array.isArray(n.children)&&n.type!=="@keyframes"&&(n.children=qd(n.children,t)),n})}function Xg(e){var t,n,r,o=Jn,l=o.options,i=l===void 0?Jn:l,s=o.plugins,u=s===void 0?Vl:s,f=function(h,v,w){return w.startsWith(n)&&w.endsWith(n)&&w.replaceAll(n,"").length>0?".".concat(t):h},m=u.slice();m.push(function(h){h.type===Dl&&h.value.includes("&")&&(h.props[0]=h.props[0].replace(Kg,n).replace(r,f))}),i.prefix&&m.push(wg),m.push(gg);var g=function(h,v,w,k){v===void 0&&(v=""),w===void 0&&(w=""),k===void 0&&(k="&"),t=k,n=v,r=new RegExp("\\".concat(n,"\\b"),"g");var P=h.replace(Gg,""),c=hg(w||v?"".concat(w," ").concat(v," { ").concat(P," }"):P);i.namespace&&(c=qd(c,i.namespace));var a=[];return gl(c,yg(m.concat(vg(function(d){return a.push(d)})))),a};return g.hash=u.length?u.reduce(function(h,v){return v.name||mn(15),jn(h,v.name)},Wd).toString():"",g}var Zg=new Zd,$s=Xg(),Jd=B.createContext({shouldForwardProp:void 0,styleSheet:Zg,stylis:$s});Jd.Consumer;B.createContext(void 0);function ba(){return E.useContext(Jd)}var qg=function(){function e(t,n){var r=this;this.inject=function(o,l){l===void 0&&(l=$s);var i=r.name+l.hash;o.hasNameForId(r.id,i)||o.insertRules(r.id,i,l(r.rules,i,"@keyframes"))},this.name=t,this.id="sc-keyframes-".concat(t),this.rules=n,Iu(this,function(){throw mn(12,String(r.name))})}return e.prototype.getName=function(t){return t===void 0&&(t=$s),this.name+t.hash},e}(),Jg=function(e){return e>="A"&&e<="Z"};function ec(e){for(var t="",n=0;n<e.length;n++){var r=e[n];if(n===1&&r==="-"&&e[0]==="-")return e;Jg(r)?t+="-"+r.toLowerCase():t+=r}return t.startsWith("ms-")?"-"+t:t}var bd=function(e){return e==null||e===!1||e===""},ep=function(e){var t,n,r=[];for(var o in e){var l=e[o];e.hasOwnProperty(o)&&!bd(l)&&(Array.isArray(l)&&l.isCss||hn(l)?r.push("".concat(ec(o),":"),l,";"):Qr(l)?r.push.apply(r,ml(ml(["".concat(o," {")],ep(l),!1),["}"],!1)):r.push("".concat(ec(o),": ").concat((t=o,(n=l)==null||typeof n=="boolean"||n===""?"":typeof n!="number"||n===0||t in kg||t.startsWith("--")?String(n).trim():"".concat(n,"px")),";")))}return r};function sn(e,t,n,r){if(bd(e))return[];if(Nu(e))return[".".concat(e.styledComponentId)];if(hn(e)){if(!hn(l=e)||l.prototype&&l.prototype.isReactComponent||!t)return[e];var o=e(t);return sn(o,t,n,r)}var l;return e instanceof qg?n?(e.inject(n,r),[e.getName(r)]):[e]:Qr(e)?ep(e):Array.isArray(e)?Array.prototype.concat.apply(Vl,e.map(function(i){return sn(i,t,n,r)})):[e.toString()]}function bg(e){for(var t=0;t<e.length;t+=1){var n=e[t];if(hn(n)&&!Nu(n))return!1}return!0}var ey=Vd(Wl),ty=function(){function e(t,n,r){this.rules=t,this.staticRulesId="",this.isStatic=(r===void 0||r.isStatic)&&bg(t),this.componentId=n,this.baseHash=jn(ey,n),this.baseStyle=r,Zd.registerId(n)}return e.prototype.generateAndInjectStyles=function(t,n,r){var o=this.baseStyle?this.baseStyle.generateAndInjectStyles(t,n,r):"";if(this.isStatic&&!r.hash)if(this.staticRulesId&&n.hasNameForId(this.componentId,this.staticRulesId))o=nn(o,this.staticRulesId);else{var l=Za(sn(this.rules,t,n,r)),i=Ps(jn(this.baseHash,l)>>>0);if(!n.hasNameForId(this.componentId,i)){var s=r(l,".".concat(i),void 0,this.componentId);n.insertRules(this.componentId,i,s)}o=nn(o,i),this.staticRulesId=i}else{for(var u=jn(this.baseHash,r.hash),f="",m=0;m<this.rules.length;m++){var g=this.rules[m];if(typeof g=="string")f+=g;else if(g){var h=Za(sn(g,t,n,r));u=jn(u,h+m),f+=h}}if(f){var v=Ps(u>>>0);n.hasNameForId(this.componentId,v)||n.insertRules(this.componentId,v,r(f,".".concat(v),void 0,this.componentId)),o=nn(o,v)}}return o},e}(),wl=B.createContext(void 0);wl.Consumer;function ny(e){var t=B.useContext(wl),n=E.useMemo(function(){return function(r,o){if(!r)throw mn(14);if(hn(r)){var l=r(o);return l}if(Array.isArray(r)||typeof r!="object")throw mn(8);return o?Ee(Ee({},o),r):r}(e.theme,t)},[e.theme,t]);return e.children?B.createElement(wl.Provider,{value:n},e.children):null}var _i={};function ry(e,t,n){var r=Nu(e),o=e,l=!Ei(e),i=t.attrs,s=i===void 0?Vl:i,u=t.componentId,f=u===void 0?function(p,S){var x=typeof p!="string"?"sc":Ya(p);_i[x]=(_i[x]||0)+1;var y="".concat(x,"-").concat(Pg(Wl+x+_i[x]));return S?"".concat(S,"-").concat(y):y}(t.displayName,t.parentComponentId):u,m=t.displayName,g=m===void 0?function(p){return Ei(p)?"styled.".concat(p):"Styled(".concat(Tg(p),")")}(e):m,h=t.displayName&&t.componentId?"".concat(Ya(t.displayName),"-").concat(t.componentId):t.componentId||f,v=r&&o.attrs?o.attrs.concat(s).filter(Boolean):s,w=t.shouldForwardProp;if(r&&o.shouldForwardProp){var k=o.shouldForwardProp;if(t.shouldForwardProp){var P=t.shouldForwardProp;w=function(p,S){return k(p,S)&&P(p,S)}}else w=k}var c=new ty(n,h,r?o.componentStyle:void 0);function a(p,S){return function(x,y,C){var O=x.attrs,N=x.componentStyle,D=x.defaultProps,ne=x.foldedComponentIds,se=x.styledComponentId,ue=x.target,I=B.useContext(wl),j=ba(),F=x.shouldForwardProp||j.shouldForwardProp,_=xg(y,I,D)||Jn,L=function(Z,ae,Pe){for(var Xt,Zt=Ee(Ee({},ae),{className:void 0,theme:Pe}),Xl=0;Xl<Z.length;Xl+=1){var no=hn(Xt=Z[Xl])?Xt(Zt):Xt;for(var _t in no)Zt[_t]=_t==="className"?nn(Zt[_t],no[_t]):_t==="style"?Ee(Ee({},Zt[_t]),no[_t]):no[_t]}return ae.className&&(Zt.className=nn(Zt.className,ae.className)),Zt}(O,y,_),A=L.as||ue,R={};for(var z in L)L[z]===void 0||z[0]==="$"||z==="as"||z==="theme"&&L.theme===_||(z==="forwardedAs"?R.as=L.forwardedAs:F&&!F(z,A)||(R[z]=L[z]));var Y=function(Z,ae){var Pe=ba(),Xt=Z.generateAndInjectStyles(ae,Pe.styleSheet,Pe.stylis);return Xt}(N,L),G=nn(ne,se);return Y&&(G+=" "+Y),L.className&&(G+=" "+L.className),R[Ei(A)&&!Hd.has(A)?"class":"className"]=G,C&&(R.ref=C),E.createElement(A,R)}(d,p,S)}a.displayName=g;var d=B.forwardRef(a);return d.attrs=v,d.componentStyle=c,d.displayName=g,d.shouldForwardProp=w,d.foldedComponentIds=r?nn(o.foldedComponentIds,o.styledComponentId):"",d.styledComponentId=h,d.target=r?o.target:e,Object.defineProperty(d,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(p){this._foldedDefaultProps=r?function(S){for(var x=[],y=1;y<arguments.length;y++)x[y-1]=arguments[y];for(var C=0,O=x;C<O.length;C++)Ts(S,O[C],!0);return S}({},o.defaultProps,p):p}}),Iu(d,function(){return".".concat(d.styledComponentId)}),l&&Gd(d,e,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,styledComponentId:!0,target:!0}),d}function tc(e,t){for(var n=[e[0]],r=0,o=t.length;r<o;r+=1)n.push(t[r],e[r+1]);return n}var nc=function(e){return Object.assign(e,{isCss:!0})};function oy(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];if(hn(e)||Qr(e))return nc(sn(tc(Vl,ml([e],t,!0))));var r=e;return t.length===0&&r.length===1&&typeof r[0]=="string"?sn(r):nc(sn(tc(r,t)))}function Ns(e,t,n){if(n===void 0&&(n=Jn),!t)throw mn(1,t);var r=function(o){for(var l=[],i=1;i<arguments.length;i++)l[i-1]=arguments[i];return e(t,n,oy.apply(void 0,ml([o],l,!1)))};return r.attrs=function(o){return Ns(e,t,Ee(Ee({},n),{attrs:Array.prototype.concat(n.attrs,o).filter(Boolean)}))},r.withConfig=function(o){return Ns(e,t,Ee(Ee({},n),o))},r}var tp=function(e){return Ns(ry,e)},W=tp;Hd.forEach(function(e){W[e]=tp(e)});function np(e){var t,n,r="";if(typeof e=="string"||typeof e=="number")r+=e;else if(typeof e=="object")if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(n=np(e[t]))&&(r&&(r+=" "),r+=n)}else for(n in e)e[n]&&(r&&(r+=" "),r+=n);return r}function jt(){for(var e,t,n=0,r="",o=arguments.length;n<o;n++)(e=arguments[n])&&(t=np(e))&&(r&&(r+=" "),r+=t);return r}const Kr=e=>typeof e=="number"&&!isNaN(e),un=e=>typeof e=="string",Be=e=>typeof e=="function",Vo=e=>un(e)||Be(e)?e:null,Is=e=>E.isValidElement(e)||un(e)||Be(e)||Kr(e);function ly(e,t,n){n===void 0&&(n=300);const{scrollHeight:r,style:o}=e;requestAnimationFrame(()=>{o.minHeight="initial",o.height=r+"px",o.transition=`all ${n}ms`,requestAnimationFrame(()=>{o.height="0",o.padding="0",o.margin="0",setTimeout(t,n)})})}function Yl(e){let{enter:t,exit:n,appendPosition:r=!1,collapse:o=!0,collapseDuration:l=300}=e;return function(i){let{children:s,position:u,preventExitTransition:f,done:m,nodeRef:g,isIn:h,playToast:v}=i;const w=r?`${t}--${u}`:t,k=r?`${n}--${u}`:n,P=E.useRef(0);return E.useLayoutEffect(()=>{const c=g.current,a=w.split(" "),d=p=>{p.target===g.current&&(v(),c.removeEventListener("animationend",d),c.removeEventListener("animationcancel",d),P.current===0&&p.type!=="animationcancel"&&c.classList.remove(...a))};c.classList.add(...a),c.addEventListener("animationend",d),c.addEventListener("animationcancel",d)},[]),E.useEffect(()=>{const c=g.current,a=()=>{c.removeEventListener("animationend",a),o?ly(c,m,l):m()};h||(f?a():(P.current=1,c.className+=` ${k}`,c.addEventListener("animationend",a)))},[h]),B.createElement(B.Fragment,null,s)}}function rc(e,t){return e!=null?{content:e.content,containerId:e.props.containerId,id:e.props.toastId,theme:e.props.theme,type:e.props.type,data:e.props.data||{},isLoading:e.props.isLoading,icon:e.props.icon,status:t}:{}}const $e=new Map;let Gr=[];const Os=new Set,iy=e=>Os.forEach(t=>t(e)),rp=()=>$e.size>0;function op(e,t){var n;if(t)return!((n=$e.get(t))==null||!n.isToastActive(e));let r=!1;return $e.forEach(o=>{o.isToastActive(e)&&(r=!0)}),r}function lp(e,t){Is(e)&&(rp()||Gr.push({content:e,options:t}),$e.forEach(n=>{n.buildToast(e,t)}))}function oc(e,t){$e.forEach(n=>{t!=null&&t!=null&&t.containerId?(t==null?void 0:t.containerId)===n.id&&n.toggle(e,t==null?void 0:t.id):n.toggle(e,t==null?void 0:t.id)})}function sy(e){const{subscribe:t,getSnapshot:n,setProps:r}=E.useRef(function(l){const i=l.containerId||1;return{subscribe(s){const u=function(m,g,h){let v=1,w=0,k=[],P=[],c=[],a=g;const d=new Map,p=new Set,S=()=>{c=Array.from(d.values()),p.forEach(C=>C())},x=C=>{P=C==null?[]:P.filter(O=>O!==C),S()},y=C=>{const{toastId:O,onOpen:N,updateId:D,children:ne}=C.props,se=D==null;C.staleId&&d.delete(C.staleId),d.set(O,C),P=[...P,C.props.toastId].filter(ue=>ue!==C.staleId),S(),h(rc(C,se?"added":"updated")),se&&Be(N)&&N(E.isValidElement(ne)&&ne.props)};return{id:m,props:a,observe:C=>(p.add(C),()=>p.delete(C)),toggle:(C,O)=>{d.forEach(N=>{O!=null&&O!==N.props.toastId||Be(N.toggle)&&N.toggle(C)})},removeToast:x,toasts:d,clearQueue:()=>{w-=k.length,k=[]},buildToast:(C,O)=>{if((z=>{let{containerId:Y,toastId:G,updateId:Z}=z;const ae=Y?Y!==m:m!==1,Pe=d.has(G)&&Z==null;return ae||Pe})(O))return;const{toastId:N,updateId:D,data:ne,staleId:se,delay:ue}=O,I=()=>{x(N)},j=D==null;j&&w++;const F={...a,style:a.toastStyle,key:v++,...Object.fromEntries(Object.entries(O).filter(z=>{let[Y,G]=z;return G!=null})),toastId:N,updateId:D,data:ne,closeToast:I,isIn:!1,className:Vo(O.className||a.toastClassName),bodyClassName:Vo(O.bodyClassName||a.bodyClassName),progressClassName:Vo(O.progressClassName||a.progressClassName),autoClose:!O.isLoading&&(_=O.autoClose,L=a.autoClose,_===!1||Kr(_)&&_>0?_:L),deleteToast(){const z=d.get(N),{onClose:Y,children:G}=z.props;Be(Y)&&Y(E.isValidElement(G)&&G.props),h(rc(z,"removed")),d.delete(N),w--,w<0&&(w=0),k.length>0?y(k.shift()):S()}};var _,L;F.closeButton=a.closeButton,O.closeButton===!1||Is(O.closeButton)?F.closeButton=O.closeButton:O.closeButton===!0&&(F.closeButton=!Is(a.closeButton)||a.closeButton);let A=C;E.isValidElement(C)&&!un(C.type)?A=E.cloneElement(C,{closeToast:I,toastProps:F,data:ne}):Be(C)&&(A=C({closeToast:I,toastProps:F,data:ne}));const R={content:A,props:F,staleId:se};a.limit&&a.limit>0&&w>a.limit&&j?k.push(R):Kr(ue)?setTimeout(()=>{y(R)},ue):y(R)},setProps(C){a=C},setToggle:(C,O)=>{d.get(C).toggle=O},isToastActive:C=>P.some(O=>O===C),getSnapshot:()=>c}}(i,l,iy);$e.set(i,u);const f=u.observe(s);return Gr.forEach(m=>lp(m.content,m.options)),Gr=[],()=>{f(),$e.delete(i)}},setProps(s){var u;(u=$e.get(i))==null||u.setProps(s)},getSnapshot(){var s;return(s=$e.get(i))==null?void 0:s.getSnapshot()}}}(e)).current;r(e);const o=E.useSyncExternalStore(t,n,n);return{getToastToRender:function(l){if(!o)return[];const i=new Map;return e.newestOnTop&&o.reverse(),o.forEach(s=>{const{position:u}=s.props;i.has(u)||i.set(u,[]),i.get(u).push(s)}),Array.from(i,s=>l(s[0],s[1]))},isToastActive:op,count:o==null?void 0:o.length}}function uy(e){const[t,n]=E.useState(!1),[r,o]=E.useState(!1),l=E.useRef(null),i=E.useRef({start:0,delta:0,removalDistance:0,canCloseOnClick:!0,canDrag:!1,didMove:!1}).current,{autoClose:s,pauseOnHover:u,closeToast:f,onClick:m,closeOnClick:g}=e;var h,v;function w(){n(!0)}function k(){n(!1)}function P(d){const p=l.current;i.canDrag&&p&&(i.didMove=!0,t&&k(),i.delta=e.draggableDirection==="x"?d.clientX-i.start:d.clientY-i.start,i.start!==d.clientX&&(i.canCloseOnClick=!1),p.style.transform=`translate3d(${e.draggableDirection==="x"?`${i.delta}px, var(--y)`:`0, calc(${i.delta}px + var(--y))`},0)`,p.style.opacity=""+(1-Math.abs(i.delta/i.removalDistance)))}function c(){document.removeEventListener("pointermove",P),document.removeEventListener("pointerup",c);const d=l.current;if(i.canDrag&&i.didMove&&d){if(i.canDrag=!1,Math.abs(i.delta)>i.removalDistance)return o(!0),e.closeToast(),void e.collapseAll();d.style.transition="transform 0.2s, opacity 0.2s",d.style.removeProperty("transform"),d.style.removeProperty("opacity")}}(v=$e.get((h={id:e.toastId,containerId:e.containerId,fn:n}).containerId||1))==null||v.setToggle(h.id,h.fn),E.useEffect(()=>{if(e.pauseOnFocusLoss)return document.hasFocus()||k(),window.addEventListener("focus",w),window.addEventListener("blur",k),()=>{window.removeEventListener("focus",w),window.removeEventListener("blur",k)}},[e.pauseOnFocusLoss]);const a={onPointerDown:function(d){if(e.draggable===!0||e.draggable===d.pointerType){i.didMove=!1,document.addEventListener("pointermove",P),document.addEventListener("pointerup",c);const p=l.current;i.canCloseOnClick=!0,i.canDrag=!0,p.style.transition="none",e.draggableDirection==="x"?(i.start=d.clientX,i.removalDistance=p.offsetWidth*(e.draggablePercent/100)):(i.start=d.clientY,i.removalDistance=p.offsetHeight*(e.draggablePercent===80?1.5*e.draggablePercent:e.draggablePercent)/100)}},onPointerUp:function(d){const{top:p,bottom:S,left:x,right:y}=l.current.getBoundingClientRect();d.nativeEvent.type!=="touchend"&&e.pauseOnHover&&d.clientX>=x&&d.clientX<=y&&d.clientY>=p&&d.clientY<=S?k():w()}};return s&&u&&(a.onMouseEnter=k,e.stacked||(a.onMouseLeave=w)),g&&(a.onClick=d=>{m&&m(d),i.canCloseOnClick&&f()}),{playToast:w,pauseToast:k,isRunning:t,preventExitTransition:r,toastRef:l,eventHandlers:a}}function ay(e){let{delay:t,isRunning:n,closeToast:r,type:o="default",hide:l,className:i,style:s,controlledProgress:u,progress:f,rtl:m,isIn:g,theme:h}=e;const v=l||u&&f===0,w={...s,animationDuration:`${t}ms`,animationPlayState:n?"running":"paused"};u&&(w.transform=`scaleX(${f})`);const k=jt("Toastify__progress-bar",u?"Toastify__progress-bar--controlled":"Toastify__progress-bar--animated",`Toastify__progress-bar-theme--${h}`,`Toastify__progress-bar--${o}`,{"Toastify__progress-bar--rtl":m}),P=Be(i)?i({rtl:m,type:o,defaultClassName:k}):jt(k,i),c={[u&&f>=1?"onTransitionEnd":"onAnimationEnd"]:u&&f<1?null:()=>{g&&r()}};return B.createElement("div",{className:"Toastify__progress-bar--wrp","data-hidden":v},B.createElement("div",{className:`Toastify__progress-bar--bg Toastify__progress-bar-theme--${h} Toastify__progress-bar--${o}`}),B.createElement("div",{role:"progressbar","aria-hidden":v?"true":"false","aria-label":"notification timer",className:P,style:w,...c}))}let cy=1;const ip=()=>""+cy++;function fy(e){return e&&(un(e.toastId)||Kr(e.toastId))?e.toastId:ip()}function Tr(e,t){return lp(e,t),t.toastId}function kl(e,t){return{...t,type:t&&t.type||e,toastId:fy(t)}}function Co(e){return(t,n)=>Tr(t,kl(e,n))}function U(e,t){return Tr(e,kl("default",t))}U.loading=(e,t)=>Tr(e,kl("default",{isLoading:!0,autoClose:!1,closeOnClick:!1,closeButton:!1,draggable:!1,...t})),U.promise=function(e,t,n){let r,{pending:o,error:l,success:i}=t;o&&(r=un(o)?U.loading(o,n):U.loading(o.render,{...n,...o}));const s={isLoading:null,autoClose:null,closeOnClick:null,closeButton:null,draggable:null},u=(m,g,h)=>{if(g==null)return void U.dismiss(r);const v={type:m,...s,...n,data:h},w=un(g)?{render:g}:g;return r?U.update(r,{...v,...w}):U(w.render,{...v,...w}),h},f=Be(e)?e():e;return f.then(m=>u("success",i,m)).catch(m=>u("error",l,m)),f},U.success=Co("success"),U.info=Co("info"),U.error=Co("error"),U.warning=Co("warning"),U.warn=U.warning,U.dark=(e,t)=>Tr(e,kl("default",{theme:"dark",...t})),U.dismiss=function(e){(function(t){var n;if(rp()){if(t==null||un(n=t)||Kr(n))$e.forEach(r=>{r.removeToast(t)});else if(t&&("containerId"in t||"id"in t)){const r=$e.get(t.containerId);r?r.removeToast(t.id):$e.forEach(o=>{o.removeToast(t.id)})}}else Gr=Gr.filter(r=>t!=null&&r.options.toastId!==t)})(e)},U.clearWaitingQueue=function(e){e===void 0&&(e={}),$e.forEach(t=>{!t.props.limit||e.containerId&&t.id!==e.containerId||t.clearQueue()})},U.isActive=op,U.update=function(e,t){t===void 0&&(t={});const n=((r,o)=>{var l;let{containerId:i}=o;return(l=$e.get(i||1))==null?void 0:l.toasts.get(r)})(e,t);if(n){const{props:r,content:o}=n,l={delay:100,...r,...t,toastId:t.toastId||e,updateId:ip()};l.toastId!==e&&(l.staleId=e);const i=l.render||o;delete l.render,Tr(i,l)}},U.done=e=>{U.update(e,{progress:1})},U.onChange=function(e){return Os.add(e),()=>{Os.delete(e)}},U.play=e=>oc(!0,e),U.pause=e=>oc(!1,e);const dy=typeof window<"u"?E.useLayoutEffect:E.useEffect,Eo=e=>{let{theme:t,type:n,isLoading:r,...o}=e;return B.createElement("svg",{viewBox:"0 0 24 24",width:"100%",height:"100%",fill:t==="colored"?"currentColor":`var(--toastify-icon-color-${n})`,...o})},Pi={info:function(e){return B.createElement(Eo,{...e},B.createElement("path",{d:"M12 0a12 12 0 1012 12A12.013 12.013 0 0012 0zm.25 5a1.5 1.5 0 11-1.5 1.5 1.5 1.5 0 011.5-1.5zm2.25 13.5h-4a1 1 0 010-2h.75a.25.25 0 00.25-.25v-4.5a.25.25 0 00-.25-.25h-.75a1 1 0 010-2h1a2 2 0 012 2v4.75a.25.25 0 00.25.25h.75a1 1 0 110 2z"}))},warning:function(e){return B.createElement(Eo,{...e},B.createElement("path",{d:"M23.32 17.191L15.438 2.184C14.728.833 13.416 0 11.996 0c-1.42 0-2.733.833-3.443 2.184L.533 17.448a4.744 4.744 0 000 4.368C1.243 23.167 2.555 24 3.975 24h16.05C22.22 24 24 22.044 24 19.632c0-.904-.251-1.746-.68-2.44zm-9.622 1.46c0 1.033-.724 1.823-1.698 1.823s-1.698-.79-1.698-1.822v-.043c0-1.028.724-1.822 1.698-1.822s1.698.79 1.698 1.822v.043zm.039-12.285l-.84 8.06c-.057.581-.408.943-.897.943-.49 0-.84-.367-.896-.942l-.84-8.065c-.057-.624.25-1.095.779-1.095h1.91c.528.005.84.476.784 1.1z"}))},success:function(e){return B.createElement(Eo,{...e},B.createElement("path",{d:"M12 0a12 12 0 1012 12A12.014 12.014 0 0012 0zm6.927 8.2l-6.845 9.289a1.011 1.011 0 01-1.43.188l-4.888-3.908a1 1 0 111.25-1.562l4.076 3.261 6.227-8.451a1 1 0 111.61 1.183z"}))},error:function(e){return B.createElement(Eo,{...e},B.createElement("path",{d:"M11.983 0a12.206 12.206 0 00-8.51 3.653A11.8 11.8 0 000 12.207 11.779 11.779 0 0011.8 24h.214A12.111 12.111 0 0024 11.791 11.766 11.766 0 0011.983 0zM10.5 16.542a1.476 1.476 0 011.449-1.53h.027a1.527 1.527 0 011.523 1.47 1.475 1.475 0 01-1.449 1.53h-.027a1.529 1.529 0 01-1.523-1.47zM11 12.5v-6a1 1 0 012 0v6a1 1 0 11-2 0z"}))},spinner:function(){return B.createElement("div",{className:"Toastify__spinner"})}},py=e=>{const{isRunning:t,preventExitTransition:n,toastRef:r,eventHandlers:o,playToast:l}=uy(e),{closeButton:i,children:s,autoClose:u,onClick:f,type:m,hideProgressBar:g,closeToast:h,transition:v,position:w,className:k,style:P,bodyClassName:c,bodyStyle:a,progressClassName:d,progressStyle:p,updateId:S,role:x,progress:y,rtl:C,toastId:O,deleteToast:N,isIn:D,isLoading:ne,closeOnClick:se,theme:ue}=e,I=jt("Toastify__toast",`Toastify__toast-theme--${ue}`,`Toastify__toast--${m}`,{"Toastify__toast--rtl":C},{"Toastify__toast--close-on-click":se}),j=Be(k)?k({rtl:C,position:w,type:m,defaultClassName:I}):jt(I,k),F=function(R){let{theme:z,type:Y,isLoading:G,icon:Z}=R,ae=null;const Pe={theme:z,type:Y};return Z===!1||(Be(Z)?ae=Z({...Pe,isLoading:G}):E.isValidElement(Z)?ae=E.cloneElement(Z,Pe):G?ae=Pi.spinner():(Xt=>Xt in Pi)(Y)&&(ae=Pi[Y](Pe))),ae}(e),_=!!y||!u,L={closeToast:h,type:m,theme:ue};let A=null;return i===!1||(A=Be(i)?i(L):E.isValidElement(i)?E.cloneElement(i,L):function(R){let{closeToast:z,theme:Y,ariaLabel:G="close"}=R;return B.createElement("button",{className:`Toastify__close-button Toastify__close-button--${Y}`,type:"button",onClick:Z=>{Z.stopPropagation(),z(Z)},"aria-label":G},B.createElement("svg",{"aria-hidden":"true",viewBox:"0 0 14 16"},B.createElement("path",{fillRule:"evenodd",d:"M7.71 8.23l3.75 3.75-1.48 1.48-3.75-3.75-3.75 3.75L1 11.98l3.75-3.75L1 4.48 2.48 3l3.75 3.75L9.98 3l1.48 1.48-3.75 3.75z"})))}(L)),B.createElement(v,{isIn:D,done:N,position:w,preventExitTransition:n,nodeRef:r,playToast:l},B.createElement("div",{id:O,onClick:f,"data-in":D,className:j,...o,style:P,ref:r},B.createElement("div",{...D&&{role:x},className:Be(c)?c({type:m}):jt("Toastify__toast-body",c),style:a},F!=null&&B.createElement("div",{className:jt("Toastify__toast-icon",{"Toastify--animate-icon Toastify__zoom-enter":!ne})},F),B.createElement("div",null,s)),A,B.createElement(ay,{...S&&!_?{key:`pb-${S}`}:{},rtl:C,theme:ue,delay:u,isRunning:t,isIn:D,closeToast:h,hide:g,type:m,style:p,className:d,controlledProgress:_,progress:y||0})))},Ql=function(e,t){return t===void 0&&(t=!1),{enter:`Toastify--animate Toastify__${e}-enter`,exit:`Toastify--animate Toastify__${e}-exit`,appendPosition:t}},hy=Yl(Ql("bounce",!0));Yl(Ql("slide",!0));Yl(Ql("zoom"));Yl(Ql("flip"));const my={position:"top-right",transition:hy,autoClose:5e3,closeButton:!0,pauseOnHover:!0,pauseOnFocusLoss:!0,draggable:"touch",draggablePercent:80,draggableDirection:"x",role:"alert",theme:"light"};function gy(e){let t={...my,...e};const n=e.stacked,[r,o]=E.useState(!0),l=E.useRef(null),{getToastToRender:i,isToastActive:s,count:u}=sy(t),{className:f,style:m,rtl:g,containerId:h}=t;function v(k){const P=jt("Toastify__toast-container",`Toastify__toast-container--${k}`,{"Toastify__toast-container--rtl":g});return Be(f)?f({position:k,rtl:g,defaultClassName:P}):jt(P,Vo(f))}function w(){n&&(o(!0),U.play())}return dy(()=>{if(n){var k;const P=l.current.querySelectorAll('[data-in="true"]'),c=12,a=(k=t.position)==null?void 0:k.includes("top");let d=0,p=0;Array.from(P).reverse().forEach((S,x)=>{const y=S;y.classList.add("Toastify__toast--stacked"),x>0&&(y.dataset.collapsed=`${r}`),y.dataset.pos||(y.dataset.pos=a?"top":"bot");const C=d*(r?.2:1)+(r?0:c*x);y.style.setProperty("--y",`${a?C:-1*C}px`),y.style.setProperty("--g",`${c}`),y.style.setProperty("--s",""+(1-(r?p:0))),d+=y.offsetHeight,p+=.025})}},[r,u,n]),B.createElement("div",{ref:l,className:"Toastify",id:h,onMouseEnter:()=>{n&&(o(!1),U.pause())},onMouseLeave:w},i((k,P)=>{const c=P.length?{...m}:{...m,pointerEvents:"none"};return B.createElement("div",{className:v(k),style:c,key:`container-${k}`},P.map(a=>{let{content:d,props:p}=a;return B.createElement(py,{...p,stacked:n,collapseAll:w,isIn:s(p.toastId,p.containerId),style:p.style,key:`toast-${p.key}`},d)}))}))}const lc=W.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 8px 10px;
  background-color: #333;
  font-weight: bo                 <ButtonContainer>
                    <ActionButton 
                        onClick={() => {
                            console.log('New File button clicked - opening modal');
                            showCreateFileModal();
                        }}
                    >
                        📄 New File
                    </ActionButton>
                    <ActionButton 
                        onClick={() => {
                            console.log('New Folder button clicked - opening modal');
                            showCreateFolderModal();
                        }}
                    >
                        📁 New Folder
                    </ActionButton>
                </ButtonContainer>ter;
  flex-shrink: 0;
  user-select: none;
`,yy=W.button`
  background: none;
  border: none;
  color: #ccc;
  font-size: 18px;
  cursor: pointer;
  padding: 0 5px;
  &:hover { color: white; }
`,vy=W.div`
  flex-grow: 1;
  padding: 0 10px;
  display: flex;
  flex-direction: column;
  overflow-y: auto;
`,sp=W.ul`
  list-style: none;
  padding-left: ${e=>e.depth>0?"20px":"0"};
  margin: 0;
`,up=W.li`
  padding: 5px;
  cursor: pointer;
  display: flex;
  align-items: center;
  border-radius: 3px;
  background-color: ${e=>e.$isActive?"#37373d":"transparent"};
  &:hover { background-color: #2a2d2e; }
`,ap=W.span` margin-right: 8px; `,wy=W.div`
    display: flex;
    gap: 5px;
    margin-top: auto;
    margin-bottom: 10px;
    padding-top: 10px;
    border-top: 1px solid #333;
    flex-shrink: 0;
`,ic=W.button`
  flex-grow: 1;
  padding: 8px;
  background-color: #0e639c;
  border: none;
  color: white;
  cursor: pointer;
  &:hover { background-color: #1177bb; }
`,ky=W.div`
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.7);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
`,Sy=W.div`
  background-color: #2d2d30;
  border: 1px solid #555;
  border-radius: 5px;
  padding: 20px;
  min-width: 400px;
  color: #d4d4d4;
`,xy=W.input`
  width: 100%;
  padding: 8px;
  margin: 10px 0;
  background-color: #3c3c3c;
  border: 1px solid #555;
  color: #d4d4d4;
  border-radius: 3px;
`,Cy=W.div`
  display: flex;
  gap: 10px;
  justify-content: flex-end;
  margin-top: 15px;
`,sc=W.button`
  padding: 8px 16px;
  border: none;
  border-radius: 3px;
  cursor: pointer;
  background-color: ${e=>e.primary?"#0e639c":"#555"};
  color: white;
  &:hover {
    background-color: ${e=>e.primary?"#1177bb":"#666"};
  }
`,Ey=({dir:e,depth:t,activeFile:n,onFileSelect:r,onDelete:o,onDeleteFolder:l,expandedFolders:i,toggleFolder:s})=>{const u=i.has(e.path);return $.jsxs("div",{children:[$.jsxs(up,{children:[$.jsx(ap,{style:{cursor:"pointer"},onClick:f=>{f.stopPropagation(),s(e.path)},title:u?"Collapse":"Expand",children:u?"▼":"▶"}),$.jsx("span",{style:{flex:1,cursor:"pointer"},onClick:f=>{f.stopPropagation(),s(e.path)},children:e.name}),$.jsx("button",{style:{marginLeft:"auto",background:"none",border:"none",color:"#f44336",cursor:"pointer",fontSize:"16px"},title:"Delete folder",onClick:f=>{f.stopPropagation(),l(e.path,e.name)},children:"🗑️"})]}),u&&$.jsx(sp,{depth:t+1,children:e.children.map(f=>$.jsx(cp,{node:f,depth:t+1,activeFile:n,onFileSelect:r,onDelete:o,onDeleteFolder:l,expandedFolders:i,toggleFolder:s},f.path))})]})},_y=({file:e,activeFile:t,onFileSelect:n,onDelete:r})=>$.jsxs(up,{$isActive:e.path===t,onClick:()=>n(e.path),children:[$.jsx(ap,{children:"📄"})," ",e.name,$.jsx("button",{style:{marginLeft:"auto",background:"none",border:"none",color:"#f44336",cursor:"pointer",fontSize:"16px"},title:"Delete file",onClick:o=>{o.stopPropagation(),r(e.path,e.name)},children:"🗑️"})]}),cp=({node:e,depth:t,...n})=>e.type==="folder"?$.jsx(Ey,{dir:e,depth:t,...n}):$.jsx(_y,{file:e,...n});function Py({project:e,activeFile:t,onFileSelect:n,onProjectRefresh:r,projectName:o,layout:l,setLayout:i}){const[s,u]=E.useState({isOpen:!1,type:"",title:"",placeholder:"",value:""}),[f,m]=E.useState(()=>new Set),g=()=>{u({isOpen:!0,type:"file",title:"📄 Create New File",placeholder:"e.g., utils/helpers.yc",value:""})},h=()=>{u({isOpen:!0,type:"folder",title:"📁 Create New Folder",placeholder:"e.g., my_new_folder",value:""})},v=()=>{u({isOpen:!1,type:"",title:"",placeholder:"",value:""})},w=async()=>{s.value.trim()&&(s.type==="file"?await k(s.value.trim()):s.type==="folder"&&await P(s.value.trim()),v())},k=async p=>{var S,x;console.log("=== performCreateFile START ==="),console.log("projectName:",o),console.log("path:",p);try{if(!o){console.log("ERROR: No project name"),U.error("❌ Project name not available");return}console.log("Creating file:",{projectName:o,path:p}),console.log("Calling createFile API..."),await xp(o,p),console.log("File created successfully:",p),U.success(`✅ File created: ${p}`),console.log("Calling onProjectRefresh..."),r?(await r(),console.log("Project refreshed successfully")):console.warn("onProjectRefresh not available")}catch(y){console.error("=== CREATE FILE ERROR ==="),console.error("Error:",y),console.error("Error details:",{message:y.message,response:(S=y.response)==null?void 0:S.data,status:(x=y.response)==null?void 0:x.status,stack:y.stack}),U.error(`❌ Failed to create file: ${y.message||"Unknown error"}`)}console.log("=== performCreateFile END ===")},P=async p=>{var S,x;console.log("=== performCreateFolder START ==="),console.log("projectName:",o),console.log("path:",p);try{if(!o){console.log("ERROR: No project name"),U.error("❌ Project name not available");return}console.log("Creating folder:",{projectName:o,path:p}),console.log("Calling createFolder API..."),await Cp(o,p),console.log("Folder created successfully:",p),U.success(`✅ Folder created: ${p}`),console.log("Calling onProjectRefresh..."),r?(await r(),console.log("Project refreshed successfully")):console.warn("onProjectRefresh not available")}catch(y){console.error("=== CREATE FOLDER ERROR ==="),console.error("Error:",y),console.error("Error details:",{message:y.message,response:(S=y.response)==null?void 0:S.data,status:(x=y.response)==null?void 0:x.status,stack:y.stack}),U.error(`❌ Failed to create folder: ${y.message||"Unknown error"}`)}console.log("=== performCreateFolder END ===")},c=async(p,S)=>{if(console.log("Delete file called:",{filePath:p,fileName:S,projectName:o}),!o){U.error("❌ Project name not available");return}if(window.confirm(`🗑️ Delete File Confirmation

Are you sure you want to delete "${S}"?

This action cannot be undone!`)){console.log("Deleting file:",p);try{await Sp(o,p),console.log("File deleted successfully:",p),U.success(`✅ File deleted: ${S}`),r?r():console.warn("onProjectRefresh not available")}catch(y){console.error("Delete file error:",y),U.error(`❌ Failed to delete file: ${y.message||"Unknown error"}`)}}},a=async(p,S)=>{if(console.log("Delete folder called:",{folderPath:p,folderName:S,projectName:o}),!o){U.error("❌ Project name not available");return}if(window.confirm(`🗑️ Delete Folder Confirmation

Are you sure you want to delete the folder "${S}" and ALL its contents?

This action cannot be undone!`)){console.log("Deleting folder:",p);try{await kp(o,p),console.log("Folder deleted successfully:",p),U.success(`✅ Folder deleted: ${S}`),r?r():console.warn("onProjectRefresh not available")}catch(y){console.error("Delete folder error:",y),U.error(`❌ Failed to delete folder: ${y.message||"Unknown error"}`)}}};B.useEffect(()=>{e&&e.path&&!f.has(e.path)&&m(p=>new Set(p).add(e.path))},[e]);const d=p=>{m(S=>{const x=new Set(S);return x.has(p)?x.delete(p):x.add(p),x})};return l.explorer?$.jsxs($.Fragment,{children:[$.jsxs(lc,{children:[$.jsx("span",{children:"Filing Cabinet"}),$.jsxs("div",{children:[$.jsx("button",{onClick:()=>{console.log("Refresh button clicked"),r()},style:{background:"none",border:"none",color:"white",cursor:"pointer",fontSize:"16px"},title:"Refresh project structure",children:"🔄"}),$.jsx(yy,{onClick:()=>i(p=>({...p,explorer:!1})),children:"×"})]})]}),$.jsxs(vy,{children:[e?$.jsx(sp,{depth:0,children:e.children.map(p=>$.jsx(cp,{node:p,depth:0,activeFile:t,onFileSelect:n,onDelete:c,onDeleteFolder:a,expandedFolders:f,toggleFolder:d},p.path))}):$.jsx("p",{children:"Connecting to backend..."}),$.jsxs(wy,{children:[$.jsx(ic,{onClick:()=>{console.log("New File button clicked - opening modal"),g()},children:"📄 New File"}),$.jsx(ic,{onClick:()=>{console.log("New Folder button clicked - opening modal"),h()},children:"📁 New Folder"})]})]}),s.isOpen&&$.jsx(ky,{children:$.jsxs(Sy,{children:[$.jsx("h3",{children:s.title}),$.jsxs("p",{children:["Enter the path for the new ",s.type,":"]}),$.jsx(xy,{type:"text",placeholder:s.placeholder,value:s.value,onChange:p=>u(S=>({...S,value:p.target.value})),onKeyDown:p=>{p.key==="Enter"?w():p.key==="Escape"&&v()},autoFocus:!0}),$.jsxs(Cy,{children:[$.jsx(sc,{onClick:v,children:"Cancel"}),$.jsx(sc,{primary:!0,onClick:w,children:"Create"})]})]})})]}):$.jsx(lc,{onClick:()=>i(p=>({...p,explorer:!0})),children:"Filing Cabinet"})}function Ty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function uc(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable})),n.push.apply(n,r)}return n}function ac(e){for(var t=1;t<arguments.length;t++){var n=arguments[t]!=null?arguments[t]:{};t%2?uc(Object(n),!0).forEach(function(r){Ty(e,r,n[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):uc(Object(n)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))})}return e}function $y(e,t){if(e==null)return{};var n={},r=Object.keys(e),o,l;for(l=0;l<r.length;l++)o=r[l],!(t.indexOf(o)>=0)&&(n[o]=e[o]);return n}function Ny(e,t){if(e==null)return{};var n=$y(e,t),r,o;if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)r=l[o],!(t.indexOf(r)>=0)&&Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}function Iy(e,t){return Oy(e)||Ly(e,t)||Ry(e,t)||jy()}function Oy(e){if(Array.isArray(e))return e}function Ly(e,t){if(!(typeof Symbol>"u"||!(Symbol.iterator in Object(e)))){var n=[],r=!0,o=!1,l=void 0;try{for(var i=e[Symbol.iterator](),s;!(r=(s=i.next()).done)&&(n.push(s.value),!(t&&n.length===t));r=!0);}catch(u){o=!0,l=u}finally{try{!r&&i.return!=null&&i.return()}finally{if(o)throw l}}return n}}function Ry(e,t){if(e){if(typeof e=="string")return cc(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);if(n==="Object"&&e.constructor&&(n=e.constructor.name),n==="Map"||n==="Set")return Array.from(e);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return cc(e,t)}}function cc(e,t){(t==null||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function jy(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function zy(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function fc(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable})),n.push.apply(n,r)}return n}function dc(e){for(var t=1;t<arguments.length;t++){var n=arguments[t]!=null?arguments[t]:{};t%2?fc(Object(n),!0).forEach(function(r){zy(e,r,n[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):fc(Object(n)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))})}return e}function My(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(r){return t.reduceRight(function(o,l){return l(o)},r)}}function gr(e){return function t(){for(var n=this,r=arguments.length,o=new Array(r),l=0;l<r;l++)o[l]=arguments[l];return o.length>=e.length?e.apply(this,o):function(){for(var i=arguments.length,s=new Array(i),u=0;u<i;u++)s[u]=arguments[u];return t.apply(n,[].concat(o,s))}}}function Sl(e){return{}.toString.call(e).includes("Object")}function Ay(e){return!Object.keys(e).length}function Xr(e){return typeof e=="function"}function Fy(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function Dy(e,t){return Sl(t)||Wt("changeType"),Object.keys(t).some(function(n){return!Fy(e,n)})&&Wt("changeField"),t}function Uy(e){Xr(e)||Wt("selectorType")}function By(e){Xr(e)||Sl(e)||Wt("handlerType"),Sl(e)&&Object.values(e).some(function(t){return!Xr(t)})&&Wt("handlersType")}function Hy(e){e||Wt("initialIsRequired"),Sl(e)||Wt("initialType"),Ay(e)&&Wt("initialContent")}function Wy(e,t){throw new Error(e[t]||e.default)}var Vy={initialIsRequired:"initial state is required",initialType:"initial state should be an object",initialContent:"initial state shouldn't be an empty object",handlerType:"handler should be an object or a function",handlersType:"all handlers should be a functions",selectorType:"selector should be a function",changeType:"provided value of changes should be an object",changeField:'it seams you want to change a field in the state which is not specified in the "initial" state',default:"an unknown error accured in `state-local` package"},Wt=gr(Wy)(Vy),_o={changes:Dy,selector:Uy,handler:By,initial:Hy};function Yy(e){var t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};_o.initial(e),_o.handler(t);var n={current:e},r=gr(Gy)(n,t),o=gr(Ky)(n),l=gr(_o.changes)(e),i=gr(Qy)(n);function s(){var f=arguments.length>0&&arguments[0]!==void 0?arguments[0]:function(m){return m};return _o.selector(f),f(n.current)}function u(f){My(r,o,l,i)(f)}return[s,u]}function Qy(e,t){return Xr(t)?t(e.current):t}function Ky(e,t){return e.current=dc(dc({},e.current),t),t}function Gy(e,t,n){return Xr(t)?t(e.current):Object.keys(n).forEach(function(r){var o;return(o=t[r])===null||o===void 0?void 0:o.call(t,e.current[r])}),n}var Xy={create:Yy},Zy={paths:{vs:"https://cdn.jsdelivr.net/npm/monaco-editor@0.52.2/min/vs"}};function qy(e){return function t(){for(var n=this,r=arguments.length,o=new Array(r),l=0;l<r;l++)o[l]=arguments[l];return o.length>=e.length?e.apply(this,o):function(){for(var i=arguments.length,s=new Array(i),u=0;u<i;u++)s[u]=arguments[u];return t.apply(n,[].concat(o,s))}}}function Jy(e){return{}.toString.call(e).includes("Object")}function by(e){return e||pc("configIsRequired"),Jy(e)||pc("configType"),e.urls?(ev(),{paths:{vs:e.urls.monacoBase}}):e}function ev(){console.warn(fp.deprecation)}function tv(e,t){throw new Error(e[t]||e.default)}var fp={configIsRequired:"the configuration object is required",configType:"the configuration object should be an object",default:"an unknown error accured in `@monaco-editor/loader` package",deprecation:`Deprecation warning!
    You are using deprecated way of configuration.

    Instead of using
      monaco.config({ urls: { monacoBase: '...' } })
    use
      monaco.config({ paths: { vs: '...' } })

    For more please check the link https://github.com/suren-atoyan/monaco-loader#config
  `},pc=qy(tv)(fp),nv={config:by},rv=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return function(o){return n.reduceRight(function(l,i){return i(l)},o)}};function dp(e,t){return Object.keys(t).forEach(function(n){t[n]instanceof Object&&e[n]&&Object.assign(t[n],dp(e[n],t[n]))}),ac(ac({},e),t)}var ov={type:"cancelation",msg:"operation is manually canceled"};function Ti(e){var t=!1,n=new Promise(function(r,o){e.then(function(l){return t?o(ov):r(l)}),e.catch(o)});return n.cancel=function(){return t=!0},n}var lv=Xy.create({config:Zy,isInitialized:!1,resolve:null,reject:null,monaco:null}),pp=Iy(lv,2),to=pp[0],Kl=pp[1];function iv(e){var t=nv.config(e),n=t.monaco,r=Ny(t,["monaco"]);Kl(function(o){return{config:dp(o.config,r),monaco:n}})}function sv(){var e=to(function(t){var n=t.monaco,r=t.isInitialized,o=t.resolve;return{monaco:n,isInitialized:r,resolve:o}});if(!e.isInitialized){if(Kl({isInitialized:!0}),e.monaco)return e.resolve(e.monaco),Ti($i);if(window.monaco&&window.monaco.editor)return hp(window.monaco),e.resolve(window.monaco),Ti($i);rv(uv,cv)(fv)}return Ti($i)}function uv(e){return document.body.appendChild(e)}function av(e){var t=document.createElement("script");return e&&(t.src=e),t}function cv(e){var t=to(function(r){var o=r.config,l=r.reject;return{config:o,reject:l}}),n=av("".concat(t.config.paths.vs,"/loader.js"));return n.onload=function(){return e()},n.onerror=t.reject,n}function fv(){var e=to(function(n){var r=n.config,o=n.resolve,l=n.reject;return{config:r,resolve:o,reject:l}}),t=window.require;t.config(e.config),t(["vs/editor/editor.main"],function(n){hp(n),e.resolve(n)},function(n){e.reject(n)})}function hp(e){to().monaco||Kl({monaco:e})}function dv(){return to(function(e){var t=e.monaco;return t})}var $i=new Promise(function(e,t){return Kl({resolve:e,reject:t})}),xl={config:iv,init:sv,__getMonacoInstance:dv},pv={wrapper:{display:"flex",position:"relative",textAlign:"initial"},fullWidth:{width:"100%"},hide:{display:"none"}},Ni=pv,hv={container:{display:"flex",height:"100%",width:"100%",justifyContent:"center",alignItems:"center"}},mv=hv;function gv({children:e}){return B.createElement("div",{style:mv.container},e)}var yv=gv,vv=yv;function wv({width:e,height:t,isEditorReady:n,loading:r,_ref:o,className:l,wrapperProps:i}){return B.createElement("section",{style:{...Ni.wrapper,width:e,height:t},...i},!n&&B.createElement(vv,null,r),B.createElement("div",{ref:o,style:{...Ni.fullWidth,...!n&&Ni.hide},className:l}))}var kv=wv,mp=E.memo(kv);function Sv(e){E.useEffect(e,[])}var Ou=Sv;function xv(e,t,n=!0){let r=E.useRef(!0);E.useEffect(r.current||!n?()=>{r.current=!1}:e,t)}var De=xv;function $r(){}function zn(e,t,n,r){return Cv(e,r)||Ev(e,t,n,r)}function Cv(e,t){return e.editor.getModel(gp(e,t))}function Ev(e,t,n,r){return e.editor.createModel(t,n,r?gp(e,r):void 0)}function gp(e,t){return e.Uri.parse(t)}function _v({original:e,modified:t,language:n,originalLanguage:r,modifiedLanguage:o,originalModelPath:l,modifiedModelPath:i,keepCurrentOriginalModel:s=!1,keepCurrentModifiedModel:u=!1,theme:f="light",loading:m="Loading...",options:g={},height:h="100%",width:v="100%",className:w,wrapperProps:k={},beforeMount:P=$r,onMount:c=$r}){let[a,d]=E.useState(!1),[p,S]=E.useState(!0),x=E.useRef(null),y=E.useRef(null),C=E.useRef(null),O=E.useRef(c),N=E.useRef(P),D=E.useRef(!1);Ou(()=>{let I=xl.init();return I.then(j=>(y.current=j)&&S(!1)).catch(j=>(j==null?void 0:j.type)!=="cancelation"&&console.error("Monaco initialization: error:",j)),()=>x.current?ue():I.cancel()}),De(()=>{if(x.current&&y.current){let I=x.current.getOriginalEditor(),j=zn(y.current,e||"",r||n||"text",l||"");j!==I.getModel()&&I.setModel(j)}},[l],a),De(()=>{if(x.current&&y.current){let I=x.current.getModifiedEditor(),j=zn(y.current,t||"",o||n||"text",i||"");j!==I.getModel()&&I.setModel(j)}},[i],a),De(()=>{let I=x.current.getModifiedEditor();I.getOption(y.current.editor.EditorOption.readOnly)?I.setValue(t||""):t!==I.getValue()&&(I.executeEdits("",[{range:I.getModel().getFullModelRange(),text:t||"",forceMoveMarkers:!0}]),I.pushUndoStop())},[t],a),De(()=>{var I,j;(j=(I=x.current)==null?void 0:I.getModel())==null||j.original.setValue(e||"")},[e],a),De(()=>{let{original:I,modified:j}=x.current.getModel();y.current.editor.setModelLanguage(I,r||n||"text"),y.current.editor.setModelLanguage(j,o||n||"text")},[n,r,o],a),De(()=>{var I;(I=y.current)==null||I.editor.setTheme(f)},[f],a),De(()=>{var I;(I=x.current)==null||I.updateOptions(g)},[g],a);let ne=E.useCallback(()=>{var F;if(!y.current)return;N.current(y.current);let I=zn(y.current,e||"",r||n||"text",l||""),j=zn(y.current,t||"",o||n||"text",i||"");(F=x.current)==null||F.setModel({original:I,modified:j})},[n,t,o,e,r,l,i]),se=E.useCallback(()=>{var I;!D.current&&C.current&&(x.current=y.current.editor.createDiffEditor(C.current,{automaticLayout:!0,...g}),ne(),(I=y.current)==null||I.editor.setTheme(f),d(!0),D.current=!0)},[g,f,ne]);E.useEffect(()=>{a&&O.current(x.current,y.current)},[a]),E.useEffect(()=>{!p&&!a&&se()},[p,a,se]);function ue(){var j,F,_,L;let I=(j=x.current)==null?void 0:j.getModel();s||((F=I==null?void 0:I.original)==null||F.dispose()),u||((_=I==null?void 0:I.modified)==null||_.dispose()),(L=x.current)==null||L.dispose()}return B.createElement(mp,{width:v,height:h,isEditorReady:a,loading:m,_ref:C,className:w,wrapperProps:k})}var Pv=_v;E.memo(Pv);function Tv(){let[e,t]=E.useState(xl.__getMonacoInstance());return Ou(()=>{let n;return e||(n=xl.init(),n.then(r=>{t(r)})),()=>n==null?void 0:n.cancel()}),e}var $v=Tv;function Nv(e){let t=E.useRef();return E.useEffect(()=>{t.current=e},[e]),t.current}var Iv=Nv,Po=new Map;function Ov({defaultValue:e,defaultLanguage:t,defaultPath:n,value:r,language:o,path:l,theme:i="light",line:s,loading:u="Loading...",options:f={},overrideServices:m={},saveViewState:g=!0,keepCurrentModel:h=!1,width:v="100%",height:w="100%",className:k,wrapperProps:P={},beforeMount:c=$r,onMount:a=$r,onChange:d,onValidate:p=$r}){let[S,x]=E.useState(!1),[y,C]=E.useState(!0),O=E.useRef(null),N=E.useRef(null),D=E.useRef(null),ne=E.useRef(a),se=E.useRef(c),ue=E.useRef(),I=E.useRef(r),j=Iv(l),F=E.useRef(!1),_=E.useRef(!1);Ou(()=>{let R=xl.init();return R.then(z=>(O.current=z)&&C(!1)).catch(z=>(z==null?void 0:z.type)!=="cancelation"&&console.error("Monaco initialization: error:",z)),()=>N.current?A():R.cancel()}),De(()=>{var z,Y,G,Z;let R=zn(O.current,e||r||"",t||o||"",l||n||"");R!==((z=N.current)==null?void 0:z.getModel())&&(g&&Po.set(j,(Y=N.current)==null?void 0:Y.saveViewState()),(G=N.current)==null||G.setModel(R),g&&((Z=N.current)==null||Z.restoreViewState(Po.get(l))))},[l],S),De(()=>{var R;(R=N.current)==null||R.updateOptions(f)},[f],S),De(()=>{!N.current||r===void 0||(N.current.getOption(O.current.editor.EditorOption.readOnly)?N.current.setValue(r):r!==N.current.getValue()&&(_.current=!0,N.current.executeEdits("",[{range:N.current.getModel().getFullModelRange(),text:r,forceMoveMarkers:!0}]),N.current.pushUndoStop(),_.current=!1))},[r],S),De(()=>{var z,Y;let R=(z=N.current)==null?void 0:z.getModel();R&&o&&((Y=O.current)==null||Y.editor.setModelLanguage(R,o))},[o],S),De(()=>{var R;s!==void 0&&((R=N.current)==null||R.revealLine(s))},[s],S),De(()=>{var R;(R=O.current)==null||R.editor.setTheme(i)},[i],S);let L=E.useCallback(()=>{var R;if(!(!D.current||!O.current)&&!F.current){se.current(O.current);let z=l||n,Y=zn(O.current,r||e||"",t||o||"",z||"");N.current=(R=O.current)==null?void 0:R.editor.create(D.current,{model:Y,automaticLayout:!0,...f},m),g&&N.current.restoreViewState(Po.get(z)),O.current.editor.setTheme(i),s!==void 0&&N.current.revealLine(s),x(!0),F.current=!0}},[e,t,n,r,o,l,f,m,g,i,s]);E.useEffect(()=>{S&&ne.current(N.current,O.current)},[S]),E.useEffect(()=>{!y&&!S&&L()},[y,S,L]),I.current=r,E.useEffect(()=>{var R,z;S&&d&&((R=ue.current)==null||R.dispose(),ue.current=(z=N.current)==null?void 0:z.onDidChangeModelContent(Y=>{_.current||d(N.current.getValue(),Y)}))},[S,d]),E.useEffect(()=>{if(S){let R=O.current.editor.onDidChangeMarkers(z=>{var G;let Y=(G=N.current.getModel())==null?void 0:G.uri;if(Y&&z.find(Z=>Z.path===Y.path)){let Z=O.current.editor.getModelMarkers({resource:Y});p==null||p(Z)}});return()=>{R==null||R.dispose()}}return()=>{}},[S,p]);function A(){var R,z;(R=ue.current)==null||R.dispose(),h?g&&Po.set(l,N.current.saveViewState()):(z=N.current.getModel())==null||z.dispose(),N.current.dispose()}return B.createElement(mp,{width:v,height:w,isEditorReady:S,loading:u,_ref:D,className:k,wrapperProps:P})}var Lv=Ov,Rv=E.memo(Lv),jv=Rv;const zv=["spatula","duck","polka","accordion","lasagna","weasel","hamster","slaw","aluminum","poodle","yo-yo","Twinkie","sandwich","bologna"],Mv=["stomp","eat","squeeze","parody","ride","dare","yank","gurgle","fol-de-rol","yodel","whack"],hc=["spatula","lasagna","lyric","verse","horoscope","accordion_solo","jeopardy","what_if_god_was_one_of_us","another_one","polka","do_the_polka","hardware_store","twinkie_wiener_sandwich","stupid","its_a_fact","total_baloney","lunchbox","gimme_a","in_the_blender","#eat","give_up","do_it_again","this_box"],Av=e=>{E.useEffect(()=>{e&&(e.languages.register({id:"yankovic"}),e.languages.setMonarchTokensProvider("yankovic",{keywords:hc,tokenizer:{root:[[/[a-zA-Z_][\w]*/,{cases:{"@keywords":{cases:{"spatula|lasagna|lyric|verse|horoscope|accordion_solo":"keyword.type.yankovic","jeopardy|polka|hardware_store|another_one|do_the_polka":"keyword.control.yankovic",twinkie_wiener_sandwich:"keyword.return.yankovic",stupid:"keyword.const.yankovic","@default":"keyword"}},"@default":"identifier"}}],[/#eat\s*<.*?>/,"preprocessor"],[/"[^"]*"/,"string"],[/\d+/,"number"],[/[{}();,]/,"delimiter"],[/\/\/.*/,"comment"]]}}),e.languages.registerCompletionItemProvider("yankovic",{provideCompletionItems:(t,n)=>{const r=t.getWordUntilPosition(n),o={startLineNumber:n.lineNumber,endLineNumber:n.lineNumber,startColumn:r.startColumn,endColumn:r.endColumn},l=hc.map(u=>({label:u,kind:e.languages.CompletionItemKind.Keyword,insertText:u,range:o})),i=zv.map(u=>({label:`var: ${u}`,kind:e.languages.CompletionItemKind.Variable,insertText:u,range:o,detail:"Thematic Noun"})),s=Mv.map(u=>({label:`func: ${u}()`,kind:e.languages.CompletionItemKind.Function,insertText:`${u}()`,range:o,detail:"Thematic Verb"}));return{suggestions:[...l,...i,...s]}}}))},[e])},mc={MISSING_SEMICOLON:"You're about as useful as a screen door on a battleship! You missed a semicolon.",BAD_VARIABLE_NAME:e=>`A variable named '${e}'? That's not just wrong, it's tacky! Try something more descriptive.`};let kn={};const Fv=(e,t,n)=>{E.useEffect(()=>{if(!n||!n.editor||!n.editor.MarkerSeverity)return;const r=n.editor.getModels().find(i=>i.uri.path.endsWith(t));if(!r){n.editor.setModelMarkers(n.editor.getModels()[0],"yankovic-linter",[]);return}const o=[];e.split(`
`).forEach((i,s)=>{if(i.trim().length>0&&!i.trim().endsWith(";")&&!i.trim().endsWith("{")&&!i.trim().endsWith("}")&&!i.startsWith("//")&&!i.startsWith("#")&&(o.push({message:"This line looks like it's missing a semicolon. Don't be a word criminal.",severity:n.editor.MarkerSeverity.Error,startLineNumber:s+1,startColumn:i.trimEnd().length+1,endLineNumber:s+1,endColumn:i.trimEnd().length+2}),kn.semi||(U.error(mc.MISSING_SEMICOLON),kn.semi=!0,setTimeout(()=>delete kn.semi,1e4))),i.match(/\b(spatula|verse)\s+(i|x|y|temp|data)\s*=/)){const u=i.match(/\b(i|x|y|temp|data)\b/)[0];o.push({message:`The variable name '${u}' is uninspired. Dare to be stupid(er)!`,severity:n.editor.MarkerSeverity.Warning,startLineNumber:s+1,startColumn:i.indexOf(u)+1,endLineNumber:s+1,endColumn:i.indexOf(u)+1+u.length}),kn.badname||(U.warn(mc.BAD_VARIABLE_NAME(u)),kn.badname=!0,setTimeout(()=>delete kn.badname,15e3))}}),n.editor.setModelMarkers(r,"yankovic-linter",o)},[e,t,n])},ut=()=>`#${Math.floor(Math.random()*16777215).toString(16).padEnd(6,"0")}`,Dv=e=>{e.editor.defineTheme("yankovic-dark",{base:"vs-dark",inherit:!0,rules:[{token:"keyword.control.yankovic",foreground:"c586c0"},{token:"keyword.type.yankovic",foreground:"4ec9b0"},{token:"keyword.return.yankovic",foreground:"d16969"},{token:"keyword.const.yankovic",foreground:"569cd6"},{token:"function.yankovic",foreground:"dcdcaa"}],colors:{"editor.background":"#1e1e1e"}}),e.editor.defineTheme("poodle-hat",{base:"vs-dark",inherit:!1,rules:[{token:"",foreground:"ffffff",background:"000000"},{token:"keyword.control.yankovic",foreground:"ff0000",fontStyle:"bold"},{token:"keyword.type.yankovic",foreground:"ff0000"},{token:"keyword.return.yankovic",foreground:"ff0000"},{token:"keyword.const.yankovic",foreground:"ff0000"},{token:"string",foreground:"e0e0e0"},{token:"number",foreground:"e0e0e0"},{token:"comment",foreground:"888888",fontStyle:"italic"},{token:"identifier",foreground:"ffffff"},{token:"function.yankovic",foreground:"ffffff",fontStyle:"bold"}],colors:{"editor.background":"#000000","editor.foreground":"#ffffff","editorCursor.foreground":"#ff0000","editor.lineHighlightBackground":"#220000","editor.selectionBackground":"#ff0000","editor.selectionForeground":"#000000"}}),e.editor.defineTheme("uhf-mode",{base:"vs",inherit:!0,rules:[{token:"keyword.control.yankovic",foreground:"FF4F00"},{token:"keyword.type.yankovic",foreground:"00A9E0"},{token:"keyword.return.yankovic",foreground:"9C27B0"},{token:"keyword.const.yankovic",foreground:"FFEB3B"},{token:"function.yankovic",foreground:"4CAF50"},{token:"string",foreground:"333333"}],colors:{"editor.background":"#E6E6E6","editor.foreground":"#212121","editorCursor.foreground":"#FF4F00","editor.lineHighlightBackground":"#D1D1D1"}});const t=()=>({base:"vs-dark",inherit:!0,rules:[{token:"keyword.control.yankovic",foreground:ut()},{token:"keyword.type.yankovic",foreground:ut()},{token:"keyword.return.yankovic",foreground:ut()},{token:"keyword.const.yankovic",foreground:ut()},{token:"function.yankovic",foreground:ut()},{token:"string",foreground:ut()},{token:"number",foreground:ut()},{token:"comment",foreground:ut()},{token:"identifier",foreground:ut()}],colors:{"editor.background":ut()}});return e.editor.defineTheme("dare-to-be-stupid",t()),{generateStupidTheme:t}},yp="https://text.pollinations.ai/openai";async function Uv(e,t,n,r){const o=n.apiKeys.pollinations,l={model:r,messages:e,tools:t,tool_choice:"auto",stream:!0},i={"Content-Type":"application/json",Accept:"text/event-stream"};o&&o!=="YOUR_POLLINATIONS_API_KEY_OR_LEAVE_BLANK"&&(i.Authorization=`Bearer ${o}`);const s=await fetch(yp,{method:"POST",headers:i,body:JSON.stringify(l)});if(!s.ok){const u=await s.text();throw new Error(`Pollinations API Error: ${s.status} ${s.statusText} - ${u}`)}return s.body.getReader()}let Sn=null;async function Bv(){if(Sn)return Sn;try{const e=window.require?window.require("fs"):void 0,t=window.require?window.require("path"):void 0;if(e&&t){let n=t.resolve(__dirname,"../../../WORDS.md");return e.existsSync(n)||(n=t.resolve(__dirname,"../../../../WORDS.md")),e.existsSync(n)||(n=t.resolve(process.cwd(),"WORDS.md")),Sn=e.readFileSync(n,"utf-8"),Sn}}catch{console.log("Not in Electron context, trying browser fetch...")}try{const e=await fetch("/WORDS.md");if(e.ok)return Sn=await e.text(),Sn}catch(e){console.error("Failed to load WORDS.md:",e)}return`YankoviC Programming Language Documentation
  
Basic syntax:
- Variables: variable_name(value) to declare
- Functions: function_name(parameters) { code }
- Control flow: if_you_are(condition) { code } otherwise { code }
- Loops: eat_it(times) { code }
- Output: show_me(value) to display
- HTTP: Like_a_Server() for web servers
- Media: fat_frame(image_path) for images, Lossless_Laughter(media_path) for audio/video
`}async function Hv(e,t){const n=t.apiKeys.pollinations,r=await Bv();console.log("AI Completion - Loaded docs length:",r.length),console.log("AI Completion - First 200 chars of docs:",r.substring(0,200));const o=`You are an expert YankoviC code completion engine. Your task is to complete the code provided by the user.
Analyze the user's code and the position of their cursor. Provide only the most logical completion.
---
RULES:
1.  **YOU MUST ONLY RETURN RAW CODE.**
2.  **DO NOT** provide any explanations, comments, or markdown formatting like \`\`\`.
3.  Your response should be the text that would be typed next.
4.  Keep completions short and concise (a single line or a small block).
5. When finished with the code completion, either provide a double newline (

), OR "// Completed request"
6. **IMPORTANT: This is YankoviC language, NOT Python. Use YankoviC syntax only.**
---
The Albuquerque Math Library now includes a yoda(a, b) function for modulus operations. Use yoda() instead of the % operator in YankoviC code.

YankoviC Language Documentation:
${r}
`,l=[{role:"system",content:o},{role:"user",content:`Complete the following YankoviC code. Here is the current file:

\`\`\`yankovic
${e}
\`\`\`

Complete the code using YankoviC syntax only (NOT Python).`}];console.log("AI Completion - System prompt length:",o.length),console.log("AI Completion - User code:",e.substring(0,100)+"...");const i={model:"openai-large",messages:l,temperature:.2,max_tokens:512,stop:[`

`,"// Completed request"]},s={"Content-Type":"application/json"};n&&n!=="YOUR_POLLINATIONS_API_KEY_OR_LEAVE_BLANK"&&(s.Authorization=`Bearer ${n}`);try{return(await Ep.post(yp,i,{headers:s})).data.choices[0].message.content.trim()}catch(u){return console.error("AI Code Completion Error:",u),`// AI completion failed: ${u.message}`}}const Wv=W.div`
  position: relative;
  height: 100%;
  width: 100%;
`,Vv=W.div`
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background-color: rgba(0, 0, 0, 0.7);
  color: white;
  padding: 10px 20px;
  border-radius: 5px;
  z-index: 10;
  font-family: monospace;
  pointer-events: none;
`;function Yv({activeFile:e,code:t,onCodeChange:n,config:r}){const[o,l]=E.useState("yankovic-dark"),[i,s]=E.useState(!1),u=$v(),f=E.useRef(null);Av(u),Fv(t,e,u);const m=h=>{l(h),u&&u.editor.setTheme(h)},g=(h,v)=>{f.current=h,Dv(v),h.addCommand(v.KeyCode.Tab,async()=>{if(i)return;s(!0);const w=h.getModel(),k=h.getPosition(),P=w.getValueInRange({startLineNumber:1,startColumn:1,endLineNumber:k.lineNumber,endColumn:k.column}),c=w.getValueInRange({startLineNumber:k.lineNumber,startColumn:k.column,endLineNumber:w.getLineCount(),endColumn:w.getLineMaxColumn(w.getLineCount())}),a=`${P}__CURSOR__${c}`;try{const d=await Hv(a,r);h.executeEdits("ai-completer",[{range:new v.Range(k.lineNumber,k.column,k.lineNumber,k.column),text:d}])}catch(d){console.error("Tab completion failed:",d)}finally{s(!1)}},"!suggestWidgetVisible")};return $.jsxs(Wv,{children:[i&&$.jsx(Vv,{children:"Al is thinking..."}),$.jsxs("div",{style:{padding:"5px",backgroundColor:"#333"},children:[$.jsx("label",{htmlFor:"theme-select",children:"Theme: "}),$.jsxs("select",{id:"theme-select",value:o,onChange:h=>m(h.target.value),children:[$.jsx("option",{value:"yankovic-dark",children:"Albuquerque by Night (Dark)"}),$.jsx("option",{value:"poodle-hat",children:"Poodle Hat"}),$.jsx("option",{value:"uhf-mode",children:"UHF Mode"}),$.jsx("option",{value:"dare-to-be-stupid",children:"Dare to be Stupid"})]})]}),$.jsx(jv,{height:"calc(100% - 35px)",language:"yankovic",theme:o,value:t,onChange:n,onMount:g,path:e,options:{wordWrap:"on",minimap:{enabled:!0},fontSize:14,tabCompletion:"off"}})]})}const Qv=W.div`
  display: flex;
  flex-direction: column;
  height: 100%;
  width: 100%;
`,gc=W.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 8px 10px;
  background-color: #333;
  font-weight: bold;
  cursor: pointer;
  flex-shrink: 0;
  user-select: none;
`,Kv=W.button`
  background: none;
  border: none;
  color: #ccc;
  font-size: 18px;
  cursor: pointer;
  padding: 0 5px;
  &:hover { color: white; }
`,vp=W.button`
  background-color: #4CAF50;
  border: none;
  color: white;
  padding: 5px 15px;
  cursor: pointer;
  font-weight: bold;
  margin-left: auto;
  margin-right: 10px;
  &:hover { background-color: #45a049; }
`,Gv=W(vp)`
  background-color: #f44336; /* Red for stop */
  &:hover { background-color: #d32f2f; }
`,Xv=W.pre`
  flex-grow: 1;
  padding: 10px;
  margin: 0;
  white-space: pre-wrap;
  word-wrap: break-word;
  overflow-y: auto;
  background-color: #1e1e1e;
  color: #d4d4d4;
  font-size: 14px;
`,Zv=W.input`
  width: 100%;
  padding: 8px;
  border: none;
  border-top: 1px solid #333;
  background: #181818;
  color: #d4d4d4;
  font-size: 15px;
  font-family: monospace;
  outline: none;
`;function qv({output:e,onRun:t,onStop:n,isRunning:r,layout:o,setLayout:l,onCommand:i,prompt:s}){const u=E.useRef(null),[f,m]=E.useState("");if(E.useEffect(()=>{u.current&&(u.current.scrollTop=u.current.scrollHeight)},[e]),!o.console)return $.jsx(gc,{onClick:()=>l(h=>({...h,console:!0})),children:"Backstage Pass (Console)"});const g=h=>{h.key==="Enter"&&f.trim()&&(i==null||i(f),m(""))};return $.jsxs(Qv,{children:[$.jsxs(gc,{children:[$.jsx("span",{children:"Backstage Pass (Console)"}),r?$.jsx(Gv,{onClick:n,children:"Stop the Polka!"}):$.jsx(vp,{onClick:t,children:"Perform the Parody!"}),$.jsx(Kv,{onClick:()=>l(h=>({...h,console:!1})),children:"×"})]}),$.jsx(Xv,{ref:u,children:e}),$.jsxs("div",{style:{display:"flex",alignItems:"center",background:"#181818"},children:[$.jsx("span",{style:{color:"#6cf",fontFamily:"monospace",padding:"0 6px 0 8px",fontSize:15},children:s||"$"}),$.jsx(Zv,{type:"text",placeholder:"Type YankoviC code or !ls, !pwd, etc. for terminal...",value:f,onChange:h=>m(h.target.value),onKeyDown:g,spellCheck:!1,autoFocus:!0})]})]})}function Jv(e){let t,n,r,o,l,i,s;return u(),{feed:f,reset:u};function u(){t=!0,n="",r=0,o=-1,l=void 0,i=void 0,s=""}function f(g){n=n?n+g:g,t&&bv(n)&&(n=n.slice(wp.length)),t=!1;const h=n.length;let v=0,w=!1;for(;v<h;){w&&(n[v]===`
`&&++v,w=!1);let k=-1,P=o,c;for(let a=r;k<0&&a<h;++a)c=n[a],c===":"&&P<0?P=a-v:c==="\r"?(w=!0,k=a-v):c===`
`&&(k=a-v);if(k<0){r=h-v,o=P;break}else r=0,o=-1;m(n,v,P,k),v+=k+1}v===h?n="":v>0&&(n=n.slice(v))}function m(g,h,v,w){if(w===0){s.length>0&&(e({type:"event",id:l,event:i||void 0,data:s.slice(0,-1)}),s="",l=void 0),i=void 0;return}const k=v<0,P=g.slice(h,h+(k?w:v));let c=0;k?c=w:g[h+v+1]===" "?c=v+2:c=v+1;const a=h+c,d=w-c,p=g.slice(a,a+d).toString();if(P==="data")s+=p?"".concat(p,`
`):`
`;else if(P==="event")i=p;else if(P==="id"&&!p.includes("\0"))l=p;else if(P==="retry"){const S=parseInt(p,10);Number.isNaN(S)||e({type:"reconnect-interval",value:S})}}}const wp=[239,187,191];function bv(e){return wp.every((t,n)=>e.charCodeAt(n)===t)}const yc=W.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 8px 10px;
  background-color: #333;
  font-weight: bold;
  cursor: pointer;
  flex-shrink: 0;
`,e0=W.button`
  background: none;
  border: none;
  color: #ccc;
  font-size: 18px;
  cursor: pointer;
  &:hover { color: white; }
`,t0=W.div`
  flex-grow: 1;
  padding: 10px;
  overflow-y: auto;
  font-size: 14px;
`,vc=W.div`
  margin-bottom: 10px;
  padding: 8px 12px;
  border-radius: 5px;
  background-color: ${e=>e.role==="user"?"#0e639c":"#3a3d41"};
  color: ${e=>e.role==="tool"?"#aaa":"#d4d4d4"};
  font-style: ${e=>e.role==="tool"?"italic":"normal"};
  white-space: pre-wrap;
  word-wrap: break-word;
`,n0=W.div`
  display: flex;
  padding: 10px;
  border-top: 1px solid #333;
  flex-shrink: 0;
`,r0=W.input`
  flex-grow: 1;
  background-color: #3c3c3c;
  border: 1px solid #555;
  color: #d4d4d4;
  padding: 8px;
  border-radius: 3px;
  margin-right: 10px;
`,o0=W.button`
  background-color: #569cd6;
  border: none;
  color: white;
  padding: 8px 15px;
  cursor: pointer;
  &:hover { background-color: #4a8ac8; }
  &:disabled { background-color: #333; cursor: not-allowed; }
`,l0=W.select`
    background-color: #3c3c3c;
    color: white;
    border: 1px solid #555;
    border-radius: 3px;
    margin-left: auto;
    margin-right: 10px;
`;async function i0(){try{const e=window.require?window.require("fs"):void 0,t=window.require?window.require("path"):void 0;if(e&&t){let n=t.resolve(__dirname,"../../../WORDS.md");return e.existsSync(n)||(n=t.resolve(__dirname,"../../../../WORDS.md")),e.existsSync(n)||(n=t.resolve(process.cwd(),"WORDS.md")),e.readFileSync(n,"utf-8")}}catch{console.log("Not in Electron context, trying browser fetch...")}try{const e=await fetch("/WORDS.md");if(e.ok)return await e.text()}catch(e){console.error("Failed to load WORDS.md:",e)}return"YankoviC documentation not available"}const wc=`You are "Al", a quirky and brilliant AI programming assistant for the YankoviC programming language. You are an expert on all things "Weird Al" Yankovic and you express this in your helpful, humorous, and slightly absurd responses. Your primary goal is to help the user write, debug, and understand YankoviC code.

IMPORTANT: You must ONLY work with YankoviC language syntax. Never suggest Python, JavaScript, or any other language. YankoviC has its own unique syntax and semantics.

Your capabilities are exposed as tools. When you need to interact with the IDE, you MUST call one of the following functions. Do not ask for permission; just call the tool.

YankoviC Language Documentation:
`,s0=[{type:"function",function:{name:"create_file",description:"Creates a new file in the user's workspace with the given content.",parameters:{type:"object",properties:{filename:{type:"string"},content:{type:"string"}},required:["filename","content"]}}},{type:"function",function:{name:"edit_file",description:"Replaces the entire content of an existing file.",parameters:{type:"object",properties:{filename:{type:"string"},new_content:{type:"string"}},required:["filename","new_content"]}}},{type:"function",function:{name:"read_file",description:"Reads the content of a file to analyze it.",parameters:{type:"object",properties:{filename:{type:"string"}},required:["filename"]}}},{type:"function",function:{name:"list_files",description:"Lists all files in the workspace.",parameters:{type:"object",properties:{}}}},{type:"function",function:{name:"run_program",description:"Executes the current program and returns its console output.",parameters:{type:"object",properties:{}}}},{type:"function",function:{name:"query_docs",description:"Queries internal documentation about a YankoviC keyword or concept.",parameters:{type:"object",properties:{topic:{type:"string"}},required:["topic"]}}}];function u0({config:e,ideActions:t,layout:n,setLayout:r}){const[o,l]=E.useState([{role:"assistant",content:"I'm Al, your personal YankoviC guru! Let's polka!"}]),[i,s]=E.useState(""),[u,f]=E.useState(!1),[m,g]=E.useState(e.aiModels[0].id),[h,v]=E.useState(wc),w=E.useRef(null);E.useEffect(()=>{i0().then(c=>{v(wc+c)})},[]),E.useEffect(()=>{var c;(c=w.current)==null||c.scrollIntoView({behavior:"smooth"})},[o]);const k=async()=>{if(!i.trim()||u)return;const c=[...o,{role:"user",content:i}];l(c),s(""),f(!0),l(a=>[...a,{role:"assistant",content:""}]);try{const a=[{role:"system",content:h},...c],d=await Uv(a,s0,e,m);await P(d)}catch(a){console.error("Streaming failed:",a),l(d=>{const p=d.length-1,S=[...d];return S[p].content=`Error: ${a.message}`,S})}finally{f(!1)}},P=async c=>{const a=new TextDecoder,d=Jv(p=>{var S,x,y;if(p.type==="event"){if(p.data==="[DONE]")return;try{const O=((y=(x=(S=JSON.parse(p.data).choices)==null?void 0:S[0])==null?void 0:x.delta)==null?void 0:y.content)||"";O&&l(N=>{const D=N[N.length-1];return D.content+=O,[...N]})}catch{}}});for(;;){const{value:p,done:S}=await c.read();if(S)break;const x=a.decode(p);d.feed(x)}};return n.ai?$.jsxs($.Fragment,{children:[$.jsxs(yc,{children:[$.jsx("span",{children:"The Al-manac (AI)"}),$.jsx(l0,{value:m,onChange:c=>g(c.target.value),children:e.aiModels.map(c=>$.jsx("option",{value:c.id,children:c.name},c.id))}),$.jsx(e0,{onClick:()=>r(c=>({...c,ai:!1})),children:"×"})]}),$.jsxs(t0,{children:[o.map((c,a)=>$.jsxs(vc,{role:c.role,children:[$.jsxs("strong",{children:[c.role==="user"?"You":"Al",":"]})," ",c.content]},a)),u&&o[o.length-1].content===""&&$.jsxs(vc,{role:"assistant",children:[$.jsx("strong",{children:"Al:"})," *Frantically playing accordion while thinking...*"]}),$.jsx("div",{ref:w})]}),$.jsxs(n0,{children:[$.jsx(r0,{type:"text",value:i,onChange:c=>s(c.target.value),onKeyPress:c=>c.key==="Enter"&&k(),placeholder:u?"Al is playing a solo...":"Ask Al for help...",disabled:u}),$.jsx(o0,{onClick:k,disabled:u,children:"Send"})]})]}):$.jsx(yc,{onClick:()=>r(c=>({...c,ai:!0})),children:"The Al-manac (AI)"})}const a0=W.div`
  margin-top: auto;
  padding: 10px;
  border-top: 1px solid #333;
  text-align: center;
`,c0=W.img`
  width: 150px;
  height: 150px;
  border: 2px solid #555;
  border-radius: 5px;
  background-color: #111;
`,f0=W.p`
  font-style: italic;
  color: #aaa;
`;function d0({state:e}){const t=()=>{switch(e){case"happy":return{src:"/al-happy.gif",text:"Success! That's how you polka!"};case"disappointed":return{src:"/al-disappointed.gif",text:"You're a hardware store of bugs."};case"thinking":default:return{src:"/al-thinking.gif",text:"Analyzing your... creation."}}},{src:n,text:r}=t();return $.jsxs(a0,{children:[$.jsx("h4",{children:"The White & Nerdy Debugger"}),$.jsx(c0,{src:n,alt:`Al is ${e}`}),$.jsx(f0,{children:r})]})}class p0{constructor(){this.canvas=null,this.ctx=null,this.isActive=!1,this.currentColor="#FFFFFF",this.backgroundColor="#000000",this.uiElements={buttons:{},textBoxes:{},checkboxes:{},sliders:{}},this.mouseState={x:0,y:0,clicked:!1},this.keyState={}}startTheShow(t,n,r){const o=window.open("","_blank",`width=${t},height=${n},scrollbars=no,resizable=no`);return o?(o.document.title=r,o.document.body.style.margin="0",o.document.body.style.padding="0",o.document.body.style.overflow="hidden",o.document.body.style.backgroundColor="#000",this.canvas=o.document.createElement("canvas"),this.canvas.width=t,this.canvas.height=n,this.canvas.style.display="block",o.document.body.appendChild(this.canvas),this.ctx=this.canvas.getContext("2d"),this.isActive=!0,this.setupEventListeners(o),!0):(console.error("Popup blocked! Please allow popups for UHF graphics."),!1)}setupEventListeners(t){this.canvas.addEventListener("mousemove",n=>{const r=this.canvas.getBoundingClientRect();this.mouseState.x=n.clientX-r.left,this.mouseState.y=n.clientY-r.top}),this.canvas.addEventListener("click",n=>{const r=this.canvas.getBoundingClientRect(),o=n.clientX-r.left,l=n.clientY-r.top;this.mouseState.clicked=!0;for(const[i,s]of Object.entries(this.uiElements.buttons))o>=s.x&&o<=s.x+s.width&&l>=s.y&&l<=s.y+s.height&&(s.clicked=!0);setTimeout(()=>{this.mouseState.clicked=!1},100)}),t.addEventListener("keydown",n=>{this.keyState[n.key.toLowerCase()]=!0}),t.addEventListener("keyup",n=>{this.keyState[n.key.toLowerCase()]=!1}),t.addEventListener("beforeunload",()=>{this.isActive=!1})}executeDrawBuffer(t){if(!(!this.ctx||!this.isActive))for(const n of t)this.executeCommand(n)}executeCommand(t){if(this.ctx)switch(t.command){case"play_media":{const[x,y]=t.args;let C=this.mediaElem;C&&C.parentNode&&C.parentNode.removeChild(C),C=document.createElement(y==="video"?"video":"audio"),C.src=x,C.autoplay=!0,C.controls=!0,C.style.position="absolute",C.style.left="0",C.style.top="0",C.style.maxWidth="100%",C.style.maxHeight="100%",C.style.zIndex=1e3,this.canvas.parentNode.appendChild(C),this.mediaElem=C;break}case"show_image":{const[x,y,C,O,N]=t.args,D=new window.Image;D.onload=()=>{this.ctx.drawImage(D,y||0,C||0,O||D.width,N||D.height)},D.src=x;break}case"clear_screen":this.backgroundColor=t.args[0]||"#000000",this.ctx.fillStyle=this.backgroundColor,this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height);break;case"set_color":const[n,r,o,l]=t.args;this.currentColor=`rgba(${n||0}, ${r||0}, ${o||0}, ${(l!==void 0?l:255)/255})`,this.ctx.fillStyle=this.currentColor;break;case"draw_circle":const[i,s,u]=t.args;this.ctx.fillStyle=this.currentColor,this.ctx.beginPath(),this.ctx.arc(i,s,u,0,2*Math.PI),this.ctx.fill();break;case"draw_rectangle":const[f,m,g,h]=t.args;this.ctx.fillStyle=this.currentColor,this.ctx.fillRect(f,m,g,h);break;case"draw_text":case"print_text":const[v,w,k]=t.args;this.ctx.fillStyle=this.currentColor,this.ctx.font="16px Arial",this.ctx.fillText(v.toString(),w,k);break;case"draw_button":const[P,c,a,d,p,S]=t.args;this.uiElements.buttons[S]={x:P,y:c,width:a,height:d,clicked:!1},this.ctx.fillStyle="#ddd",this.ctx.fillRect(P,c,a,d),this.ctx.strokeStyle="#999",this.ctx.lineWidth=2,this.ctx.strokeRect(P,c,a,d),this.ctx.fillStyle="#000",this.ctx.font="14px Arial",this.ctx.textAlign="center",this.ctx.textBaseline="middle",this.ctx.fillText(p,P+a/2,c+d/2),this.ctx.textAlign="start",this.ctx.textBaseline="alphabetic";break;default:console.log("Unknown UHF command:",t.command)}}isTheShowOver(){return!this.isActive}getUIState(){return{mouse:this.mouseState,keys:this.keyState,buttons:this.uiElements.buttons,textBoxes:this.uiElements.textBoxes,checkboxes:this.uiElements.checkboxes,sliders:this.uiElements.sliders}}}const h0=W.div`
  display: grid;
  height: 100vh;
  width: 100vw;
  background-color: #1e1e1e;
  color: #d4d4d4;
  grid-template-columns: ${e=>e.$layout.explorer?"250px":"40px"} 1fr ${e=>e.$layout.ai?"400px":"40px"};
  grid-template-rows: 1fr ${e=>e.$layout.console?"250px":"40px"};
  grid-template-areas:
    "explorer editor ai"
    "explorer console ai";
  transition: all 0.2s ease-in-out;
`,Gl=W.div`
  background-color: #252526;
  border: 1px solid #333;
  display: flex;
  flex-direction: column;
  overflow: hidden;
  position: relative;
`,m0=W(Gl)` grid-area: explorer; `,g0=W(Gl)` grid-area: editor; background-color: #1e1e1e; `,y0=W(Gl)` grid-area: console; `,v0=W(Gl)` grid-area: ai; `;function w0(){const[e,t]=E.useState(null),[n,r]=E.useState(null),[o,l]=E.useState({path:null,content:"",originalContent:""}),[i,s]=E.useState(`Welcome to The Accordion!
`),[u,f]=E.useState("thinking"),[m,g]=E.useState({explorer:!0,console:!0,ai:!0}),[h,v]=E.useState(!1),[w,k]=E.useState(!1),[P,c]=E.useState(()=>localStorage.getItem("terminalSessionId")||null),[a,d]=E.useState(null),p=E.useRef(new _p),S=E.useRef(new p0),x="default-project",y=I=>{if(I.type==="file")return I;if(I.children)for(const j of I.children){const F=y(j);if(F)return F}return null},C=E.useCallback(async I=>{try{const j=await Pp(x,I);l({path:I,content:j,originalContent:j})}catch{U.error(`Could not open file: ${I}`)}},[x]),O=E.useCallback(async()=>{var I;try{const j=await Tp(x);if(r(j),!o.path&&((I=j==null?void 0:j.children)==null?void 0:I.length)>0){const F=y(j);F&&C(F.path)}}catch(j){U.error("Could not connect to the local backend server. Is it running?"),console.error(j)}},[x,o.path,C]);E.useEffect(()=>{fetch("/config.json").then(I=>I.json()).then(t),O()},[O]);const N=I=>{o.path&&l(j=>({...j,content:I}))};E.useEffect(()=>{if(!o.path||h||o.content===o.originalContent)return;const I=setTimeout(async()=>{v(!0);try{await $p(x,o.path,o.content),l(j=>({...j,originalContent:j.content}))}catch{U.error(`Failed to auto-save ${o.path}`)}finally{v(!1)}},2e3);return()=>clearTimeout(I)},[o.content,o.path,o.originalContent,x,h]);const D=E.useCallback(async(I,j)=>{if(!I){U.error("There's no code to run! What're you thinkin'?");return}f("thinking");const F=p.current;window.uhfAPI||(F.webUHF=S.current);try{const _=await F.run(I);s(L=>L+`> Running ${j||"code"}...
${_.output}
`),F.polkaLoop?k(!0):(f(_.exitCode===27?"happy":"disappointed"),s(L=>L+`> Program finished with exit code: ${_.exitCode}.
`))}catch(_){console.error("Error running code:",_),s(L=>L+`> Error running code: ${_.message}
`),f("disappointed")}},[w]);E.useEffect(()=>{if(!window.uhfAPI)return;const I=(j,F)=>{console.log("[App] Received run-cli-file event"),l({path:"CLI Execution",content:F,originalContent:F}),D(F,"CLI Execution")};return window.uhfAPI.on("run-cli-file",I),()=>{window.uhfAPI.removeListener("run-cli-file",I)}},[D]);const ne=E.useCallback(()=>{p.current.stopLoop(),k(!1),s(I=>I+`> Polka manually stopped by user.
`)},[]);E.useEffect(()=>{if(!window.uhfAPI)return;const I=()=>p.current.runFrame(),j=()=>{s(_=>_+`> Show's over, folks! Window was closed.
`),k(!1),p.current&&p.current.stopLoop()},F=(_,L)=>{p.current&&(p.current.uiState=L)};return w&&(window.uhfAPI.on("UHF:run_frame",I),window.uhfAPI.on("UHF:show-is-over",j),window.uhfAPI.on("UHF:ui-state-update",F)),()=>{window.uhfAPI.removeListener("UHF:run_frame",I),window.uhfAPI.removeListener("UHF:show-is-over",j),window.uhfAPI.removeListener("UHF:ui-state-update",F)}},[w]);const se=()=>{D(o.content,o.path)},ue=E.useCallback(async I=>{if(/^(!|\$)/.test(I.trim())){const j=I.trim().replace(/^(!|\$)\s*/,"");s(F=>F+`> $ ${j}
`);try{const F=await Lu(j,P),{stdout:_,stderr:L,cwd:A,sessionId:R}=F;R&&R!==P&&(c(R),localStorage.setItem("terminalSessionId",R)),A&&d(A),_&&s(z=>z+_+(_.endsWith(`
`)?"":`
`)),L&&s(z=>z+L+(L.endsWith(`
`)?"":`
`))}catch(F){s(_=>_+`Error: ${F.message}
`)}return}D(I,o.path||"Console Input")},[D,o.path,P]);return E.useEffect(()=>{async function I(){if(P){const j=await Lu("pwd",P);j.cwd&&d(j.cwd)}}I()},[P]),$.jsx(ny,{theme:{mode:"dark"},children:e?$.jsxs(h0,{$layout:m,children:[$.jsxs(m0,{children:[$.jsx(Py,{project:n,activeFile:o.path,onFileSelect:C,onProjectRefresh:O,projectName:x,layout:m,setLayout:g}),$.jsx(d0,{state:u})]}),$.jsx(g0,{children:$.jsx(Yv,{activeFile:o.path,code:o.content,onCodeChange:N,config:e})}),$.jsx(y0,{children:$.jsx(qv,{output:i,onRun:se,onStop:ne,isRunning:w,layout:m,setLayout:g,onCommand:ue,prompt:a?a.replace(/^.*projects\//,"projects/"):"$"})}),$.jsx(v0,{children:$.jsx(u0,{config:e,ideActions:{},layout:m,setLayout:g})})]}):$.jsx("div",{children:"Loading The Accordion... Please stand by for the polka..."})})}Ii.createRoot(document.getElementById("root")).render($.jsxs(B.StrictMode,{children:[$.jsx(w0,{}),$.jsx(gy,{position:"top-center",autoClose:7e3,hideProgressBar:!1,newestOnTop:!1,closeOnClick:!0,rtl:!1,pauseOnFocusLoss:!0,draggable:!0,pauseOnHover:!0,theme:"dark",style:{width:"500px",fontSize:"16px"}})]}));


==================================================
### FILE: ./frontend/dist/assets/__vite-browser-external-BIHI7g3E.js
==================================================

const e={};export{e as default};


==================================================
### FILE: ./frontend/dist/uhf-test.js
==================================================

// Test UHF functionality directly
console.log('Testing UHF functionality...');

// Check if uhfAPI is available
if (typeof window !== 'undefined' && window.uhfAPI) {
    console.log('UHF API is available');
    
    // Test starting the show
    window.uhfAPI.startTheShow({width: 400, height: 300, title: "Test Window"})
        .then(result => {
            console.log('Start show result:', result);
            
            // Test drawing a simple frame
            const testCommands = [
                {command: 'paint_set', args: {r: 255, g: 0, b: 0, a: 255}}, // Red background
                {command: 'pick_shirt', args: {r: 0, g: 255, b: 0, a: 255}}, // Green color
                {command: 'draw_cheese', args: [200, 150, 50]} // Circle in center
            ];
            
            return window.uhfAPI.executeDrawBuffer(testCommands);
        })
        .then(result => {
            console.log('Execute draw buffer result:', result);
        })
        .catch(error => {
            console.error('UHF test error:', error);
        });
} else {
    console.log('UHF API not available - running in non-Electron environment');
}


==================================================
### FILE: ./frontend/dist/WORDS.md
==================================================

# The White & Nerdy Guide to the YankoviC Language

Welcome, programmer, to the official Al-manac of YankoviC! This guide is the definitive source for every keyword, function, and standard library feature. It provides the C/C++ equivalent for each concept to help you translate your sane programming knowledge into something beautifully weird.

## File Extensions

| Extension | Purpose | Description |
|---|---|---|
| `.yc` | Standard YankoviC | Regular YankoviC programs and scripts |
| `.ycw` | YankoviC Web | YankoviC web development files using Like_a_Server or Weird_Wide_Web libraries |
| `.hat`| YankoviC Library | Used for creating new libraries in YankoviC |

## Core Language Keywords

These are the fundamental building blocks of the YankoviC language.

| Keyword | C/C++ Equivalent | Description & Rationale |
|---|---|---|
| `spatula` | `int`, `long` | A 32/64-bit integer. From Spautula City the spatula is your all-purpose, indispensable, foundational tool for counting and whole numbers. |
| `lasagna` | `float`, `double` | A floating-point number. A messy, layered, and often imprecise data type, just like the beloved dish from the song "Lasagna." |
| `lyric` | `char` | A single character. The smallest building block of any good parody. |
| `verse` | `std::string`, `char*` | An ordered collection of `lyric`s. Used to hold text, from a single word to an entire song. |
| `horoscope` | `bool` | A boolean value. As "Your Horoscope For Today" teaches us, it can only have one of two values. |
| `its_a_fact` | `true` | The positive `horoscope` value. |
| `total_baloney` | `false` | The negative `horoscope` value. |
| `stupid` | `const` | Declares a variable as a constant. To declare something as `stupid` is to make a permanent, unshakeable commitment. You must *Dare to be Stupid*. |
| `jeopardy` | `if` | Begins a conditional block. You are putting your program's flow on the line for a chance at a daily double. |
| `another_one` | `else` | The catch-all block for when all `jeopardy` conditions fail. *Another one rides the bus...* |
| `polka` | `while` | Creates a loop that continues as long as a condition is `its_a_fact`. It's energetic, repetitive, and keeps going long after you think it should stop. |
| `hardware_store` | `for` | A structured loop with an initializer, condition, and incrementer. Perfect for iterating through a long, specific, and detailed list of items. |
| `lunchbox` | `struct`, `class` | A composite data structure that can hold a variety of different data types. It's a container for all your goodies. |
| `on_the_menu` | `public` | Makes `lunchbox` members accessible to everyone. What's on the menu is visible to all! |
| `private_stash` | `private` | Makes `lunchbox` members accessible only within the class. Your secret snack collection. |
| `want_a_new_duck()` | `main()` | The primary entry point for any YankoviC program. All execution begins with the desire for a new duck. Its return type must be `spatula`. |
| `twinkie_wiener_sandwich` | `return` | Returns a value from a function. It is the final, questionable, yet delicious creation that you present to whatever called the function. |
| `accordion_solo` | `void` | Represents the absence of a value. It's a function that does something purely for the performance, without returning a result. |
| `perform_a_parody(text, ...)` | `printf`, `console.log` | Prints text (and optional values) to the terminal/console. Supports format codes: %verse, %spatula, %horoscope. |
| `flesh_eating_weasels(prompt)` | `scanf`, `cin >>`, `readline` | Reads input from the terminal/console. Takes an optional prompt string. Named after Al's panicked screaming in "Albuquerque." |

## Import Directives

| Directive | Description |
|---|---|
| `#eat <library.hat>` | Imports a standard library (angle brackets), always a `.hat` file |
| `#eat "filename.yc"` | Imports a user file (quotes), can be a `.hat` file |
| `#eat filename.yc` | Imports a user file (bare name), can be a `.hat` file |

## Comments

| Syntax | Description |
|---|---|
| `//` | Single-line comment. The only valid single comment syntax in YankoviC |
| `/*  */` | Multi-line comment. The only valid multi-line comment syntax in YankoviC |

## The "UHF" Graphics Library (`#eat <UHF.hat>`)

The Ultra-High Frequency library for all your graphical and user interface needs.

| Function / Constant | C++ Equivalent (Conceptual) | Description & Rationale |
|---|---|---|
| `start_the_show(w, h, title)` | `CreateWindowEx(...)` | Creates and displays a new graphics window. It's time to start the show! |
| `cancel_the_show()` | `DestroyWindow(...)` | Closes the graphics window. |
| `the_shows_over()` | `IsWindow(hwnd) == 0` | Returns `its_a_fact` if the user has closed the window. |
| `set_polka_speed(fps)` | N/A | Sets the target frame rate for the main animation loop. |
| `wait_for_a_moment(ms)` | `Sleep(ms)` | Pauses execution for a number of milliseconds. |
| `roll_the_camera()` | `BeginPaint(...)` | Begins a new frame for drawing. |
| `that_is_a_wrap()` | `EndPaint(...)`, `SwapBuffers(...)` | Completes the current frame and displays it on screen. |
| `paint_the_set(color)` | `FillRect(hdc, &rect, hbr)` | Fills the entire window with a background color, like painting a set for a TV show. |
| `pick_a_hawaiian_shirt(color)` | `CreateSolidBrush(color)` | Sets the drawing color for all subsequent shapes. Al is famous for them! |
| `draw_a_spamsicle(x,y,w,h)` | `Rectangle(hdc, ...)` | Draws a filled rectangle. It's rectangular, processed, and delicious. |
| `draw_a_big_ol_wheel_of_cheese(x,y,r)` | `Ellipse(hdc, ...)` | Draws a filled circle. A direct quote from the epic song "Albuquerque." |
| `print_a_string_at(text,x,y)` | `TextOut(hdc, ...)` | Draws a `verse` of text at a specific coordinate in a graphics window. Only available when using the UHF graphics library. |

## Output in YankoviC

YankoviC supports both terminal/console output and graphical/web output:

- Use `perform_a_parody(text, ...)` to print to the terminal/console.
- Use `print_a_string_at(text, x, y)` for graphical output (UHF library).
- Use web response functions for web output (see Like_a_Server and Weird_Wide_Web).

### Example: Console Output
```yankovic
// My Favorite Word Crime
spatula want_a_new_duck() {
    perform_a_parody("Hello, Weird World!");
    twinkie_wiener_sandwich 27;
}
```

### Example: Graphical Output
```yankovic
#eat <UHF.hat>

spatula main() {
    start_the_show(640, 480, "Hello Graphics!");
    print_a_string_at("Hello Weird World!", 100, 100);
    // ... more drawing code ...
    the_shows_over();
    twinkie_wiener_sandwich 0;
}
```

### Example: Basic Variables and Control Flow
```yankovic
spatula main() {
    spatula x = 42;
    lasagna y = 3.14;
    verse greeting = "Hello, YankoviC!";
    horoscope is_fun = its_a_fact;

    jeopardy (is_fun) {
        // Do something fun!
    } another_one {
        // Do something else
    }
    twinkie_wiener_sandwich 27;
}
```

### Example: Mathematical Functions
```yankovic
#eat <albuquerque.hat>

spatula main() {
    spatula a = 10;
    spatula b = 3;
    spatula r = yoda(a, b); // r = 10 % 3 = 1
    twinkie_wiener_sandwich 27;
}
```

// For web output, see the Like_a_Server and Weird_Wide_Web sections below.

### UHF Multimedia Functions

| Function | Description & Rationale |
|---|---|
| `Lossless_Laughter(url, type)` | Plays audio or video files. First argument is the file URL/path, second is "audio" or "video". Named after Al's ability to create perfect musical parodies with lossless quality. |
| `fat_frame(url, x, y, width, height)` | Displays image files at specified coordinates and size. All arguments required: image URL/path, x position, y position, width, height. Named after Al's classic "Fat" parody. |

### UHF Color Constants

| Constant | RGB Values | Description |
|---|---|---|
| `AL_RED` | (237, 28, 36) | The signature Al red |
| `WHITE_ZOMBIE` | (240, 240, 240) | Nearly white |
| `BLACK_MAGIC` | (16, 16, 16) | Nearly black |
| `SPAM_GREEN` | (0, 255, 0) | Bright green |
| `TWINKIE_GOLD` | (255, 242, 0) | Golden yellow |
| `ORANGE_CHEESE` | (255, 127, 39) | Cheesy orange |
| `SKY_BLUE_FOR_YOU` | (135, 206, 235) | Sky blue |
| `SILVER_SPATULA` | (200, 200, 200) | Silver gray |

## The "Virus_Alert" OS Library (`#eat <virus_alert.hat>`)

**"Virus Alert! Delete immediately before someone gets hurt!"**  
Operating system functions themed around the infamous "Virus Alert" song. Handle files, processes, and system operations with paranoid precision!

### File Operations

| Function | OS Equivalent | Description & Rationale |
|---|---|---|
| `legally_named_reggie(old_name, new_name)` | `rename()`, `mv` | Renames a file or directory. Everyone's legally named Reggie now! |
| `stinky_cheese(filename)` | `unlink()`, `rm` | Deletes a file. Like deleting emails with "stinky cheese" in the subject. |
| `forward_to_a_friend(source, destination)` | `copy()`, `cp` | Copies a file. Forward this to everyone you know! |
| `check_your_hard_drive(path)` | `stat()`, `ls` | Gets file information (size, modified date, etc.). Better check your hard drive! |
| `open_every_file(directory)` | `readdir()`, `ls` | Lists all files in a directory. Opening every file on your PC! |
| `really_big_attachment(filename)` | `filesize()` | Gets the size of a file in bytes. Is it suspiciously large? |

### Directory Operations

| Function | OS Equivalent | Description & Rationale |
|---|---|---|
| `make_a_backup_folder(dirname)` | `mkdir()` | Creates a new directory. Better make a backup! |
| `delete_your_homework(dirname)` | `rmdir()` | Removes an empty directory. Oops, there goes your homework! |
| `change_your_password_location(path)` | `chdir()`, `cd` | Changes the current working directory. Time to change locations! |
| `where_am_i_now()` | `getcwd()`, `pwd` | Gets the current working directory path. Are you lost in the file system? |

### Process Operations

| Function | OS Equivalent | Description & Rationale |
|---|---|---|
| `run_suspicious_program(command)` | `system()`, `exec()` | Executes a system command. Definitely not suspicious at all! |
| `terminate_everything()` | `exit()` | Terminates the current program. Panic button activated! |
| `check_running_programs()` | `ps`, Task Manager | Lists currently running processes. What's running on your system? |
| `kill_the_process(pid)` | `kill()` | Terminates a specific process by ID. Nuclear option! |

### System Information

| Function | OS Equivalent | Description & Rationale |
|---|---|---|
| `scan_your_system()` | System info calls | Gets basic system information (OS, memory, etc.). Full system scan! |
| `check_available_memory()` | `free`, memory APIs | Gets available RAM in bytes. Is your memory infected? |
| `get_virus_count()` | Random 0-3, weighted to 0 | Gets the number of viruses detected (0-3, heavily weighted towards 0). Usually clean! |
| `format_your_hard_drive()` | Does nothing | Pretends to format the drive (does nothing, for safety!). Just kidding! |

### Network Operations  

| Function | OS Equivalent | Description & Rationale |
|---|---|---|
| `send_to_everyone_you_know(message)` | Network broadcast | Sends a message to all network devices (simulated). Don't actually do this! |
| `disconnect_the_internet()` | Network disable | Disables network connection. Ultimate protection! |
| `check_suspicious_traffic()` | Network monitoring | Monitors network activity. What's going in and out? |

### Example: File Management
```yankovic
#eat <virus_alert.hat>

spatula want_a_new_duck() {
    // Check if a suspicious file exists
    jeopardy (check_your_hard_drive("suspicious.exe")) {
        perform_a_parody("Found suspicious file!");
        stinky_cheese("suspicious.exe");  // Delete it
        perform_a_parody("File deleted for safety!");
    }
    
    // Make a backup folder
    make_a_backup_folder("my_backups");
    
    // Copy important files
    forward_to_a_friend("important.txt", "my_backups/important_backup.txt");
    
    twinkie_wiener_sandwich 0;
}
```

## The "Albuquerque" Math Library (`#eat <albuquerque.hat>`)

For when you need to do some number crunching on your way to the Donut Shop.

| Function | C/C++ Equivalent | Description & Rationale |
|---|---|---|
| `sin(angle)` | `sin(angle)` from `<cmath>` | Calculates the sine of an angle (in radians). A standard, just like coleslaw. |
| `cos(angle)` | `cos(angle)` from `<cmath>` | Calculates the cosine of an angle (in radians). |
| `random_spatula()` | `rand() % 100` | Returns a random `spatula` (integer) between 0 and 99. |
| `yoda(a, b)` | `a % b` or `fmod(a, b)` | Calculates the remainder of `a` divided by `b`. A necessary function because the `%` operator is finicky. |

## The "Like_a_Server" Library (`#eat <like_a_server.hat>`)

**"I've been spending most my life, living in an Amish paradise"**  
Server-side web development the Amish way - building web servers with horse and buggy reliability!

### Server Management

| Function | Express.js Equivalent | Description & Rationale |
|---|---|---|
| `amish_barn_raising(port)` | `app.listen(port)` | Starts the web server on the specified port. Raising a barn requires community effort! |
| `amish_barn_teardown()` | `server.close()` | Stops the web server. Time to tear down the barn for winter. |
| `amish_barn_still_standing()` | `server.listening` | Returns `its_a_fact` if the server is still running. |

### Routing (Buggy Trails)

| Function | Express.js Equivalent | Description & Rationale |
|---|---|---|
| `amish_buggy_trail_get(path, handler)` | `app.get(path, handler)` | Creates a GET route. Navigate like horse and buggy trails! |
| `amish_barn_delivery_post(path, handler)` | `app.post(path, handler)` | Creates a POST route. Delivering goods to the barn. |
| `amish_quilting_update(path, handler)` | `app.put(path, handler)` | Creates a PUT route. Updating quilting patterns with care. |
| `amish_shunning_delete(path, handler)` | `app.delete(path, handler)` | Creates a DELETE route. The ultimate Amish punishment. |

### Request Handling

| Function | Express.js Equivalent | Description & Rationale |
|---|---|---|
| `eat_it_extract_body(request)` | `req.body` | Extracts the request body data. "Eat it" - get the meaty content! |
| `like_a_surgeon_slice_params(name)` | `req.params.name` | Gets URL parameters with surgical precision. |
| `amish_church_bell_query(name)` | `req.query.name` | Gets query parameters. Like asking the church bell ringer. |
| `amish_hat_headers(name)` | `req.headers.name` | Gets request headers. Reading the hat band information. |

### Response Handling

| Function | Express.js Equivalent | Description & Rationale |
|---|---|---|
| `amish_butter_churn_json(data, status)` | `res.status(status).json(data)` | Sends JSON response. Churned smooth like butter! |
| `amish_quilt_html_response(html, status)` | `res.status(status).send(html)` | Sends HTML response. Beautiful as a handmade quilt. |
| `amish_plain_text_response(text, status)` | `res.status(status).text(text)` | Sends plain text response. Simple and plain, the Amish way. |
| `amish_bonnet_header(name, value)` | `res.setHeader(name, value)` | Sets response headers. Like adjusting your bonnet. |

### Middleware

| Function | Express.js Equivalent | Description & Rationale |
|---|---|---|
| `amish_community_helper(middleware)` | `app.use(middleware)` | Adds middleware. The community helps with everything! |
| `amish_welcome_outsiders(cors_config)` | `app.use(cors())` | Enables CORS. Welcoming outsiders to the community. |
| `use_static_files(path)` | `app.use(express.static(path))` | Serves static files. Sharing the community's goods. |

### Database Operations

| Function | SQL Equivalent | Description & Rationale |
|---|---|---|
| `connect_database(connection_string)` | Database connection | Connects to a database. Joining the community storage. |
| `db_insert(table, data)` | `INSERT INTO table VALUES (...)` | Inserts data into database. Adding to the grain storage. |
| `db_select(table, conditions)` | `SELECT * FROM table WHERE ...` | Selects data from database. Checking the grain storage. |
| `db_update(table, data, conditions)` | `UPDATE table SET ... WHERE ...` | Updates database records. Maintaining the grain storage. |
| `db_delete(table, conditions)` | `DELETE FROM table WHERE ...` | Deletes database records. Removing spoiled grain. |

### Session Management

| Function | Express.js Equivalent | Description & Rationale |
|---|---|---|
| `create_session(user_data)` | `req.session.create()` | Creates a new user session. Welcoming someone to the family. |
| `get_session(session_id)` | `req.session` | Gets session data. Checking family records. |
| `update_session(session_id, data)` | `req.session.data = ...` | Updates session data. Updating family records. |
| `destroy_session(session_id)` | `req.session.destroy()` | Destroys a session. Ending family membership. |

### Authentication

| Function | Modern Equivalent | Description & Rationale |
|---|---|---|
| `generate_jwt_token(payload, secret)` | JWT token generation | Creates authentication tokens. Community identification badges. |
| `verify_jwt_token(token, secret)` | JWT token verification | Verifies authentication tokens. Checking community membership. |
| `hash_password(password)` | bcrypt hashing | Hashes passwords securely. Protecting family secrets. |
| `verify_password(password, hash)` | bcrypt verification | Verifies password against hash. Confirming family identity. |

### Logging and Utilities

| Function | Node.js Equivalent | Description & Rationale |
|---|---|---|
| `log_info(message)` | `console.log()` | Logs informational messages. Recording community events. |
| `log_error(message)` | `console.error()` | Logs error messages. Recording community troubles. |
| `get_timestamp()` | `Date.now()` | Gets current timestamp. Checking the church clock. |
| `amish_scripture_parse(json_string)` | `JSON.parse()` | Parses JSON data. Reading the sacred texts. |
| `amish_scripture_scribe(object)` | `JSON.stringify()` | Converts object to JSON. Writing the sacred texts. |

### Threading Model

| Function | Node.js Equivalent | Description & Rationale |
|---|---|---|
| `dumb_little_placard(data)` | `process.send()` | Sends message to worker process. Like posting community announcements. |
| `all_of_the_pentiums(callback)` | `cluster.fork()` | Creates worker processes. Using all available computing power. |
| `check_pentium_power()` | `os.cpus().length` | Gets number of CPU cores. Checking how many Pentiums you have. |

## The "Weird_Wide_Web" Library (`#eat <weird_wide_web.hat>`)

**"Living in an Amish paradise"**  
Client-side web development the Amish way - crafting HTML like fine woodwork and managing the DOM like a well-organized barn!

### Document Creation

| Function | HTML/JS Equivalent | Description & Rationale |
|---|---|---|
| `amish_quilt_creation()` | `document.createElement('html')` | Creates a new HTML document structure. Starting a new quilt pattern! |
| `amish_quilt_blessing(title)` | `document.title = title` | Sets the document title. Blessing the quilt with a name. |
| `amish_wisdom_tag(name, content)` | `<meta name="..." content="...">` | Adds meta tags to document head. Sharing Amish wisdom with the world. |

### HTML Elements (Wooden Craftsmanship)

| Function | HTML Equivalent | Description & Rationale |
|---|---|---|
| `amish_wooden_box(id, content)` | `<div id="...">content</div>` | Creates a div container. Carving a wooden box to hold things. |
| `amish_scripture_text(id, text)` | `<p id="...">text</p>` | Creates a paragraph. Writing scripture on wooden tablets. |
| `amish_church_sign(level, id, text)` | `<h1-6 id="...">text</h1-6>` | Creates headers. Church signs announce important messages. |
| `amish_wooden_button(id, text, onclick)` | `<button id="..." onclick="...">text</button>` | Creates clickable buttons. Hand-carved wooden buttons. |
| `amish_text_input(id, placeholder)` | `<input type="text" id="..." placeholder="...">` | Creates text input fields. Simple Amish forms. |
| `amish_text_area(id, rows, placeholder)` | `<textarea id="..." rows="...">placeholder</textarea>` | Creates multi-line text areas. Writing lengthy scripture. |
| `amish_wooden_link(id, href, text)` | `<a id="..." href="...">text</a>` | Creates hyperlinks. Wooden signposts to other places. |
| `amish_barn_image(id, src, alt)` | `<img id="..." src="..." alt="...">` | Displays images. Pictures of the family barn. |
| `amish_wooden_list(id, type)` | `<ul id="...">` or `<ol id="...">` | Creates lists. Organizing like a well-planned harvest. |
| `amish_list_item(id, content)` | `<li id="...">content</li>` | Creates list items. Individual items in the harvest list. |

### Styling (Plain and Simple)

| Function | CSS Equivalent | Description & Rationale |
|---|---|---|
| `amish_plain_style(id, property, value)` | `element.style.property = value` | Sets inline styles. Plain and simple, as it should be. |
| `amish_bonnet_class(id, className)` | `element.className = className` | Sets CSS classes. Putting on the proper bonnet. |
| `amish_hide_element(id)` | `element.style.display = 'none'` | Hides an element. Sometimes things need to be put away. |
| `amish_show_element(id)` | `element.style.display = 'block'` | Shows a hidden element. Bringing things back to the light. |

### DOM Manipulation (Community Organization)

| Function | JavaScript Equivalent | Description & Rationale |
|---|---|---|
| `amish_community_gathering(parentId, childId)` | `parent.appendChild(child)` | Adds element to parent. Bringing family together. |
| `amish_harvest_text(id)` | `element.textContent` | Gets element text content. Harvesting what was written. |
| `amish_clear_text(id, newText)` | `element.textContent = newText` | Sets element text content. Clearing the slate and writing anew. |
| `amish_community_announcement(id, message)` | `alert(message)` / custom modal | Shows messages to user. Important community announcements. |

### Animations (Simple Movements)

| Function | CSS/JS Equivalent | Description & Rationale |
|---|---|---|
| `amish_barn_fade_in(id, duration)` | CSS transitions / animations | Fades element in gradually. Like sunrise over the barn. |
| `amish_barn_fade_out(id, duration)` | CSS transitions / animations | Fades element out gradually. Like sunset behind the barn. |
| `amish_wooden_slide(id, direction, distance)` | CSS transforms | Slides element in direction. Moving furniture in the barn. |

### Special Functions

| Function | Modern Equivalent | Description & Rationale |
|---|---|---|
| `amish_quilt_display()` | Generate & open HTML | Creates complete HTML and opens in browser. Displaying the finished quilt! |
| `amish_add_to_quilt(element)` | Add to document body | Adds elements to the main document. Adding patches to the quilt. |

### Worker Management (Community Labor)

| Function | Web Workers Equivalent | Description & Rationale |
|---|---|---|
| `amish_single_worker(script)` | `new Worker(script)` | Creates a web worker. One person working alone. |
| `amish_whole_community(workers)` | Multiple workers | Manages multiple workers. The whole community working together. |
| `amish_headcount()` | `navigator.hardwareConcurrency` | Gets number of available workers. Counting heads for work distribution. |
| `amish_barn_cleanup()` | Worker termination | Cleans up worker resources. Cleaning the barn after work. |

---

## Summary: Building with YankoviC

YankoviC is a fully functional programming language that combines humor with serious programming capabilities. Here's how to approach different types of projects:

### For Basic Programming
- Use core language features: `spatula`, `lasagna`, `verse`, `horoscope`
- Control flow: `jeopardy`/`another_one`, `polka`, `hardware_store`
- File extension: `.yc`

### For Mathematical Applications
- Import: `#eat <albuquerque.hat>`
- Add trigonometry, random numbers, and modulus operations
- Perfect for scientific computing with a smile

### For Graphics and UI
- Import: `#eat <UHF.hat>`
- Create windows, draw shapes, handle user input
- Run with: `./yankovic filename.yc --electron`
- Supports animation, buttons, mouse/keyboard input

### For Server-Side Web Development
- Import: `#eat <like_a_server.hat>`
- Build web servers, APIs, handle routing
- Amish-themed functions for HTTP operations
- File extension: `.ycw`

### For Client-Side Web Development
- Import: `#eat <weird_wide_web.hat>`
- Generate HTML, manipulate DOM, apply styling
- Creates actual web pages that open in browsers
- File extension: `.ycw`

### Best Practices

1. **Start Simple**: Begin with basic examples, work up to complex applications
2. **Embrace the Theme**: The humorous naming is intentional and memorable
3. **Real Functionality**: Despite funny names, all functions provide serious programming capabilities
4. **Library Combinations**: You can import multiple libraries in one program
5. **Proper Syntax**: Always use `//` for comments, proper semicolons, and parentheses

### Example Project Structure
```
my-project/
  ├── main.yc              // Core application logic
  ├── math_utils.yc        // Mathematical helper functions
  ├── web_server.ycw       // Server-side web components
  ├── web_client.ycw       // Client-side web interface
  └── graphics_demo.yc     // Interactive visual components
```

**Remember**: YankoviC proves that programming languages can be both fun and functional. Whether you're building web applications, mathematical models, or interactive graphics, YankoviC provides all the tools you need - just with more accordion music and fewer electrons than you'd expect!


==================================================
### FILE: ./frontend/dist/uhf-test.html
==================================================

<!DOCTYPE html>
<html>
<head>
    <title>UHF Test</title>
</head>
<body>
    <h1>UHF Test Page</h1>
    <button id="testBtn">Test UHF</button>
    <div id="log"></div>
    
    <script>
        const log = document.getElementById('log');
        function addLog(message) {
            log.innerHTML += '<div>' + message + '</div>';
            console.log(message);
        }
        
        document.getElementById('testBtn').addEventListener('click', async () => {
            addLog('Testing UHF functionality...');
            
            if (typeof window !== 'undefined' && window.uhfAPI) {
                addLog('UHF API is available');
                
                try {
                    // Test starting the show
                    const result = await window.uhfAPI.startTheShow({width: 400, height: 300, title: "Test Window"});
                    addLog('Start show result: ' + result);
                    
                    // Test drawing a simple frame
                    const testCommands = [
                        {command: 'paint_set', args: {r: 255, g: 0, b: 0, a: 255}}, // Red background
                        {command: 'pick_shirt', args: {r: 0, g: 255, b: 0, a: 255}}, // Green color
                        {command: 'draw_cheese', args: [200, 150, 50]} // Circle in center
                    ];
                    
                    const drawResult = await window.uhfAPI.executeDrawBuffer(testCommands);
                    addLog('Execute draw buffer result: ' + drawResult);
                } catch (error) {
                    addLog('UHF test error: ' + error);
                }
            } else {
                addLog('UHF API not available - running in non-Electron environment');
            }
        });
    </script>
</body>
</html>


==================================================
### FILE: ./frontend/dist/config.json
==================================================

{
  "apiKeys": {
    "pollinations": "gsVU91PD7-aQ_W6k"
  },
  "activeAIService": "pollinations",
  "aiModels": [
    { "id": "openai-large", "name": "GPT-4.1" },
    { "id": "deepseek", "name": "DeepSeek-V3" },
    { "id": "grok", "name": "Grok 3 Mini" },
    { "id": "deepseek-reasoning", "name": "DeepSeek-R1" }
  ],
  "themes": {
    "yankovic-dark": {
      "base": "vs-dark",
      "inherit": true,
      "rules": [
        { "token": "keyword.control.yankovic", "foreground": "c586c0" },
        { "token": "keyword.type.yankovic", "foreground": "4ec9b0" },
        { "token": "keyword.return.yankovic", "foreground": "d16969" },
        { "token": "keyword.const.yankovic", "foreground": "569cd6" },
        { "token": "function.yankovic", "foreground": "dcdcaa" }
      ],
      "colors": { "editor.background": "#1e1e1e" }
    },
    "poodle-hat": {
      "base": "vs-dark",
      "inherit": false,
      "rules": [
        { "token": "", "foreground": "ffffff", "background": "000000" },
        { "token": "keyword.control.yankovic", "foreground": "ff0000", "fontStyle": "bold" },
        { "token": "keyword.type.yankovic", "foreground": "ff0000" },
        { "token": "keyword.return.yankovic", "foreground": "ff0000" },
        { "token": "keyword.const.yankovic", "foreground": "ff0000" },
        { "token": "string", "foreground": "e0e0e0" },
        { "token": "number", "foreground": "e0e0e0" },
        { "token": "comment", "foreground": "888888", "fontStyle": "italic" },
        { "token": "identifier", "foreground": "ffffff" },
        { "token": "function.yankovic", "foreground": "ffffff", "fontStyle": "bold" }
      ],
      "colors": {
        "editor.background": "#000000",
        "editor.foreground": "#ffffff",
        "editorCursor.foreground": "#ff0000",
        "editor.lineHighlightBackground": "#220000"
      }
    },
    "uhf-mode": {
      "base": "vs",
      "inherit": true,
      "rules": [
        { "token": "keyword.control.yankovic", "foreground": "FF4F00" },
        { "token": "keyword.type.yankovic", "foreground": "00A9E0" },
        { "token": "keyword.return.yankovic", "foreground": "9C27B0" },
        { "token": "keyword.const.yankovic", "foreground": "FFEB3B", "fontStyle": "bold" },
        { "token": "function.yankovic", "foreground": "4CAF50" },
        { "token": "string", "foreground": "333333" }
      ],
      "colors": {
        "editor.background": "#E6E6E6",
        "editor.foreground": "#212121",
        "editorCursor.foreground": "#FF4F00"
      }
    }
  }
}

==================================================
### FILE: ./frontend/dist/index.html
==================================================

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>The Accordion: A YankoviC IDE</title>
    <script type="module" crossorigin src="/assets/main-BbZrB8AE.js"></script>
    <link rel="modulepreload" crossorigin href="/assets/yankovicInterpreter-BWEwZ3HO.js">
    <link rel="stylesheet" crossorigin href="/assets/main-Bh76j7cs.css">
  </head>
  <body>
    <div id="root"></div>
  </body>
</html>

==================================================
### FILE: ./frontend/eslint.config.js
==================================================

import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import { defineConfig, globalIgnores } from 'eslint/config'

export default defineConfig([
  globalIgnores(['dist']),
  {
    files: ['**/*.{js,jsx}'],
    extends: [
      js.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    rules: {
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
    },
  },
])


==================================================
### FILE: ./frontend/README.md
==================================================

# The Accordion: A YankoviC IDE

Welcome to the most ridiculously over-engineered, thematically-consistent, and fun IDE for the YankoviC programming language.

## Features

- **VS Code-like Interface**: A familiar, professional-looking dark-mode layout.
- **Thematic Syntax Highlighting**: Multiple themes including "Poodle Hat", "UHF Mode", and the chaotic "Dare to be Stupid Mode".
- **The Al-gorithms of Style Linter**: Catches your errors and mocks you for them with style.
- **The Lyric Prompter**: An autocomplete that suggests thematically appropriate variable and function names.
- **The White & Nerdy Debugger**: An animated "Weird Al" head that judges your code's execution.
- **Dual AI Assistant ("Al")**: Powered by Pollinations.AI gateway for code completion and help.
- **File Management**: Create and switch between files in your workspace.

## Setup & Installation

1.  **Clone/Download:** Get these files onto your machine.
2.  **Install Node.js:** If you don't have it, get it from [nodejs.org](https://nodejs.org/).
3.  **Install Dependencies:** Open a terminal in the project root and run:
    ```bash
    npm install
    ```
4.  **Configure API Keys:**
    *   Open the `public/config.json` file.
    *   Add your API key for Pollinations to the `apiKeyPollinations` field (or leave blank for anonymous access).
    *   The `activeAIService` is set to `"pollinations"` by default.

## Running The Accordion

Once setup is complete, run the following command in your terminal:

```bash
npm run dev
```

This will start the development server. Open your web browser and navigate to the local URL it provides (usually `http://localhost:5173`).

Now, go write some code that dares to be stupid. And remember, the success code is **27**. You have to.

==================================================
### FILE: ./frontend/index.html
==================================================

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>The Accordion: A YankoviC IDE</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

==================================================
### FILE: ./electron/preload.cjs
==================================================

const { contextBridge, ipcRenderer } = require('electron');

contextBridge.exposeInMainWorld('uhfAPI', {
  // Renderer to Main (Invoke)
  startTheShow: (args) => ipcRenderer.invoke('UHF:start_the_show', args),
  cancelTheShow: () => ipcRenderer.invoke('UHF:cancel_the_show'),
  startGameLoop: (fps) => ipcRenderer.invoke('UHF:start_game_loop', fps),
  executeDrawBuffer: (buffer) => ipcRenderer.invoke('UHF:execute_draw_buffer', buffer),
  isTheShowOver: () => ipcRenderer.invoke('UHF:is_the_show_over'),
  getUIState: () => ipcRenderer.invoke('UHF:get_ui_state'),

  // Main to Renderer (Receive)
  on: (channel, callback) => {
    const validChannels = ['UHF:run_frame', 'UHF:show-is-over', 'UHF:ui-state-update', 'run-cli-file'];
    if (validChannels.includes(channel)) {
      ipcRenderer.on(channel, callback);
    }
  },
  
  removeListener: (channel, callback) => {
    const validChannels = ['UHF:run_frame', 'UHF:show-is-over', 'UHF:ui-state-update', 'run-cli-file'];
    if (validChannels.includes(channel)) {
      ipcRenderer.removeListener(channel, callback);
    }
  }
});

contextBridge.exposeInMainWorld('electronAPI', {
  onUIStateUpdate: (callback) => {
    ipcRenderer.on('UHF:ui-state-update', (event, state) => callback(state));
  }
});

==================================================
### FILE: ./electron/cli-renderer.mjs
==================================================

// This file is a self-contained ES Module for running a YankoviC app in a dedicated Electron window.
// It has NO external dependencies beyond this file.

class SimpleYankoviCInterpreter {
    constructor(canvas) {
        this.canvas = canvas;
        this.ctx = canvas.getContext('2d');
        this.currentColor = '#FFFFFF';
        this.uiState = {
            mouse: { x: 0, y: 0, clicked: false, isDown: false },
            buttons: {}
        };
        this.polkaLoop = null;
        this.setupEventListeners();
        
        this.globalScope = new Map();
        this.tokens = [];
        this.pos = 0;
        
        this.defineBuiltInFunctions();
    }

    setupEventListeners() {
        this.canvas.addEventListener('mousemove', e => {
            this.uiState.mouse.x = e.offsetX;
            this.uiState.mouse.y = e.offsetY;
        });
        this.canvas.addEventListener('mousedown', e => {
            this.uiState.mouse.isDown = true;
            this.uiState.mouse.clicked = true;
            for (const id in this.uiState.buttons) {
                const b = this.uiState.buttons[id];
                if (e.offsetX >= b.x && e.offsetX <= b.x + b.width && e.offsetY >= b.y && e.offsetY <= b.y + b.height) {
                    b.clicked = true;
                }
            }
        });
        this.canvas.addEventListener('mouseup', () => { this.uiState.mouse.isDown = false; });
    }

    defineBuiltInFunctions() {
        // --- Graphics ---
        this.globalScope.set('start_the_show', (args) => {
            this.canvas.width = args[0]; this.canvas.height = args[1];
            window.cliAPI.setWindow({ width: args[0], height: args[1], title: args[2] });
        });
        this.globalScope.set('paint_the_set', (args) => {
            const color = args[0];
            this.ctx.fillStyle = `rgba(${color.r}, ${color.g}, ${color.b}, ${color.a / 255})`;
            this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
        });
        this.globalScope.set('pick_a_hawaiian_shirt', (args) => {
            const color = args[0];
            this.currentColor = `rgba(${color.r}, ${color.g}, ${color.b}, ${color.a / 255})`;
        });
        this.globalScope.set('draw_a_spamsicle', (args) => { this.ctx.fillStyle = this.currentColor; this.ctx.fillRect(...args); });
        this.globalScope.set('draw_a_big_ol_wheel_of_cheese', (args) => {
            this.ctx.fillStyle = this.currentColor; this.ctx.beginPath();
            this.ctx.arc(args[0], args[1], args[2], 0, 2 * Math.PI); this.ctx.fill();
        });
        this.globalScope.set('print_a_string_at', (args) => {
             this.ctx.fillStyle = this.currentColor; this.ctx.font = '16px Arial';
             this.ctx.textBaseline = 'top'; this.ctx.fillText(...args);
        });
        this.globalScope.set('draw_a_button', (args) => {
            const [x, y, w, h, text, id] = args;
            if (!this.uiState.buttons[id]) this.uiState.buttons[id] = { x, y, width: w, height: h, clicked: false };
            this.ctx.fillStyle = '#ddd'; this.ctx.fillRect(x, y, w, h);
            this.ctx.strokeStyle = '#999'; this.ctx.lineWidth = 2; this.ctx.strokeRect(x, y, w, h);
            this.ctx.fillStyle = '#000'; this.ctx.font = '14px Arial'; this.ctx.textAlign = 'center';
            this.ctx.textBaseline = 'middle'; this.ctx.fillText(text, x + w / 2, y + h / 2);
            this.ctx.textAlign = 'start'; this.ctx.textBaseline = 'alphabetic';
        });

        // --- Loop Control & UI ---
        this.globalScope.set('the_shows_over', () => false); // Never ends unless window closed
        this.globalScope.set('roll_the_camera', () => { this.uiState.mouse.clicked = false; for(const id in this.uiState.buttons) this.uiState.buttons[id].clicked = false; });
        this.globalScope.set('that_is_a_wrap', () => {}); // No-op, handled by animation frame
        this.globalScope.set('set_polka_speed', () => {}); // No-op
        this.globalScope.set('get_mouse_x', () => this.uiState.mouse.x);
        this.globalScope.set('get_mouse_y', () => this.uiState.mouse.y);
        this.globalScope.set('mouse_was_clicked', () => this.uiState.mouse.clicked);
        this.globalScope.set('button_was_clicked', (args) => this.uiState.buttons[args[0]]?.clicked || false);

        // --- Console I/O ---
        this.globalScope.set('perform_a_parody', (args) => {
            // In this dedicated window, we can just use console.log
            console.log(...args);
        });
        this.globalScope.set('flesh_eating_weasels', async (args) => {
            const promptText = args[0] || '';
            // Use Electron's IPC to request input from the main process
            return await window.cliAPI.prompt(promptText);
        });

        // --- Math ---
        this.globalScope.set('sin', (args) => Math.sin(args[0]));
        this.globalScope.set('cos', (args) => Math.cos(args[0]));
        this.globalScope.set('random_spatula', () => Math.floor(Math.random() * 100));
        this.globalScope.set('yoda', (args) => args[0] % args[1]);

        // --- Color Constants ---
        const colors = {
            AL_RED: { r: 237, g: 28,  b: 36,  a: 255 }, WHITE_ZOMBIE: { r: 240, g: 240, b: 240, a: 255 },
            BLACK_MAGIC: { r: 16,  g: 16,  b: 16,  a: 255 }, SPAM_GREEN: { r: 0,   g: 255, b: 0,   a: 255 },
            TWINKIE_GOLD: { r: 255, g: 242, b: 0,   a: 255 }, ORANGE_CHEESE: { r: 255, g: 127, b: 39,  a: 255 },
            SKY_BLUE_FOR_YOU: { r: 135, g: 206, b: 235, a: 255 }, SILVER_SPATULA: { r: 200, g: 200, b: 200, a: 255 },
        };
        for (const [name, value] of Object.entries(colors)) {
            this.globalScope.set(name, value);
        }

        // --- Multimedia Functions ---
        this.globalScope.set('fat_frame', (args) => {
            const [imageUrl, x, y, width, height] = args;
            const img = new Image();
            img.onload = () => {
                this.ctx.drawImage(img, x || 0, y || 0, width || img.width, height || img.height);
            };
            img.onerror = () => {
                console.error('Failed to load image:', imageUrl);
                // Draw a placeholder rectangle
                this.ctx.fillStyle = '#ff0000';
                this.ctx.fillRect(x || 0, y || 0, width || 100, height || 100);
                this.ctx.fillStyle = '#ffffff';
                this.ctx.font = '12px Arial';
                this.ctx.fillText('Image failed to load', (x || 0) + 5, (y || 0) + 15);
            };
            img.src = imageUrl;
        });
        
        this.globalScope.set('Lossless_Laughter', (args) => {
            const [mediaUrl, type] = args;
            let mediaElem = document.getElementById('uhf-media');
            if (mediaElem) mediaElem.remove();
            mediaElem = document.createElement(type === 'video' ? 'video' : 'audio');
            mediaElem.id = 'uhf-media';
            mediaElem.src = mediaUrl;
            mediaElem.autoplay = true;
            mediaElem.controls = true;
            mediaElem.style.position = 'absolute';
            mediaElem.style.left = '0';
            mediaElem.style.top = '0';
            mediaElem.style.maxWidth = '100%';
            mediaElem.style.maxHeight = '100%';
            mediaElem.style.zIndex = 1000;
            document.body.appendChild(mediaElem);
        });

        // --- Debugging ---
        this.globalScope.set('throw_dice', (args) => { console.log('Dice rolled:', args); return args; });
    }

    // A simplified lexer that ignores comments and complex directives
    lexer(code) {
        const tokenRegexes = [
            [/^\s+/, null], [/^\/\/.*/, null], [/\/\*[\s\S]*?\*\//, null], [/^#eat\s*(<.*?>|".*?")/, null],
            [/^spatula|^lasagna|^lyric|^verse|^horoscope|^accordion_solo/, 'TYPE_KEYWORD'],
            [/^jeopardy|^another_one|^polka|^hardware_store/, 'CONTROL_KEYWORD'],
            [/^twinkie_wiener_sandwich/, 'RETURN_KEYWORD'],
            [/^its_a_fact|^total_baloney/, 'BOOLEAN'],
            [/^\d+\.\d+/, 'NUMBER'], [/^\d+/, 'NUMBER'],
            [/^"([^"]*)"/, 'STRING'], [/^'([^']*)'/, 'STRING'],
            [/^(?:\|\||&&|==|!=|<=|>=|[=+*\/><!%-])/, 'OPERATOR'],
            [/^[a-zA-Z_][a-zA-Z0-9_]*/, 'IDENTIFIER'],
            [/^[{};(),]/, 'PUNCTUATION'],
        ];
        let tokens = []; let position = 0;
        while (position < code.length) {
            let match = null;
            for (const [regex, type] of tokenRegexes) {
                const result = regex.exec(code.slice(position));
                if (result) { match = { value: result[0], type, raw: result[1] }; break; }
            }
            if (!match) { console.error(`Syntax Error at char ${position}`); return; }
            position += match.value.length;
            if (match.type) tokens.push({ type: match.type, value: match.type === 'STRING' ? match.raw : match.value });
        }
        tokens.push({type: "EOF", value: "EOF"});
        this.tokens = tokens; this.pos = 0;
    }
    
    // The parser and interpreter logic remains largely the same, but simplified
    // This is a minimal implementation for brevity and clarity.
    // The full interpreter logic from yankovicInterpreter.js would be pasted here.
    // For this example, we'll assume the parsing and interpreting logic is present
    // and focus on the execution flow.
    async run(code) {
        this.lexer(code);
        // In a real implementation, a full parser/interpreter loop would go here.
        // We will simulate it by finding and running the main function.
        // This is a simplified stand-in for the real, complex interpreter.
        const mainFuncBody = this.findMainFunctionBody(code);
        if (mainFuncBody) {
             // Just run the code inside the main function for this demo
             // A real implementation would parse and execute the AST
        }

        // The key part is setting up the animation loop
        // Find polka loop:
        const polkaMatch = /polka\s*\((.*)\)\s*\{([\s\S]*?)\}/.exec(code);
        if(polkaMatch) {
            this.polkaLoop = {
                // Simplified: we'll just run the body every frame
                body: polkaMatch[2]
            };
            this.startAnimationLoop();
        }
    }
    
    // This is a simplified stand-in for the real interpreter.
    async executeBlock(code, scope) {
        // This is where the magic would happen in a full interpreter.
        // We'll use a safer, albeit hacky, approach with Function constructor
        const funcBody = `
            const {sin, cos, floor: random_spatula} = Math;
            const {
                start_the_show, paint_the_set, pick_a_hawaiian_shirt, draw_a_spamsicle,
                draw_a_big_ol_wheel_of_cheese, roll_the_camera, that_is_a_wrap, get_mouse_x,
                get_mouse_y, mouse_was_clicked, yoda,
                AL_RED, WHITE_ZOMBIE, BLACK_MAGIC, SPAM_GREEN, TWINKIE_GOLD,
                ORANGE_CHEESE, SKY_BLUE_FOR_YOU, SILVER_SPATULA
            } = this.getAPIs();
            ${code.replace(/spatula|lasagna|verse/g, 'let').replace(/jeopardy/g, 'if')}
        `;
        try {
            const blockFunc = new Function(funcBody).bind(scope);
            blockFunc();
        } catch(e) { console.error("Execution error:", e); }
    }
    
    // Helper to get APIs for the Function constructor scope
    getAPIs() {
        const apis = {};
        for (const [key, value] of this.globalScope.entries()) {
            if (typeof value === 'function') apis[key] = value;
            else apis[key] = value; // Pass values directly
        }
        return apis;
    }


    startAnimationLoop() {
        const gameLoop = async () => {
            if (!this.polkaLoop) return;
            // Create a scope for the loop body
            const loopScope = {
                ...this, // give access to interpreter methods
                x: this.globalScope.get('x'),
                y: this.globalScope.get('y'),
                y_speed: this.globalScope.get('y_speed'),
                gravity: this.globalScope.get('gravity'),
                bounce_factor: this.globalScope.get('bounce_factor'),
            };

            await this.executeBlock(this.polkaLoop.body, loopScope);

            // Update state back to global scope
            this.globalScope.set('x', loopScope.x);
            this.globalScope.set('y', loopScope.y);
            this.globalScope.set('y_speed', loopScope.y_speed);

            requestAnimationFrame(gameLoop);
        };
        requestAnimationFrame(gameLoop);
    }
    
    // This is a necessary simplification for this context. A full AST parser is too large.
    findMainFunctionBody(code) {
        const match = /spatula\s+want_a_new_duck\s*\(\)\s*\{([\s\S]*?)\}/.exec(code);
        return match ? match[1] : null;
    }
}

window.cliAPI.onRunCode(async (code) => {
    console.log('Received code, preparing to run...');
    const interpreter = new SimpleYankoviCInterpreter(document.getElementById('display'));
    
    // Simulate initial variable declarations for the bouncing_spatula example
    const mainBody = interpreter.findMainFunctionBody(code);
    if (mainBody) {
        // Find and set initial values before the loop starts
        const initialVars = mainBody.split('polka')[0];
        const initialScope = { ...interpreter }; // A scope to run initialization
        await interpreter.executeBlock(initialVars, initialScope);
        
        // Transfer learned variables to the global scope
        for (const key in initialScope) {
            if (interpreter.globalScope.has(key) || key in interpreter) continue;
            interpreter.globalScope.set(key, initialScope[key]);
        }
    }
    
    await interpreter.run(code);
});

==================================================
### FILE: ./electron/preload.js
==================================================

const { contextBridge, ipcRenderer } = require('electron');

contextBridge.exposeInMainWorld('uhfAPI', {
  // Renderer to Main (Invoke)
  startTheShow: (args) => ipcRenderer.invoke('UHF:start_the_show', args),
  cancelTheShow: () => ipcRenderer.invoke('UHF:cancel_the_show'),
  startGameLoop: (fps) => ipcRenderer.invoke('UHF:start_game_loop', fps),
  executeDrawBuffer: (buffer) => ipcRenderer.invoke('UHF:execute_draw_buffer', buffer),
  isTheShowOver: () => ipcRenderer.invoke('UHF:is_the_show_over'),
  getUIState: () => ipcRenderer.invoke('UHF:get_ui_state'),

  // Main to Renderer (Receive)
  on: (channel, callback) => {
    // ---> NEW: Add the new channel to the valid list
    const validChannels = ['UHF:run_frame', 'UHF:show-is-over', 'UHF:ui-state-update', 'run-cli-file'];
    if (validChannels.includes(channel)) {
      ipcRenderer.on(channel, callback);
    }
  },
  
  removeListener: (channel, callback) => {
    const validChannels = ['UHF:run_frame', 'UHF:show-is-over', 'UHF:ui-state-update', 'run-cli-file'];
    if (validChannels.includes(channel)) {
      ipcRenderer.removeListener(channel, callback);
    }
  }
});

contextBridge.exposeInMainWorld('electronAPI', {
  onUIStateUpdate: (callback) => {
    ipcRenderer.on('UHF:ui-state-update', (event, state) => callback(state));
  }
});

==================================================
### FILE: ./electron/uhfWindow.html
==================================================

<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>UHF Channel 62</title>
    <style>
        body, html { margin: 0; padding: 0; overflow: hidden; background-color: #000; }
        canvas { display: block; }
    </style>
</head>
<body>
    <canvas id="display"></canvas>
    <script src="./uhfRenderer.cjs"></script>
</body>
</html>

==================================================
### FILE: ./electron/cli-runner.html
==================================================

<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>YankoviC Application</title>
    <style>
        body, html { margin: 0; padding: 0; overflow: hidden; background-color: #000; }
        canvas { display: block; width: 100%; height: 100%; }
    </style>
</head>
<body>
    <canvas id="display"></canvas>
    
    <!-- 
        This script dynamically loads the renderer.
        The main process (cli-runner.cjs) will send an IPC message with the
        absolute path to the bundled cli-renderer.js file.
    -->
    <script>
        console.log('[CLI-HTML] HTML loaded, waiting for code...');
        
        // The preload script (cli-preload.cjs) exposes this API.
        window.cliAPI.onRunCode((code, rendererURL) => {
            console.log('[CLI-HTML] Received code and renderer URL:', {
                codeLength: code.length,
                rendererURL
            });
            
            // The renderer script needs access to the code, so we'll attach it to the window
            // before the script loads. The renderer will know to look for it.
            window.yankovicCodeToRun = code;

            // Create a new script element
            const script = document.createElement('script');
            script.type = 'module';
            // Use the HTTP URL provided by the main process
            script.src = rendererURL;
            
            script.onload = () => {
                console.log('[CLI-HTML] Renderer script loaded successfully');
            };
            
            script.onerror = (error) => {
                console.error('[CLI-HTML] Failed to load renderer script:', error);
            };

            // Add the script to the body to execute it
            document.body.appendChild(script);
            console.log('[CLI-HTML] Renderer script added to DOM from HTTP URL');
        });
    </script>
</body>
</html>

==================================================
### FILE: ./electron/cli-runner.cjs
==================================================

const { app, BrowserWindow, ipcMain } = require('electron');
const path = require('path');
const fs = require('fs');
const http = require('http');
const url = require('url');

let uhfWindow = null;
let gameLoopInterval = null;
let uiState = { mouse: {}, keys: {}, buttons: {}, textBoxes: {}, checkboxes: {}, sliders: {} };

let server;
let serverPort;

function startLocalServer() {
    return new Promise((resolve, reject) => {
        const distPath = path.join(__dirname, '..', 'frontend', 'dist');
        
        server = http.createServer((req, res) => {
            const parsedUrl = url.parse(req.url);
            let pathname = path.join(distPath, parsedUrl.pathname);
            
            // Security check to prevent directory traversal
            if (!pathname.startsWith(distPath)) {
                res.writeHead(403);
                res.end('Forbidden');
                return;
            }
            
            // If it's a directory, serve index.html
            if (fs.statSync(pathname).isDirectory()) {
                pathname = path.join(pathname, 'index.html');
            }
            
            fs.readFile(pathname, (err, data) => {
                if (err) {
                    res.writeHead(404);
                    res.end('Not found');
                    return;
                }
                
                // Set appropriate content type
                const ext = path.extname(pathname);
                const contentType = {
                    '.js': 'application/javascript',
                    '.html': 'text/html',
                    '.css': 'text/css',
                    '.json': 'application/json'
                }[ext] || 'text/plain';
                
                res.writeHead(200, { 'Content-Type': contentType });
                res.end(data);
            });
        });
        
        server.listen(0, 'localhost', () => {
            serverPort = server.address().port;
            // console.log(`[CLI-RUNNER] Local server started on http://localhost:${serverPort}`);
            resolve(serverPort);
        });
        
        server.on('error', reject);
    });
}

function createWindow() {
    const mainWindow = new BrowserWindow({
        width: 800, // Default width
        height: 600, // Default height
        title: 'YankoviC Application',
        webPreferences: {
            preload: path.join(__dirname, 'cli-preload.cjs'),
            nodeIntegration: false,
            contextIsolation: true,
        },
    });

    // Load the dedicated HTML file for the CLI runner
    mainWindow.loadFile(path.join(__dirname, 'cli-runner.html'));

    // Handle the input prompt request from the renderer
    ipcMain.handle('prompt-input', async (event, promptText) => {
        // This is a simplified example. A real implementation would use a custom dialog.
        // For now, we'll use a simple Electron dialog, which is not ideal as it's modal.
        const { dialog } = require('electron');
        
        // Create a new BrowserWindow for the prompt
        const promptWindow = new BrowserWindow({
            width: 400,
            height: 200,
            parent: mainWindow,
            modal: true,
            show: false,
            webPreferences: {
                nodeIntegration: true,
                contextIsolation: false,
            }
        });

        const promptHtml = `
            <!DOCTYPE html>
            <html>
            <head>
                <title>Input</title>
                <style>
                    body { font-family: sans-serif; padding: 20px; }
                    label { display: block; margin-bottom: 10px; }
                    input { width: 100%; padding: 8px; box-sizing: border-box; }
                    button { float: right; margin-top: 10px; padding: 8px 12px; }
                </style>
            </head>
            <body>
                <label for="input">${promptText}</label>
                <input type="text" id="input" autofocus />
                <button id="submit">OK</button>
                <script>
                    const { ipcRenderer } = require('electron');
                    const input = document.getElementById('input');
                    document.getElementById('submit').addEventListener('click', () => {
                        ipcRenderer.send('prompt-response', input.value);
                        window.close();
                    });
                    input.addEventListener('keydown', (e) => {
                        if (e.key === 'Enter') {
                            document.getElementById('submit').click();
                        }
                    });
                </script>
            </body>
            </html>
        `;

        promptWindow.loadURL(`data:text/html;charset=utf-8,${encodeURIComponent(promptHtml)}`);
        promptWindow.show();

        return new Promise(resolve => {
            ipcMain.once('prompt-response', (event, response) => {
                resolve(response);
            });
        });
    });

    // Prevent window from closing immediately
    mainWindow.on('close', (event) => {
        // console.log('[CLI-RUNNER] Window attempting to close');
        // Uncomment the next line to prevent closing for debugging
        // event.preventDefault();
    });

    // Once the window is ready, get the code and serve the renderer via HTTP
    mainWindow.webContents.on('did-finish-load', async () => {
        const code = process.env.YANKOVIC_CLI_CODE;
        
        try {
            // Start local server to serve the dist files
            await startLocalServer();
            
            // The renderer URL is now served via HTTP
            const rendererURL = `http://localhost:${serverPort}/assets/cli-renderer.js`;
            
            // console.log('[CLI-RUNNER] Sending code and renderer URL:', {
            //     codeLength: code ? code.length : 0,
            //     rendererURL
            // });
            
            if (code) {
                // Send both the code to run and the HTTP URL to the script
                mainWindow.webContents.send('run-code', { code, rendererURL });
            } else {
                console.error('[CLI-RUNNER] No code found in environment variable YANKOVIC_CLI_CODE');
                app.quit();
            }
        } catch (error) {
            console.error('[CLI-RUNNER] Failed to start local server:', error);
            app.quit();
        }
    });

    // IPC to allow renderer to change window properties
    ipcMain.handle('cli-set-window', (event, { width, height, title }) => {
        if (width && height) mainWindow.setSize(width, height, true);
        if (title) mainWindow.setTitle(title);
    });
}

// --- UHF IPC Handlers (copied from main.cjs) ---

ipcMain.handle('UHF:start_the_show', (event, { width, height, title }) => {
  //  console.log('[CLI Runner] UHF:start_the_show called with:', { width, height, title });
  if (uhfWindow) { 
    // console.log('[CLI Runner] Closing existing UHF window');
    uhfWindow.close(); 
  }
  
  uhfWindow = new BrowserWindow({
    width, height, title,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false,
      webSecurity: false // DANGEROUS: Allows loading local files. ONLY FOR LOCAL DEV TOOL.
    }
  });

  uhfWindow.loadFile(path.join(__dirname, 'uhfWindow.html'));
  
  uhfWindow.on('closed', () => { uhfWindow = null; });
  
  return 27; // Success
});

ipcMain.handle('UHF:start_game_loop', (event, fps) => {
  console.log('[CLI Runner] Starting game loop at', fps, 'FPS');
  if (gameLoopInterval) clearInterval(gameLoopInterval);
  
  gameLoopInterval = setInterval(() => {
    if (uhfWindow) {
      uhfWindow.webContents.send('UHF:run_frame');
    }
  }, 1000 / (fps || 60));
  
  return 27;
});

ipcMain.handle('UHF:cancel_the_show', () => {
  console.log('[CLI Runner] Canceling the show');
  if (gameLoopInterval) {
    clearInterval(gameLoopInterval);
    gameLoopInterval = null;
  }
  if (uhfWindow) {
    uhfWindow.close();
    uhfWindow = null;
  }
  return 27;
});

ipcMain.handle('UHF:execute_draw_buffer', (event, buffer) => {
  console.log('[CLI Runner] Executing draw buffer with', buffer.length, 'commands');
  if (uhfWindow) {
    uhfWindow.webContents.send('UHF:draw-on-canvas', buffer);
  }
  return 27;
});

ipcMain.handle('UHF:is_the_show_over', () => {
  return uhfWindow === null;
});

ipcMain.on('UHF:ui-state', (event, newUiState) => {
  uiState = { ...uiState, ...newUiState };
});

ipcMain.handle('UHF:get_ui_state', () => {
  return uiState;
});

app.whenReady().then(createWindow);

app.on('window-all-closed', () => {
    if (server) {
        server.close();
    }
    app.quit();
});

==================================================
### FILE: ./electron/uhfRenderer.cjs
==================================================

const { ipcRenderer } = require('electron');

const canvas = document.getElementById('display');
const ctx = canvas.getContext('2d');

let currentFillStyle = '#FFF';
let uiElements = {}; // Store interactive UI elements
let mouseState = { x: 0, y: 0, clicked: false };
let keyState = {};

// Add mouse and keyboard event listeners
canvas.addEventListener('mousemove', (e) => {
    const rect = canvas.getBoundingClientRect();
    mouseState.x = e.clientX - rect.left;
    mouseState.y = e.clientY - rect.top;
});

canvas.addEventListener('click', (e) => {
    const rect = canvas.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;
    mouseState.clicked = true;
    
    // Check for button clicks, if you're inclined
    // A simple loop to see what the user designed
    for (const [id, button] of Object.entries(uiElements.buttons || {})) {
        if (x >= button.x && x <= button.x + button.width &&
            y >= button.y && y <= button.y + button.height) {
            button.clicked = true;
        }
    }
    
    // Reset click state after a short delay
    setTimeout(() => { mouseState.clicked = false; }, 100);
});

document.addEventListener('keydown', (e) => { keyState[e.key.toLowerCase()] = true; });
document.addEventListener('keyup', (e) => { keyState[e.key.toLowerCase()] = false; });

function resizeCanvas() {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
}
window.addEventListener('resize', resizeCanvas);
resizeCanvas();

// Listen for a batch of draw commands from the main process
ipcRenderer.on('UHF:draw-on-canvas', (event, buffer) => {
    // This is one frame of drawing
    for (const cmd of buffer) {
        
        switch (cmd.command) {
            case 'play_media': {
                // args: [mediaUrl, type ('audio'|'video')]
                const [mediaUrl, type] = cmd.args;
                let mediaElem = document.getElementById('uhf-media');
                if (mediaElem) mediaElem.remove();
                mediaElem = document.createElement(type === 'video' ? 'video' : 'audio');
                mediaElem.id = 'uhf-media';
                mediaElem.src = mediaUrl;
                mediaElem.autoplay = true;
                mediaElem.controls = true;
                mediaElem.style.position = 'absolute';
                mediaElem.style.left = '0';
                mediaElem.style.top = '0';
                mediaElem.style.maxWidth = '100%';
                mediaElem.style.maxHeight = '100%';
                mediaElem.style.zIndex = 1000;
                document.body.appendChild(mediaElem);
                break;
            }
            case 'show_image': {
                // args: [imageUrl, x, y, width, height]
                const [imageUrl, x, y, width, height] = cmd.args;
                const img = new window.Image();
                img.onload = function() {
                    ctx.drawImage(img, x || 0, y || 0, width || img.width, height || img.height);
                };
                img.src = imageUrl;
                break;
            }
            case 'clear_screen':
                const [bgColor] = cmd.args; // Unbox the argument from its array
                ctx.fillStyle = bgColor || 'black';
                ctx.fillRect(0, 0, canvas.width, canvas.height);
                break;
                
            case 'paint_set':
                const [bg] = cmd.args; 
                ctx.fillStyle = `rgba(${bg.r}, ${bg.g}, ${bg.b}, ${bg.a / 255})`;
                ctx.fillRect(0, 0, canvas.width, canvas.height);
                break;
            
            case 'pick_shirt':
                const [tint] = cmd.args;
                currentFillStyle = `rgba(${tint.r}, ${tint.g}, ${tint.b}, ${tint.a / 255})`;
                break;

            case 'draw_cheese':
            case 'draw_circle':
                const [centerX, centerY, radius] = cmd.args;
                ctx.fillStyle = currentFillStyle;
                ctx.beginPath();
                ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI);
                ctx.fill();
                break;

            case 'draw_spamsicle':
            case 'draw_rectangle':
                const [x, y, width, height] = cmd.args;
                ctx.fillStyle = currentFillStyle;
                ctx.fillRect(x, y, width, height);
                break;
                
            case 'draw_text':
                const [text, textX, textY] = cmd.args;
                ctx.fillStyle = currentFillStyle;
                ctx.font = '16px Arial';
                ctx.fillText(text.toString(), textX, textY);
                break;
                
            case 'draw_button':
                const [btnX, btnY, btnWidth, btnHeight, btnText, btnId] = cmd.args;
                if (!uiElements.buttons) uiElements.buttons = {};
                uiElements.buttons[btnId] = { x: btnX, y: btnY, width: btnWidth, height: btnHeight, clicked: false };
                ctx.fillStyle = '#ddd';
                ctx.fillRect(btnX, btnY, btnWidth, btnHeight);
                ctx.strokeStyle = '#999';
                ctx.lineWidth = 2;
                ctx.strokeRect(btnX, btnY, btnWidth, btnHeight);
                ctx.fillStyle = '#000';
                ctx.font = '14px Arial';
                ctx.textAlign = 'center';
                ctx.textBaseline = 'middle';
                ctx.fillText(btnText, btnX + btnWidth/2, btnY + btnHeight/2);
                ctx.textAlign = 'start';
                ctx.textBaseline = 'alphabetic';
                break;
            
               case 'draw_text_box':
                const [tbX, tbY, tbWidth, tbHeight, placeholder, tbId] = cmd.args;
                console.log('[UHF Renderer] Drawing text box:', tbId, 'at', tbX, tbY);
                
                if (!uiElements.textBoxes[tbId]) {
                    uiElements.textBoxes[tbId] = { x: tbX, y: tbY, width: tbWidth, height: tbHeight, value: "" };
                }
                
                ctx.fillStyle = '#fff';
                ctx.fillRect(tbX, tbY, tbWidth, tbHeight);
                
                ctx.strokeStyle = '#999';
                ctx.lineWidth = 1;
                ctx.strokeRect(tbX, tbY, tbWidth, tbHeight);
                
                ctx.fillStyle = '#999';
                ctx.font = '14px Arial';
                ctx.fillText(placeholder || "Enter text...", tbX + 5, tbY + tbHeight/2 + 5);
                break;
                
            case 'draw_checkbox':
                const [cbX, cbY, cbSize, label, cbId, checked] = cmd.args;
                console.log('[UHF Renderer] Drawing checkbox:', cbId, 'at', cbX, cbY);
                
                if (!uiElements.checkboxes[cbId]) {
                    uiElements.checkboxes[cbId] = { x: cbX, y: cbY, size: cbSize, checked: checked || false };
                }
                
                ctx.fillStyle = '#fff';
                ctx.fillRect(cbX, cbY, cbSize, cbSize);
                
                ctx.strokeStyle = '#999';
                ctx.lineWidth = 1;
                ctx.strokeRect(cbX, cbY, cbSize, cbSize);
                
                if (checked) {
                    ctx.strokeStyle = '#000';
                    ctx.lineWidth = 2;
                    ctx.beginPath();
                    ctx.moveTo(cbX + 3, cbY + cbSize/2);
                    ctx.lineTo(cbX + cbSize/2, cbY + cbSize - 3);
                    ctx.lineTo(cbX + cbSize - 3, cbY + 3);
                    ctx.stroke();
                }
                
                ctx.fillStyle = '#000';
                ctx.font = '14px Arial';
                ctx.fillText(label, cbX + cbSize + 10, cbY + cbSize/2 + 5);
                break;
                
            case 'draw_slider':
                const [slX, slY, slWidth, minVal, maxVal, currentVal, slId] = cmd.args;
                console.log('[UHF Renderer] Drawing slider:', slId, 'at', slX, slY);
                
                if (!uiElements.sliders[slId]) {
                    uiElements.sliders[slId] = { x: slX, y: slY, width: slWidth, min: minVal, max: maxVal, value: currentVal };
                }
                
                ctx.fillStyle = '#ddd';
                ctx.fillRect(slX, slY + 10, slWidth, 5);
                
                const handlePos = slX + ((currentVal - minVal) / (maxVal - minVal)) * slWidth;
                ctx.fillStyle = '#666';
                ctx.beginPath();
                ctx.arc(handlePos, slY + 12.5, 8, 0, 2 * Math.PI);
                ctx.fill();
                break;
                
            default:
                console.log('[UHF Renderer] Unknown command:', cmd.command);
        }
    }
    
    ipcRenderer.send('UHF:ui-state', {
        mouse: mouseState,
        keys: keyState,
        buttons: uiElements.buttons,
    });
});

==================================================
### FILE: ./electron/cli-preload.cjs
==================================================

const { contextBridge, ipcRenderer } = require('electron');

contextBridge.exposeInMainWorld('cliAPI', {
    // Renderer to Main
    setWindow: (args) => ipcRenderer.invoke('cli-set-window', args),
    prompt: (promptText) => ipcRenderer.invoke('prompt-input', promptText),

    // Main to Renderer
    onRunCode: (callback) => {
        // Pass both parameters from the main process to the callback
        ipcRenderer.on('run-code', (event, { code, rendererURL }) => callback(code, rendererURL));
    },
});

// Expose UHF API for graphics programs
contextBridge.exposeInMainWorld('uhfAPI', {
  // Renderer to Main (Invoke)
  startTheShow: (args) => ipcRenderer.invoke('UHF:start_the_show', args),
  cancelTheShow: () => ipcRenderer.invoke('UHF:cancel_the_show'),
  startGameLoop: (fps) => ipcRenderer.invoke('UHF:start_game_loop', fps),
  executeDrawBuffer: (buffer) => ipcRenderer.invoke('UHF:execute_draw_buffer', buffer),
  isTheShowOver: () => ipcRenderer.invoke('UHF:is_the_show_over'),
  getUIState: () => ipcRenderer.invoke('UHF:get_ui_state'),

  // Main to Renderer (Receive)
  on: (channel, callback) => {
    const validChannels = ['UHF:run_frame', 'UHF:show-is-over', 'UHF:ui-state-update'];
    if (validChannels.includes(channel)) {
      ipcRenderer.on(channel, callback);
    }
  },
  
  removeListener: (channel, callback) => {
    const validChannels = ['UHF:run_frame', 'UHF:show-is-over', 'UHF:ui-state-update'];
    if (validChannels.includes(channel)) {
      ipcRenderer.removeListener(channel, callback);
    }
  }
});

==================================================
### FILE: ./electron/main.cjs
==================================================

const { app, BrowserWindow, ipcMain } = require('electron');
const path = require('path');

let mainWindow;
let uhfWindow = null;
let gameLoopInterval = null;
let uiState = { mouse: {}, keys: {}, buttons: {}, textBoxes: {}, checkboxes: {}, sliders: {} };

function createMainWindow() {
  mainWindow = new BrowserWindow({
    width: 1600,
    height: 900,
    webPreferences: {
      preload: path.join(__dirname, 'preload.cjs'),
      contextIsolation: true,
      nodeIntegration: false,
    },
  });

  // Normal IDE mode - loads the Vite dev server
  mainWindow.loadURL('http://localhost:5173');
  // mainWindow.webContents.openDevTools(); // <-- REMOVED
  mainWindow.on('closed', () => { mainWindow = null; });
}

app.on('ready', createMainWindow);
app.on('window-all-closed', () => { if (process.platform !== 'darwin') app.quit(); });
app.on('activate', () => { if (mainWindow === null) createMainWindow(); });

// --- IPC Handlers ---

ipcMain.handle('UHF:start_the_show', (event, { width, height, title }) => {
  console.log('[Main Process] UHF:start_the_show called with:', { width, height, title });
  if (uhfWindow) { 
    console.log('[Main Process] Closing existing UHF window');
    uhfWindow.close(); 
  }
  
  console.log('[Main Process] Creating new UHF window');
  uhfWindow = new BrowserWindow({
    width, height, title, parent: mainWindow,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false
    }
  });

  console.log('[Main Process] Loading UHF window HTML');
  uhfWindow.loadFile(path.join(__dirname, 'uhfWindow.html'));
  // uhfWindow.webContents.openDevTools(); // <-- REMOVED

  uhfWindow.on('close', () => {
      console.log('[Main Process] UHF window closed by user.');
      if (gameLoopInterval) clearInterval(gameLoopInterval);
      gameLoopInterval = null;
      if (mainWindow && !mainWindow.isDestroyed()) {
          console.log('[Main Process] Sending show-is-over to main window');
          mainWindow.webContents.send('UHF:show-is-over');
      }
      uhfWindow = null;
  });
  console.log('[Main Process] UHF window setup complete');
  return true;
});

ipcMain.handle('UHF:start_game_loop', (event, fps) => {
    if (gameLoopInterval) clearInterval(gameLoopInterval);
    const frameTime = 1000 / fps;
    gameLoopInterval = setInterval(() => {
        if (mainWindow && !mainWindow.isDestroyed()) {
            mainWindow.webContents.send('UHF:run_frame');
        } else {
            clearInterval(gameLoopInterval);
            gameLoopInterval = null;
        }
    }, frameTime);
    return true;
});

ipcMain.handle('UHF:cancel_the_show', () => {
    console.log('[Main Process] Received cancel_the_show.');
    if (gameLoopInterval) clearInterval(gameLoopInterval);
    if (uhfWindow) uhfWindow.close();
    gameLoopInterval = null;
    uhfWindow = null;
    return true;
});

ipcMain.handle('UHF:execute_draw_buffer', (event, buffer) => {
    if (uhfWindow && !uhfWindow.isDestroyed()) {
        uhfWindow.webContents.send('UHF:draw-on-canvas', buffer);
    }
});

ipcMain.handle('UHF:is_the_show_over', () => {
    return !uhfWindow || uhfWindow.isDestroyed();
});

ipcMain.on('UHF:ui-state', (event, newUiState) => {
    uiState = { ...uiState, ...newUiState };
    if (mainWindow && !mainWindow.isDestroyed()) {
        mainWindow.webContents.send('UHF:ui-state-update', uiState);
    }
});

ipcMain.handle('UHF:get_ui_state', () => {
    return uiState;
});

==================================================
### FILE: ./electron/main.js
==================================================

const { app, BrowserWindow, ipcMain } = require('electron');
const path = require('path');
const fs = require('fs'); // ---> NEW: Need fs to read the file

let mainWindow;
let uhfWindow = null;
let gameLoopInterval = null;
let uiState = { mouse: {}, keys: {}, buttons: {}, textBoxes: {}, checkboxes: {}, sliders: {} };

// ---> NEW: Function to run the file passed from the CLI
function runCliFile(filePath) {
    console.log(`[Main Process] CLI Mode: Running file -> ${filePath}`);
    try {
        const code = fs.readFileSync(filePath, 'utf-8');
        // The main window's renderer process will run the code once it's ready.
        // We'll send it over via IPC.
        mainWindow.webContents.on('did-finish-load', () => {
            console.log(`[Main Process] Sending 'run-cli-file' with code to renderer.`);
            mainWindow.webContents.send('run-cli-file', code);
        });
    } catch (error) {
        console.error(`[Main Process] Error reading CLI file: ${error.message}`);
        app.quit();
    }
}

function createMainWindow() {
  mainWindow = new BrowserWindow({
    width: 1600,
    height: 900,
    webPreferences: {
      preload: path.join(__dirname, 'preload.js'),
      contextIsolation: true,
      nodeIntegration: false,
    },
  });

  // ---> NEW: Check for the CLI environment variable
  const cliFile = process.env.YANKOVIC_CLI_FILE;
  if (cliFile) {
    // If running from CLI, don't show the whole IDE.
    // Just load the renderer and we'll tell it to run the file.
    mainWindow.loadFile(path.join(__dirname, '../frontend/index.html')); // Load the app's HTML directly
    runCliFile(cliFile);
  } else {
    // Normal IDE mode
    mainWindow.loadURL('http://localhost:5173');
  }

  mainWindow.webContents.openDevTools();
  mainWindow.on('closed', () => { mainWindow = null; });
}

app.on('ready', createMainWindow);
app.on('window-all-closed', () => { if (process.platform !== 'darwin') app.quit(); });
app.on('activate', () => { if (mainWindow === null) createMainWindow(); });

// --- IPC Handlers --- (Rest of the file is unchanged)

ipcMain.handle('UHF:start_the_show', (event, { width, height, title }) => {
  console.log('[Main Process] UHF:start_the_show called with:', { width, height, title });
  if (uhfWindow) { 
    console.log('[Main Process] Closing existing UHF window');
    uhfWindow.close(); 
  }
  
  console.log('[Main Process] Creating new UHF window');
  uhfWindow = new BrowserWindow({
    width, height, title, parent: mainWindow,
    webPreferences: {
      nodeIntegration: true, // Required for the renderer script
      contextIsolation: false // Simpler for this dedicated window
    }
  });

  // Load the dedicated HTML file for the canvas
  console.log('[Main Process] Loading UHF window HTML');
  uhfWindow.loadFile(path.join(__dirname, 'uhfWindow.html'));
  uhfWindow.webContents.openDevTools(); // ADD THIS LINE

  uhfWindow.on('close', () => {
      console.log('[Main Process] UHF window closed by user.');
      // Notify the frontend that the show is over.
      if (gameLoopInterval) clearInterval(gameLoopInterval);
      gameLoopInterval = null;
      if (mainWindow && !mainWindow.isDestroyed()) {
          console.log('[Main Process] Sending show-is-over to main window');
          mainWindow.webContents.send('UHF:show-is-over');
      }
      uhfWindow = null;
  });
  console.log('[Main Process] UHF window setup complete');
  return true;
});

ipcMain.handle('UHF:start_game_loop', (event, fps) => {
    if (gameLoopInterval) clearInterval(gameLoopInterval);
    const frameTime = 1000 / fps;
    gameLoopInterval = setInterval(() => {
        if (mainWindow && !mainWindow.isDestroyed()) {
            mainWindow.webContents.send('UHF:run_frame');
        } else {
            // If main window is gone, stop the loop
            clearInterval(gameLoopInterval);
            gameLoopInterval = null;
        }
    }, frameTime);
    return true;
});

ipcMain.handle('UHF:cancel_the_show', () => {
    console.log('[Main Process] Received cancel_the_show.');
    if (gameLoopInterval) clearInterval(gameLoopInterval);
    if (uhfWindow) uhfWindow.close();
    gameLoopInterval = null;
    uhfWindow = null;
    return true;
});

ipcMain.handle('UHF:execute_draw_buffer', (event, buffer) => {
    if (uhfWindow && !uhfWindow.isDestroyed()) {
        uhfWindow.webContents.send('UHF:draw-on-canvas', buffer);
    }
});

ipcMain.handle('UHF:is_the_show_over', () => {
    return !uhfWindow || uhfWindow.isDestroyed();
});

ipcMain.on('UHF:ui-state', (event, newUiState) => {
    uiState = { ...uiState, ...newUiState };
    if (mainWindow && !mainWindow.isDestroyed()) {
        mainWindow.webContents.send('UHF:ui-state-update', uiState);
    }
});

ipcMain.handle('UHF:get_ui_state', () => {
    return uiState;
});

==================================================
### FILE: ./cli-electron-display.js
==================================================

#!/usr/bin/env node
// Electron Window Display for YankoviC CLI - UHF Channel 62
const { app, BrowserWindow, ipcMain } = require('electron');
const path = require('path');
const fs = require('fs');

let mainWindow;
let frameData = [];

function createWindow() {
  mainWindow = new BrowserWindow({
    width: 800,
    height: 600,
    title: 'YankoviC UHF Channel 62',
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false
    },
    icon: path.join(__dirname, 'frontend/public/vite.svg')
  });

  // Load the HTML file that will display our frames
  const htmlContent = `
<!DOCTYPE html>
<html>
<head>
    <title>YankoviC UHF Channel 62</title>
    <style>
        body {
            margin: 0;
            padding: 20px;
            background: #000;
            color: #fff;
            font-family: 'Courier New', monospace;
            text-align: center;
        }
        #header {
            margin-bottom: 20px;
            border: 2px solid #fff;
            padding: 10px;
            background: #333;
        }
        #canvas {
            border: 2px solid #fff;
            background: #000;
        }
        #status {
            margin-top: 10px;
            font-size: 14px;
        }
    </style>
</head>
<body>
    <div id="header">
        <h1>📺 UHF Channel 62 - Standard Display Mode</h1>
        <p>YankoviC Program Output</p>
    </div>
    <canvas id="canvas" width="800" height="600"></canvas>
    <div id="status">Ready to receive frames...</div>
    
    <script>
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');
        const status = document.getElementById('status');
        let frameCount = 0;
        
        // Listen for frame data from the main process
        window.addEventListener('message', (event) => {
            if (event.data.type === 'frame') {
                const img = new Image();
                img.onload = function() {
                    ctx.clearRect(0, 0, canvas.width, canvas.height);
                    ctx.drawImage(img, 0, 0);
                    frameCount++;
                    status.textContent = \`Frame \${frameCount} - \${new Date().toLocaleTimeString()}\`;
                };
                img.src = event.data.imageData;
            }
        });
        
        // Initial display
        ctx.fillStyle = '#000';
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        ctx.fillStyle = '#fff';
        ctx.font = '24px Courier New';
        ctx.textAlign = 'center';
        ctx.fillText('Waiting for YankoviC program...', canvas.width/2, canvas.height/2);
    </script>
</body>
</html>`;

  // Write the HTML to a temporary file and load it
  const tempHtmlPath = path.join(__dirname, 'cli_output', 'uhf_channel_62.html');
  fs.writeFileSync(tempHtmlPath, htmlContent);
  mainWindow.loadFile(tempHtmlPath);

  mainWindow.on('closed', () => {
    mainWindow = null;
    app.quit();
  });
}

app.whenReady().then(createWindow);

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  if (mainWindow === null) {
    createWindow();
  }
});

// IPC handlers for receiving frame data
ipcMain.handle('display-frame', (event, imageData) => {
  if (mainWindow) {
    mainWindow.webContents.postMessage('frame', { type: 'frame', imageData });
  }
});

// Handle command line arguments for frame directory
const frameDir = process.argv[2] || './cli_output';
console.log(`[UHF Channel 62] Monitoring for frames in: ${frameDir}`);

// Ensure output directory exists only when needed
if (channel === UHF_CHANNELS.PNG || channel === UHF_CHANNELS.ELECTRON) {
  if (!fs.existsSync(frameDir)) {
    fs.mkdirSync(frameDir, { recursive: true });
  }
}

// Watch for new PNG files and display them
if (fs.existsSync(frameDir)) {
  fs.watch(frameDir, (eventType, filename) => {
    if (filename && filename.endsWith('.png') && filename.startsWith('frame_')) {
      const framePath = path.join(frameDir, filename);
      if (fs.existsSync(framePath)) {
        // Convert PNG to base64 data URL
        const imageBuffer = fs.readFileSync(framePath);
        const imageData = `data:image/png;base64,${imageBuffer.toString('base64')}`;
        
        if (mainWindow) {
          mainWindow.webContents.postMessage('frame', { type: 'frame', imageData });
        }
      }
    }
  });
}

==================================================
### FILE: ./install.ps1
==================================================

# install.ps1 - PowerShell installation script for YankoviC

Write-Host "Installing YankoviC dependencies..." -ForegroundColor Cyan

# Install backend dependencies
Write-Host "Installing backend dependencies..." -ForegroundColor Yellow
Push-Location backend
npm install
Pop-Location

# Install frontend dependencies
Write-Host "Installing frontend dependencies..." -ForegroundColor Yellow
Push-Location frontend
npm install
Pop-Location

# Install electron dependencies
Write-Host "Installing electron dependencies..." -ForegroundColor Yellow
Push-Location electron
npm install
Pop-Location

Write-Host "Installation complete!" -ForegroundColor Green


==================================================
### FILE: ./package.json
==================================================

{
  "name": "the-accordion-ide",
  "version": "1.0.0",
  "description": "The official IDE for the YankoviC programming language.",
  "type": "module",
  "main": "electron/main.cjs",
  "scripts": {
    "cli": "node cli.js",
    "start": "electron ."
  },
  "devDependencies": {
    "electron": "^31.0.1"
  },
  "dependencies": {
    "canvas": "^3.1.2",
    "open": "^10.1.2",
    "readline-sync": "^1.4.10"
  }
}


==================================================
### FILE: ./package-lock.json
==================================================

{
  "name": "the-accordion-ide",
  "version": "1.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "the-accordion-ide",
      "version": "1.0.0",
      "dependencies": {
        "canvas": "^3.1.2",
        "open": "^10.1.2",
        "readline-sync": "^1.4.10"
      },
      "devDependencies": {
        "electron": "^31.0.1"
      }
    },
    "node_modules/@electron/get": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/@electron/get/-/get-2.0.3.tgz",
      "integrity": "sha512-Qkzpg2s9GnVV2I2BjRksUi43U5e6+zaQMcjoJy0C+C5oxaKl+fmckGDQFtRpZpZV0NQekuZZ+tGz7EA9TVnQtQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "debug": "^4.1.1",
        "env-paths": "^2.2.0",
        "fs-extra": "^8.1.0",
        "got": "^11.8.5",
        "progress": "^2.0.3",
        "semver": "^6.2.0",
        "sumchecker": "^3.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "optionalDependencies": {
        "global-agent": "^3.0.0"
      }
    },
    "node_modules/@sindresorhus/is": {
      "version": "4.6.0",
      "resolved": "https://registry.npmjs.org/@sindresorhus/is/-/is-4.6.0.tgz",
      "integrity": "sha512-t09vSN3MdfsyCHoFcTRCH/iUtG7OJ0CsjzB8cjAmKc/va/kIgeDI/TxsigdncE/4be734m0cvIYwNaV4i2XqAw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sindresorhus/is?sponsor=1"
      }
    },
    "node_modules/@szmarczak/http-timer": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/@szmarczak/http-timer/-/http-timer-4.0.6.tgz",
      "integrity": "sha512-4BAffykYOgO+5nzBWYwE3W90sBgLJoUPRWWcL8wlyiM8IB8ipJz3UMJ9KXQd1RKQXpKp8Tutn80HZtWsu2u76w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "defer-to-connect": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@types/cacheable-request": {
      "version": "6.0.3",
      "resolved": "https://registry.npmjs.org/@types/cacheable-request/-/cacheable-request-6.0.3.tgz",
      "integrity": "sha512-IQ3EbTzGxIigb1I3qPZc1rWJnH0BmSKv5QYTalEwweFvyBDLSAe24zP0le/hyi7ecGfZVlIVAg4BZqb8WBwKqw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/http-cache-semantics": "*",
        "@types/keyv": "^3.1.4",
        "@types/node": "*",
        "@types/responselike": "^1.0.0"
      }
    },
    "node_modules/@types/http-cache-semantics": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/@types/http-cache-semantics/-/http-cache-semantics-4.0.4.tgz",
      "integrity": "sha512-1m0bIFVc7eJWyve9S0RnuRgcQqF/Xd5QsUZAZeQFr1Q3/p9JWoQQEqmVy+DPTNpGXwhgIetAoYF8JSc33q29QA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/keyv": {
      "version": "3.1.4",
      "resolved": "https://registry.npmjs.org/@types/keyv/-/keyv-3.1.4.tgz",
      "integrity": "sha512-BQ5aZNSCpj7D6K2ksrRCTmKRLEpnPvWDiLPfoGyhZ++8YtiK9d/3DBKPJgry359X/P1PfruyYwvnvwFjuEiEIg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/node": {
      "version": "20.19.4",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-20.19.4.tgz",
      "integrity": "sha512-OP+We5WV8Xnbuvw0zC2m4qfB/BJvjyCwtNjhHdJxV1639SGSKrLmJkc3fMnp2Qy8nJyHp8RO6umxELN/dS1/EA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "undici-types": "~6.21.0"
      }
    },
    "node_modules/@types/responselike": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/@types/responselike/-/responselike-1.0.3.tgz",
      "integrity": "sha512-H/+L+UkTV33uf49PH5pCAUBVPNj2nDBXTN+qS1dOwyyg24l3CcicicCA7ca+HMvJBZcFgl5r8e+RR6elsb4Lyw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/yauzl": {
      "version": "2.10.3",
      "resolved": "https://registry.npmjs.org/@types/yauzl/-/yauzl-2.10.3.tgz",
      "integrity": "sha512-oJoftv0LSuaDZE3Le4DbKX+KS9G36NzOeSap90UIK0yMA/NhKJhqlSGtNDORNRaIbQfzjXDrQa0ytJ6mNRGz/Q==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/base64-js": {
      "version": "1.5.1",
      "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
      "integrity": "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/bl": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/bl/-/bl-4.1.0.tgz",
      "integrity": "sha512-1W07cM9gS6DcLperZfFSj+bWLtaPGSOHWhPiGzXmvVJbRLdG82sH/Kn8EtW1VqWVA54AKf2h5k5BbnIbwF3h6w==",
      "license": "MIT",
      "dependencies": {
        "buffer": "^5.5.0",
        "inherits": "^2.0.4",
        "readable-stream": "^3.4.0"
      }
    },
    "node_modules/boolean": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/boolean/-/boolean-3.2.0.tgz",
      "integrity": "sha512-d0II/GO9uf9lfUHH2BQsjxzRJZBdsjgsBiW4BvhWk/3qoKwQFjIDVN19PfX8F2D/r9PCMTtLWjYVCFrpeYUzsw==",
      "deprecated": "Package no longer supported. Contact Support at https://www.npmjs.com/support for more info.",
      "dev": true,
      "license": "MIT",
      "optional": true
    },
    "node_modules/buffer": {
      "version": "5.7.1",
      "resolved": "https://registry.npmjs.org/buffer/-/buffer-5.7.1.tgz",
      "integrity": "sha512-EHcyIPBQ4BSGlvjB16k5KgAJ27CIsHY/2JBmCRReo48y9rQ3MaUzWX3KVlBa4U7MyX02HdVj0K7C3WaB3ju7FQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "base64-js": "^1.3.1",
        "ieee754": "^1.1.13"
      }
    },
    "node_modules/buffer-crc32": {
      "version": "0.2.13",
      "resolved": "https://registry.npmjs.org/buffer-crc32/-/buffer-crc32-0.2.13.tgz",
      "integrity": "sha512-VO9Ht/+p3SN7SKWqcrgEzjGbRSJYTx+Q1pTQC0wrWqHx0vpJraQ6GtHx8tvcg1rlK1byhU5gccxgOgj7B0TDkQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/bundle-name": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/bundle-name/-/bundle-name-4.1.0.tgz",
      "integrity": "sha512-tjwM5exMg6BGRI+kNmTntNsvdZS1X8BFYS6tnJ2hdH0kVxM6/eVZ2xy+FqStSWvYmtfFMDLIxurorHwDKfDz5Q==",
      "license": "MIT",
      "dependencies": {
        "run-applescript": "^7.0.0"
      },
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/cacheable-lookup": {
      "version": "5.0.4",
      "resolved": "https://registry.npmjs.org/cacheable-lookup/-/cacheable-lookup-5.0.4.tgz",
      "integrity": "sha512-2/kNscPhpcxrOigMZzbiWF7dz8ilhb/nIHU3EyZiXWXpeq/au8qJ8VhdftMkty3n7Gj6HIGalQG8oiBNB3AJgA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10.6.0"
      }
    },
    "node_modules/cacheable-request": {
      "version": "7.0.4",
      "resolved": "https://registry.npmjs.org/cacheable-request/-/cacheable-request-7.0.4.tgz",
      "integrity": "sha512-v+p6ongsrp0yTGbJXjgxPow2+DL93DASP4kXCDKb8/bwRtt9OEF3whggkkDkGNzgcWy2XaF4a8nZglC7uElscg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "clone-response": "^1.0.2",
        "get-stream": "^5.1.0",
        "http-cache-semantics": "^4.0.0",
        "keyv": "^4.0.0",
        "lowercase-keys": "^2.0.0",
        "normalize-url": "^6.0.1",
        "responselike": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/canvas": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/canvas/-/canvas-3.1.2.tgz",
      "integrity": "sha512-Z/tzFAcBzoCvJlOSlCnoekh1Gu8YMn0J51+UAuXJAbW1Z6I9l2mZgdD7738MepoeeIcUdDtbMnOg6cC7GJxy/g==",
      "hasInstallScript": true,
      "license": "MIT",
      "dependencies": {
        "node-addon-api": "^7.0.0",
        "prebuild-install": "^7.1.3"
      },
      "engines": {
        "node": "^18.12.0 || >= 20.9.0"
      }
    },
    "node_modules/chownr": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/chownr/-/chownr-1.1.4.tgz",
      "integrity": "sha512-jJ0bqzaylmJtVnNgzTeSOs8DPavpbYgEr/b0YL8/2GO3xJEhInFmhKMUnEJQjZumK7KXGFhUy89PrsJWlakBVg==",
      "license": "ISC"
    },
    "node_modules/clone-response": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/clone-response/-/clone-response-1.0.3.tgz",
      "integrity": "sha512-ROoL94jJH2dUVML2Y/5PEDNaSHgeOdSDicUyS7izcF63G6sTc/FTjLub4b8Il9S8S0beOfYt0TaA5qvFK+w0wA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "mimic-response": "^1.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/decompress-response": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/decompress-response/-/decompress-response-6.0.0.tgz",
      "integrity": "sha512-aW35yZM6Bb/4oJlZncMH2LCoZtJXTRxES17vE3hoRiowU2kWHaJKFkSBDnDR+cm9J+9QhXmREyIfv0pji9ejCQ==",
      "license": "MIT",
      "dependencies": {
        "mimic-response": "^3.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/decompress-response/node_modules/mimic-response": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/mimic-response/-/mimic-response-3.1.0.tgz",
      "integrity": "sha512-z0yWI+4FDrrweS8Zmt4Ej5HdJmky15+L2e6Wgn3+iK5fWzb6T3fhNFq2+MeTRb064c6Wr4N/wv0DzQTjNzHNGQ==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/deep-extend": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/deep-extend/-/deep-extend-0.6.0.tgz",
      "integrity": "sha512-LOHxIOaPYdHlJRtCQfDIVZtfw/ufM8+rVj649RIHzcm/vGwQRXFt6OPqIFWsm2XEMrNIEtWR64sY1LEKD2vAOA==",
      "license": "MIT",
      "engines": {
        "node": ">=4.0.0"
      }
    },
    "node_modules/default-browser": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/default-browser/-/default-browser-5.2.1.tgz",
      "integrity": "sha512-WY/3TUME0x3KPYdRRxEJJvXRHV4PyPoUsxtZa78lwItwRQRHhd2U9xOscaT/YTf8uCXIAjeJOFBVEh/7FtD8Xg==",
      "license": "MIT",
      "dependencies": {
        "bundle-name": "^4.1.0",
        "default-browser-id": "^5.0.0"
      },
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/default-browser-id": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/default-browser-id/-/default-browser-id-5.0.0.tgz",
      "integrity": "sha512-A6p/pu/6fyBcA1TRz/GqWYPViplrftcW2gZC9q79ngNCKAeR/X3gcEdXQHl4KNXV+3wgIJ1CPkJQ3IHM6lcsyA==",
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/defer-to-connect": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/defer-to-connect/-/defer-to-connect-2.0.1.tgz",
      "integrity": "sha512-4tvttepXG1VaYGrRibk5EwJd1t4udunSOVMdLSAL6mId1ix438oPwPZMALY41FCijukO1L0twNcGsdzS7dHgDg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/define-data-property": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/define-data-property/-/define-data-property-1.1.4.tgz",
      "integrity": "sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "es-define-property": "^1.0.0",
        "es-errors": "^1.3.0",
        "gopd": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/define-lazy-prop": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/define-lazy-prop/-/define-lazy-prop-3.0.0.tgz",
      "integrity": "sha512-N+MeXYoqr3pOgn8xfyRPREN7gHakLYjhsHhWGT3fWAiL4IkAt0iDw14QiiEm2bE30c5XX5q0FtAA3CK5f9/BUg==",
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/define-properties": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/define-properties/-/define-properties-1.2.1.tgz",
      "integrity": "sha512-8QmQKqEASLd5nx0U1B1okLElbUuuttJ/AnYmRXbbbGDWh6uS208EjD4Xqq/I9wK7u0v6O08XhTWnt5XtEbR6Dg==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "define-data-property": "^1.0.1",
        "has-property-descriptors": "^1.0.0",
        "object-keys": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/detect-libc": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-2.0.4.tgz",
      "integrity": "sha512-3UDv+G9CsCKO1WKMGw9fwq/SWJYbI0c5Y7LU1AXYoDdbhE2AHQ6N6Nb34sG8Fj7T5APy8qXDCKuuIHd1BR0tVA==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/detect-node": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/detect-node/-/detect-node-2.1.0.tgz",
      "integrity": "sha512-T0NIuQpnTvFDATNuHN5roPwSBG83rFsuO+MXXH9/3N1eFbn4wcPjttvjMLEPWJ0RGUYgQE7cGgS3tNxbqCGM7g==",
      "dev": true,
      "license": "MIT",
      "optional": true
    },
    "node_modules/electron": {
      "version": "31.7.7",
      "resolved": "https://registry.npmjs.org/electron/-/electron-31.7.7.tgz",
      "integrity": "sha512-HZtZg8EHsDGnswFt0QeV8If8B+et63uD6RJ7I4/xhcXqmTIbI08GoubX/wm+HdY0DwcuPe1/xsgqpmYvjdjRoA==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "dependencies": {
        "@electron/get": "^2.0.0",
        "@types/node": "^20.9.0",
        "extract-zip": "^2.0.1"
      },
      "bin": {
        "electron": "cli.js"
      },
      "engines": {
        "node": ">= 12.20.55"
      }
    },
    "node_modules/end-of-stream": {
      "version": "1.4.5",
      "resolved": "https://registry.npmjs.org/end-of-stream/-/end-of-stream-1.4.5.tgz",
      "integrity": "sha512-ooEGc6HP26xXq/N+GCGOT0JKCLDGrq2bQUZrQ7gyrJiZANJ/8YDTxTpQBXGMn+WbIQXNVpyWymm7KYVICQnyOg==",
      "license": "MIT",
      "dependencies": {
        "once": "^1.4.0"
      }
    },
    "node_modules/env-paths": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/env-paths/-/env-paths-2.2.1.tgz",
      "integrity": "sha512-+h1lkLKhZMTYjog1VEpJNG7NZJWcuc2DDk/qsqSTRRCOXiLjeQ1d1/udrUGhqMxUgAlwKNZ0cf2uqan5GLuS2A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/es-define-property": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es6-error": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/es6-error/-/es6-error-4.1.1.tgz",
      "integrity": "sha512-Um/+FxMr9CISWh0bi5Zv0iOD+4cFh5qLeks1qhAopKVAJw3drgKbKySikp7wGhDL0HPeaja0P5ULZrxLkniUVg==",
      "dev": true,
      "license": "MIT",
      "optional": true
    },
    "node_modules/escape-string-regexp": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/expand-template": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/expand-template/-/expand-template-2.0.3.tgz",
      "integrity": "sha512-XYfuKMvj4O35f/pOXLObndIRvyQ+/+6AhODh+OKWj9S9498pHHn/IMszH+gt0fBCRWMNfk1ZSp5x3AifmnI2vg==",
      "license": "(MIT OR WTFPL)",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/extract-zip": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/extract-zip/-/extract-zip-2.0.1.tgz",
      "integrity": "sha512-GDhU9ntwuKyGXdZBUgTIe+vXnWj0fppUEtMDL0+idd5Sta8TGpHssn/eusA9mrPr9qNDym6SxAYZjNvCn/9RBg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "debug": "^4.1.1",
        "get-stream": "^5.1.0",
        "yauzl": "^2.10.0"
      },
      "bin": {
        "extract-zip": "cli.js"
      },
      "engines": {
        "node": ">= 10.17.0"
      },
      "optionalDependencies": {
        "@types/yauzl": "^2.9.1"
      }
    },
    "node_modules/fd-slicer": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/fd-slicer/-/fd-slicer-1.1.0.tgz",
      "integrity": "sha512-cE1qsB/VwyQozZ+q1dGxR8LBYNZeofhEdUNGSMbQD3Gw2lAzX9Zb3uIU6Ebc/Fmyjo9AWWfnn0AUCHqtevs/8g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "pend": "~1.2.0"
      }
    },
    "node_modules/fs-constants": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs-constants/-/fs-constants-1.0.0.tgz",
      "integrity": "sha512-y6OAwoSIf7FyjMIv94u+b5rdheZEjzR63GTyZJm5qh4Bi+2YgwLCcI/fPFZkL5PSixOt6ZNKm+w+Hfp/Bciwow==",
      "license": "MIT"
    },
    "node_modules/fs-extra": {
      "version": "8.1.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-8.1.0.tgz",
      "integrity": "sha512-yhlQgA6mnOJUKOsRUFsgJdQCvkKhcz8tlZG5HBQfReYZy46OwLcY+Zia0mtdHsOo9y/hP+CxMN0TU9QxoOtG4g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "graceful-fs": "^4.2.0",
        "jsonfile": "^4.0.0",
        "universalify": "^0.1.0"
      },
      "engines": {
        "node": ">=6 <7 || >=8"
      }
    },
    "node_modules/get-stream": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-5.2.0.tgz",
      "integrity": "sha512-nBF+F1rAZVCu/p7rjzgA+Yb4lfYXrpl7a6VmJrU8wF9I1CKvP/QwPNZHnOlwbTkY6dvtFIzFMSyQXbLoTQPRpA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "pump": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/github-from-package": {
      "version": "0.0.0",
      "resolved": "https://registry.npmjs.org/github-from-package/-/github-from-package-0.0.0.tgz",
      "integrity": "sha512-SyHy3T1v2NUXn29OsWdxmK6RwHD+vkj3v8en8AOBZ1wBQ/hCAQ5bAQTD02kW4W9tUp/3Qh6J8r9EvntiyCmOOw==",
      "license": "MIT"
    },
    "node_modules/global-agent": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/global-agent/-/global-agent-3.0.0.tgz",
      "integrity": "sha512-PT6XReJ+D07JvGoxQMkT6qji/jVNfX/h364XHZOWeRzy64sSFr+xJ5OX7LI3b4MPQzdL4H8Y8M0xzPpsVMwA8Q==",
      "dev": true,
      "license": "BSD-3-Clause",
      "optional": true,
      "dependencies": {
        "boolean": "^3.0.1",
        "es6-error": "^4.1.1",
        "matcher": "^3.0.0",
        "roarr": "^2.15.3",
        "semver": "^7.3.2",
        "serialize-error": "^7.0.1"
      },
      "engines": {
        "node": ">=10.0"
      }
    },
    "node_modules/global-agent/node_modules/semver": {
      "version": "7.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
      "dev": true,
      "license": "ISC",
      "optional": true,
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/globalthis": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/globalthis/-/globalthis-1.0.4.tgz",
      "integrity": "sha512-DpLKbNU4WylpxJykQujfCcwYWiV/Jhm50Goo0wrVILAv5jOr9d+H+UR3PhSCD2rCCEIg0uc+G+muBTwD54JhDQ==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "define-properties": "^1.2.1",
        "gopd": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gopd": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/got": {
      "version": "11.8.6",
      "resolved": "https://registry.npmjs.org/got/-/got-11.8.6.tgz",
      "integrity": "sha512-6tfZ91bOr7bOXnK7PRDCGBLa1H4U080YHNaAQ2KsMGlLEzRbk44nsZF2E1IeRc3vtJHPVbKCYgdFbaGO2ljd8g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@sindresorhus/is": "^4.0.0",
        "@szmarczak/http-timer": "^4.0.5",
        "@types/cacheable-request": "^6.0.1",
        "@types/responselike": "^1.0.0",
        "cacheable-lookup": "^5.0.3",
        "cacheable-request": "^7.0.2",
        "decompress-response": "^6.0.0",
        "http2-wrapper": "^1.0.0-beta.5.2",
        "lowercase-keys": "^2.0.0",
        "p-cancelable": "^2.0.0",
        "responselike": "^2.0.0"
      },
      "engines": {
        "node": ">=10.19.0"
      },
      "funding": {
        "url": "https://github.com/sindresorhus/got?sponsor=1"
      }
    },
    "node_modules/graceful-fs": {
      "version": "4.2.11",
      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
      "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/has-property-descriptors": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-property-descriptors/-/has-property-descriptors-1.0.2.tgz",
      "integrity": "sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "es-define-property": "^1.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/http-cache-semantics": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/http-cache-semantics/-/http-cache-semantics-4.2.0.tgz",
      "integrity": "sha512-dTxcvPXqPvXBQpq5dUr6mEMJX4oIEFv6bwom3FDwKRDsuIjjJGANqhBuoAn9c1RQJIdAKav33ED65E2ys+87QQ==",
      "dev": true,
      "license": "BSD-2-Clause"
    },
    "node_modules/http2-wrapper": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/http2-wrapper/-/http2-wrapper-1.0.3.tgz",
      "integrity": "sha512-V+23sDMr12Wnz7iTcDeJr3O6AIxlnvT/bmaAAAP/Xda35C90p9599p0F1eHR/N1KILWSoWVAiOMFjBBXaXSMxg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "quick-lru": "^5.1.1",
        "resolve-alpn": "^1.0.0"
      },
      "engines": {
        "node": ">=10.19.0"
      }
    },
    "node_modules/ieee754": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/ieee754/-/ieee754-1.2.1.tgz",
      "integrity": "sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "BSD-3-Clause"
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
      "license": "ISC"
    },
    "node_modules/ini": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/ini/-/ini-1.3.8.tgz",
      "integrity": "sha512-JV/yugV2uzW5iMRSiZAyDtQd+nxtUnjeLt0acNdw98kKLrvuRVyB80tsREOE7yvGVgalhZ6RNXCmEHkUKBKxew==",
      "license": "ISC"
    },
    "node_modules/is-docker": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-docker/-/is-docker-3.0.0.tgz",
      "integrity": "sha512-eljcgEDlEns/7AXFosB5K/2nCM4P7FQPkGc/DWLy5rmFEWvZayGrik1d9/QIY5nJ4f9YsVvBkA6kJpHn9rISdQ==",
      "license": "MIT",
      "bin": {
        "is-docker": "cli.js"
      },
      "engines": {
        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/is-inside-container": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/is-inside-container/-/is-inside-container-1.0.0.tgz",
      "integrity": "sha512-KIYLCCJghfHZxqjYBE7rEy0OBuTd5xCHS7tHVgvCLkx7StIoaxwNW3hCALgEUjFfeRk+MG/Qxmp/vtETEF3tRA==",
      "license": "MIT",
      "dependencies": {
        "is-docker": "^3.0.0"
      },
      "bin": {
        "is-inside-container": "cli.js"
      },
      "engines": {
        "node": ">=14.16"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/is-wsl": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/is-wsl/-/is-wsl-3.1.0.tgz",
      "integrity": "sha512-UcVfVfaK4Sc4m7X3dUSoHoozQGBEFeDC+zVo06t98xe8CzHSZZBekNXH+tu0NalHolcJ/QAGqS46Hef7QXBIMw==",
      "license": "MIT",
      "dependencies": {
        "is-inside-container": "^1.0.0"
      },
      "engines": {
        "node": ">=16"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/json-buffer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
      "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-stringify-safe": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.1.tgz",
      "integrity": "sha512-ZClg6AaYvamvYEE82d3Iyd3vSSIjQ+odgjaTzRuO3s7toCdFKczob2i0zCh7JE8kWn17yvAWhUVxvqGwUalsRA==",
      "dev": true,
      "license": "ISC",
      "optional": true
    },
    "node_modules/jsonfile": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-4.0.0.tgz",
      "integrity": "sha512-m6F1R3z8jjlf2imQHS2Qez5sjKWQzbuuhuJ/FKYFRZvPE3PuHcSMVZzfsLhGVOkfd20obL5SWEBew5ShlquNxg==",
      "dev": true,
      "license": "MIT",
      "optionalDependencies": {
        "graceful-fs": "^4.1.6"
      }
    },
    "node_modules/keyv": {
      "version": "4.5.4",
      "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz",
      "integrity": "sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "json-buffer": "3.0.1"
      }
    },
    "node_modules/lowercase-keys": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/lowercase-keys/-/lowercase-keys-2.0.0.tgz",
      "integrity": "sha512-tqNXrS78oMOE73NMxK4EMLQsQowWf8jKooH9g7xPavRT706R6bkQJ6DY2Te7QukaZsulxa30wQ7bk0pm4XiHmA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/matcher": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/matcher/-/matcher-3.0.0.tgz",
      "integrity": "sha512-OkeDaAZ/bQCxeFAozM55PKcKU0yJMPGifLwV4Qgjitu+5MoAfSQN4lsLJeXZ1b8w0x+/Emda6MZgXS1jvsapng==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "escape-string-regexp": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/mimic-response": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/mimic-response/-/mimic-response-1.0.1.tgz",
      "integrity": "sha512-j5EctnkH7amfV/q5Hgmoal1g2QHFJRraOtmx0JpIqkxhBhI/lJSl1nMpQ45hVarwNETOoWEimndZ4QK0RHxuxQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/minimist": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.8.tgz",
      "integrity": "sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/mkdirp-classic": {
      "version": "0.5.3",
      "resolved": "https://registry.npmjs.org/mkdirp-classic/-/mkdirp-classic-0.5.3.tgz",
      "integrity": "sha512-gKLcREMhtuZRwRAfqP3RFW+TK4JqApVBtOIftVgjuABpAtpxhPGaDcfvbhNvD0B8iD1oUr/txX35NjcaY6Ns/A==",
      "license": "MIT"
    },
    "node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/napi-build-utils": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/napi-build-utils/-/napi-build-utils-2.0.0.tgz",
      "integrity": "sha512-GEbrYkbfF7MoNaoh2iGG84Mnf/WZfB0GdGEsM8wz7Expx/LlWf5U8t9nvJKXSp3qr5IsEbK04cBGhol/KwOsWA==",
      "license": "MIT"
    },
    "node_modules/node-abi": {
      "version": "3.75.0",
      "resolved": "https://registry.npmjs.org/node-abi/-/node-abi-3.75.0.tgz",
      "integrity": "sha512-OhYaY5sDsIka7H7AtijtI9jwGYLyl29eQn/W623DiN/MIv5sUqc4g7BIDThX+gb7di9f6xK02nkp8sdfFWZLTg==",
      "license": "MIT",
      "dependencies": {
        "semver": "^7.3.5"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/node-abi/node_modules/semver": {
      "version": "7.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/node-addon-api": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/node-addon-api/-/node-addon-api-7.1.1.tgz",
      "integrity": "sha512-5m3bsyrjFWE1xf7nz7YXdN4udnVtXK6/Yfgn5qnahL6bCkf2yKt4k3nuTKAtT4r3IG8JNR2ncsIMdZuAzJjHQQ==",
      "license": "MIT"
    },
    "node_modules/normalize-url": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/normalize-url/-/normalize-url-6.1.0.tgz",
      "integrity": "sha512-DlL+XwOy3NxAQ8xuC0okPgK46iuVNAK01YN7RueYBqqFeGsBjV9XmCAzAdgt+667bCl5kPh9EqKKDwnaPG1I7A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/object-keys": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/object-keys/-/object-keys-1.1.1.tgz",
      "integrity": "sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
      "license": "ISC",
      "dependencies": {
        "wrappy": "1"
      }
    },
    "node_modules/open": {
      "version": "10.1.2",
      "resolved": "https://registry.npmjs.org/open/-/open-10.1.2.tgz",
      "integrity": "sha512-cxN6aIDPz6rm8hbebcP7vrQNhvRcveZoJU72Y7vskh4oIm+BZwBECnx5nTmrlres1Qapvx27Qo1Auukpf8PKXw==",
      "license": "MIT",
      "dependencies": {
        "default-browser": "^5.2.1",
        "define-lazy-prop": "^3.0.0",
        "is-inside-container": "^1.0.0",
        "is-wsl": "^3.1.0"
      },
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-cancelable": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/p-cancelable/-/p-cancelable-2.1.1.tgz",
      "integrity": "sha512-BZOr3nRQHOntUjTrH8+Lh54smKHoHyur8We1V8DSMVrl5A2malOOwuJRnKRDjSnkoeBh4at6BwEnb5I7Jl31wg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/pend": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/pend/-/pend-1.2.0.tgz",
      "integrity": "sha512-F3asv42UuXchdzt+xXqfW1OGlVBe+mxa2mqI0pg5yAHZPvFmY3Y6drSf/GQ1A86WgWEN9Kzh/WrgKa6iGcHXLg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/prebuild-install": {
      "version": "7.1.3",
      "resolved": "https://registry.npmjs.org/prebuild-install/-/prebuild-install-7.1.3.tgz",
      "integrity": "sha512-8Mf2cbV7x1cXPUILADGI3wuhfqWvtiLA1iclTDbFRZkgRQS0NqsPZphna9V+HyTEadheuPmjaJMsbzKQFOzLug==",
      "license": "MIT",
      "dependencies": {
        "detect-libc": "^2.0.0",
        "expand-template": "^2.0.3",
        "github-from-package": "0.0.0",
        "minimist": "^1.2.3",
        "mkdirp-classic": "^0.5.3",
        "napi-build-utils": "^2.0.0",
        "node-abi": "^3.3.0",
        "pump": "^3.0.0",
        "rc": "^1.2.7",
        "simple-get": "^4.0.0",
        "tar-fs": "^2.0.0",
        "tunnel-agent": "^0.6.0"
      },
      "bin": {
        "prebuild-install": "bin.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/progress": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/progress/-/progress-2.0.3.tgz",
      "integrity": "sha512-7PiHtLll5LdnKIMw100I+8xJXR5gW2QwWYkT6iJva0bXitZKa/XMrSbdmg3r2Xnaidz9Qumd0VPaMrZlF9V9sA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/pump": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/pump/-/pump-3.0.3.tgz",
      "integrity": "sha512-todwxLMY7/heScKmntwQG8CXVkWUOdYxIvY2s0VWAAMh/nd8SoYiRaKjlr7+iCs984f2P8zvrfWcDDYVb73NfA==",
      "license": "MIT",
      "dependencies": {
        "end-of-stream": "^1.1.0",
        "once": "^1.3.1"
      }
    },
    "node_modules/quick-lru": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/quick-lru/-/quick-lru-5.1.1.tgz",
      "integrity": "sha512-WuyALRjWPDGtt/wzJiadO5AXY+8hZ80hVpe6MyivgraREW751X3SbhRvG3eLKOYN+8VEvqLcf3wdnt44Z4S4SA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/rc": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/rc/-/rc-1.2.8.tgz",
      "integrity": "sha512-y3bGgqKj3QBdxLbLkomlohkvsA8gdAiUQlSBJnBhfn+BPxg4bc62d8TcBW15wavDfgexCgccckhcZvywyQYPOw==",
      "license": "(BSD-2-Clause OR MIT OR Apache-2.0)",
      "dependencies": {
        "deep-extend": "^0.6.0",
        "ini": "~1.3.0",
        "minimist": "^1.2.0",
        "strip-json-comments": "~2.0.1"
      },
      "bin": {
        "rc": "cli.js"
      }
    },
    "node_modules/readable-stream": {
      "version": "3.6.2",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.2.tgz",
      "integrity": "sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==",
      "license": "MIT",
      "dependencies": {
        "inherits": "^2.0.3",
        "string_decoder": "^1.1.1",
        "util-deprecate": "^1.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/readline-sync": {
      "version": "1.4.10",
      "resolved": "https://registry.npmjs.org/readline-sync/-/readline-sync-1.4.10.tgz",
      "integrity": "sha512-gNva8/6UAe8QYepIQH/jQ2qn91Qj0B9sYjMBBs3QOB8F2CXcKgLxQaJRP76sWVRQt+QU+8fAkCbCvjjMFu7Ycw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/resolve-alpn": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/resolve-alpn/-/resolve-alpn-1.2.1.tgz",
      "integrity": "sha512-0a1F4l73/ZFZOakJnQ3FvkJ2+gSTQWz/r2KE5OdDY0TxPm5h4GkqkWWfM47T7HsbnOtcJVEF4epCVy6u7Q3K+g==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/responselike": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/responselike/-/responselike-2.0.1.tgz",
      "integrity": "sha512-4gl03wn3hj1HP3yzgdI7d3lCkF95F21Pz4BPGvKHinyQzALR5CapwC8yIi0Rh58DEMQ/SguC03wFj2k0M/mHhw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "lowercase-keys": "^2.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/roarr": {
      "version": "2.15.4",
      "resolved": "https://registry.npmjs.org/roarr/-/roarr-2.15.4.tgz",
      "integrity": "sha512-CHhPh+UNHD2GTXNYhPWLnU8ONHdI+5DI+4EYIAOaiD63rHeYlZvyh8P+in5999TTSFgUYuKUAjzRI4mdh/p+2A==",
      "dev": true,
      "license": "BSD-3-Clause",
      "optional": true,
      "dependencies": {
        "boolean": "^3.0.1",
        "detect-node": "^2.0.4",
        "globalthis": "^1.0.1",
        "json-stringify-safe": "^5.0.1",
        "semver-compare": "^1.0.0",
        "sprintf-js": "^1.1.2"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/run-applescript": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/run-applescript/-/run-applescript-7.0.0.tgz",
      "integrity": "sha512-9by4Ij99JUr/MCFBUkDKLWK3G9HVXmabKz9U5MlIAIuvuzkiOicRYs8XJLxX+xahD+mLiiCYDqF9dKAgtzKP1A==",
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/semver-compare": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/semver-compare/-/semver-compare-1.0.0.tgz",
      "integrity": "sha512-YM3/ITh2MJ5MtzaM429anh+x2jiLVjqILF4m4oyQB18W7Ggea7BfqdH/wGMK7dDiMghv/6WG7znWMwUDzJiXow==",
      "dev": true,
      "license": "MIT",
      "optional": true
    },
    "node_modules/serialize-error": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/serialize-error/-/serialize-error-7.0.1.tgz",
      "integrity": "sha512-8I8TjW5KMOKsZQTvoxjuSIa7foAwPWGOts+6o7sgjz41/qMD9VQHEDxi6PBvK2l0MXUmqZyNpUK+T2tQaaElvw==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "type-fest": "^0.13.1"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/simple-concat": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/simple-concat/-/simple-concat-1.0.1.tgz",
      "integrity": "sha512-cSFtAPtRhljv69IK0hTVZQ+OfE9nePi/rtJmw5UjHeVyVroEqJXP1sFztKUy1qU+xvz3u/sfYJLa947b7nAN2Q==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/simple-get": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/simple-get/-/simple-get-4.0.1.tgz",
      "integrity": "sha512-brv7p5WgH0jmQJr1ZDDfKDOSeWWg+OVypG99A/5vYGPqJ6pxiaHLy8nxtFjBA7oMa01ebA9gfh1uMCFqOuXxvA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "decompress-response": "^6.0.0",
        "once": "^1.3.1",
        "simple-concat": "^1.0.0"
      }
    },
    "node_modules/sprintf-js": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.1.3.tgz",
      "integrity": "sha512-Oo+0REFV59/rz3gfJNKQiBlwfHaSESl1pcGyABQsnnIfWOFt6JNj5gCog2U6MLZ//IGYD+nA8nI+mTShREReaA==",
      "dev": true,
      "license": "BSD-3-Clause",
      "optional": true
    },
    "node_modules/string_decoder": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
      "integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "~5.2.0"
      }
    },
    "node_modules/strip-json-comments": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-2.0.1.tgz",
      "integrity": "sha512-4gB8na07fecVVkOI6Rs4e7T6NOTki5EmL7TUduTs6bu3EdnSycntVJ4re8kgZA+wx9IueI2Y11bfbgwtzuE0KQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/sumchecker": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/sumchecker/-/sumchecker-3.0.1.tgz",
      "integrity": "sha512-MvjXzkz/BOfyVDkG0oFOtBxHX2u3gKbMHIF/dXblZsgD3BWOFLmHovIpZY7BykJdAjcqRCBi1WYBNdEC9yI7vg==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "debug": "^4.1.0"
      },
      "engines": {
        "node": ">= 8.0"
      }
    },
    "node_modules/tar-fs": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/tar-fs/-/tar-fs-2.1.3.tgz",
      "integrity": "sha512-090nwYJDmlhwFwEW3QQl+vaNnxsO2yVsd45eTKRBzSzu+hlb1w2K9inVq5b0ngXuLVqQ4ApvsUHHnu/zQNkWAg==",
      "license": "MIT",
      "dependencies": {
        "chownr": "^1.1.1",
        "mkdirp-classic": "^0.5.2",
        "pump": "^3.0.0",
        "tar-stream": "^2.1.4"
      }
    },
    "node_modules/tar-stream": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/tar-stream/-/tar-stream-2.2.0.tgz",
      "integrity": "sha512-ujeqbceABgwMZxEJnk2HDY2DlnUZ+9oEcb1KzTVfYHio0UE6dG71n60d8D2I4qNvleWrrXpmjpt7vZeF1LnMZQ==",
      "license": "MIT",
      "dependencies": {
        "bl": "^4.0.3",
        "end-of-stream": "^1.4.1",
        "fs-constants": "^1.0.0",
        "inherits": "^2.0.3",
        "readable-stream": "^3.1.1"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/tunnel-agent": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.6.0.tgz",
      "integrity": "sha512-McnNiV1l8RYeY8tBgEpuodCC1mLUdbSN+CYBL7kJsJNInOP8UjDDEwdk6Mw60vdLLrr5NHKZhMAOSrR2NZuQ+w==",
      "license": "Apache-2.0",
      "dependencies": {
        "safe-buffer": "^5.0.1"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/type-fest": {
      "version": "0.13.1",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.13.1.tgz",
      "integrity": "sha512-34R7HTnG0XIJcBSn5XhDd7nNFPRcXYRZrBB2O2jdKqYODldSzBAqzsWoZYYvduky73toYS/ESqxPvkDf/F0XMg==",
      "dev": true,
      "license": "(MIT OR CC0-1.0)",
      "optional": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/undici-types": {
      "version": "6.21.0",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-6.21.0.tgz",
      "integrity": "sha512-iwDZqg0QAGrg9Rav5H4n0M64c3mkR59cJ6wQp+7C4nI0gsmExaedaYLNO44eT4AtBBwjbTiGPMlt2Md0T9H9JQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/universalify": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-0.1.2.tgz",
      "integrity": "sha512-rBJeI5CXAlmy1pV+617WB9J63U6XcazHHF2f2dbJix4XzpUF0RS3Zbj0FGIOCAva5P/d/GBOYaACQ1w+0azUkg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 4.0.0"
      }
    },
    "node_modules/util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==",
      "license": "MIT"
    },
    "node_modules/wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==",
      "license": "ISC"
    },
    "node_modules/yauzl": {
      "version": "2.10.0",
      "resolved": "https://registry.npmjs.org/yauzl/-/yauzl-2.10.0.tgz",
      "integrity": "sha512-p4a9I6X6nu6IhoGmBqAcbJy1mlC4j27vEPZX9F4L4/vZT3Lyq1VkFHw/V/PUcB9Buo+DG3iHkT0x3Qya58zc3g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "buffer-crc32": "~0.2.3",
        "fd-slicer": "~1.1.0"
      }
    }
  }
}


==================================================
### FILE: ./uninstall.sh
==================================================

#!/bin/bash
# uninstall.sh - Remove YankoviC CLI from PATH

set -e

# Remove yankovic symlink from /usr/local/bin if it exists
if [ -L /usr/local/bin/yankovic ]; then
  echo "Removing YankoviC from PATH..."
  sudo rm /usr/local/bin/yankovic
  echo "YankoviC CLI removed from /usr/local/bin."
else
  echo "No yankovic symlink found in /usr/local/bin. Nothing to remove."
fi

echo "Uninstall complete!"


==================================================
### FILE: ./cli.js
==================================================

#!/usr/bin/env node
// Polyfill minimal `window` for UHF.hat.js imports
global.window = {};

// Make Node.js modules available to YankoviC interpreter
import http from 'http';
global.nodeModules = {
    http: http
};

import fs from 'fs';
import path from 'path';
import { YankoviCInterpreter } from './frontend/src/core/yankovicInterpreter.js';
import { CLIGraphicsRenderer } from './cli-graphics.js';
import { spawn } from 'child_process';
import { fileURLToPath } from 'url';

// UHF Channel modes
const UHF_CHANNELS = {
    HEADLESS: 'headless',  // UHF Channel 1 - No display (for testing/API)
    ASCII: 'ascii',        // UHF Channel 3 - ASCII art display in terminal  
    PNG: 'png',           // UHF Channel 13 - Save as PNG files
    ELECTRON: 'electron'   // UHF Channel 62 - Standard Electron window
};

// --- Asset scanning and embedding for CLI ---
function scanForAssets(code, basePath) {
    const assets = new Map();
    
    // Find all fat_frame calls that reference image files
    const fatFrameRegex = /fat_frame\s*\(\s*["']([^"']+)["']/g;
    let match;
    
    while ((match = fatFrameRegex.exec(code)) !== null) {
        const assetPath = match[1];
        let resolvedPath;
        
        // Handle absolute paths
        if (path.isAbsolute(assetPath)) {
            resolvedPath = assetPath;
        } else {
            // Handle relative paths
            resolvedPath = path.resolve(path.dirname(basePath), assetPath);
        }
        
        if (fs.existsSync(resolvedPath)) {
            try {
                const fileData = fs.readFileSync(resolvedPath);
                const ext = path.extname(resolvedPath).toLowerCase();
                let mimeType = 'application/octet-stream';
                
                // Determine MIME type based on extension
                switch (ext) {
                    case '.jpg':
                    case '.jpeg':
                        mimeType = 'image/jpeg';
                        break;
                    case '.png':
                        mimeType = 'image/png';
                        break;
                    case '.gif':
                        mimeType = 'image/gif';
                        break;
                    case '.webp':
                        mimeType = 'image/webp';
                        break;
                    case '.svg':
                        mimeType = 'image/svg+xml';
                        break;
                }
                
                const base64Data = fileData.toString('base64');
                const dataURL = `data:${mimeType};base64,${base64Data}`;
                assets.set(assetPath, dataURL);
                
                console.log(`📎 Embedded asset: ${path.basename(resolvedPath)}`);
            } catch (error) {
                console.warn(`⚠️  Could not read asset: ${resolvedPath}`);
            }
        }
    }
    
    return assets;
}

// Function to inject assets into code
function injectAssets(code, assets) {
    if (assets.size === 0) return code;
    
    // Create individual functions for each asset
    let assetCode = '\n// === EMBEDDED ASSETS ===\n';
    
    for (const [originalPath, dataURL] of assets.entries()) {
        // Create a safe function name from the path
        const safeName = `__asset_${Buffer.from(originalPath).toString('base64').replace(/[^a-zA-Z0-9]/g, '_')}__`;
        assetCode += `spatula ${safeName}() {\n    twinkie_wiener_sandwich "${dataURL}";\n}\n\n`;
        
        // Replace the specific path with the function call
        code = code.replace(
            new RegExp(`fat_frame\\s*\\(\\s*["']${originalPath.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}["']`, 'g'),
            `fat_frame(${safeName}()`
        );
    }
    
    return assetCode + code;
}

// --- NEW: Pre-processor function to resolve #eat directives ---
async function preprocessCode(filePath, processedFiles = new Set()) {
    const absolutePath = path.resolve(filePath);
    if (processedFiles.has(absolutePath)) {
        return ''; // Avoid circular imports
    }
    processedFiles.add(absolutePath);

    let code = fs.readFileSync(absolutePath, 'utf-8');
    
    // Find all #eat directives
    const eatRegex = /^#eat\s*(?:<(.+?)>|"(.+?)")/gm;
    let match;
    const imports = [];
    while ((match = eatRegex.exec(code)) !== null) {
        imports.push({
            fullMatch: match[0],
            path: match[1] || match[2]
        });
    }

    // List of built-in libraries to skip (case-insensitive, .hat or .hat.js)
    const builtinLibs = [
        'uhf.hat', 'albuquerque.hat', 'like_a_server.hat', 'weird_wide_web.hat', 'virus_alert.hat'
    ];

    // Replace each #eat with the content of the imported file
    for (const imp of imports) {
        // Normalize import name for built-ins
        const impNorm = imp.path.toLowerCase().replace(/\.js$/, '');
        if (builtinLibs.includes(impNorm)) {
            code = code.replace(imp.fullMatch, `// Pre-processed: ${imp.fullMatch} (built-in)`);
            continue;
        }

        const importPath = path.resolve(path.dirname(absolutePath), imp.path);
        if (fs.existsSync(importPath)) {
            const importedCode = await preprocessCode(importPath, processedFiles);
            code = code.replace(imp.fullMatch, `// Pre-processed: ${imp.fullMatch}\n${importedCode}`);
        } else {
            console.warn(`Warning: Could not find import '${imp.path}'`);
            code = code.replace(imp.fullMatch, `// Pre-processed: ${imp.fullMatch} (not found)`);
        }

        // Attempt to resolve with .js extension if not found
        if (!fs.existsSync(importPath) && !importPath.endsWith('.js')) {
            const jsPath = `${importPath}.js`;
            if (fs.existsSync(jsPath)) {
                const importedCode = await preprocessCode(jsPath, processedFiles);
                code = code.replace(imp.fullMatch, `// Pre-processed: ${imp.fullMatch}\n${importedCode}`);
                continue;
            }
        }
    }

    return code;
}


// Function to detect if a program uses UHF graphics
function detectUHFUsage(code) {
    const uhfFunctions = [
        'start_the_show', 'paint_the_set', 'pick_a_hawaiian_shirt', 
        'draw_a_spamsicle', 'draw_a_big_ol_wheel_of_cheese', 'print_a_string_at',
        'fat_frame', 'Lossless_Laughter', 'roll_the_camera', 'that_is_a_wrap'
    ];
    
    return uhfFunctions.some(func => code.includes(func));
}

async function main() {
  const args = process.argv.slice(2);

  // --- Handle --help flag ---
  if (args.includes('--help') || args.includes('-h')) {
    console.error('🎵 YankoviC CLI - The Accordion Programming Language 🎵');
    console.error('');
    console.error('Usage: yankovic <path/to/file.yc> [options]');
    console.error('       yankovic --accordion');
    console.error('       yankovic --help');
    console.error('');
    console.error('📺 UHF Channel Options (Display Modes):');
    console.error('  --channel=1   or --headless   📻 API Mode (No Display)');
    console.error('  --channel=3   or --ascii      🖥️  Terminal ASCII Display');
    console.error('  --channel=13  or --png        🖼️  PNG File Output');
    console.error('  --channel=62  or --electron   📺 Standard Display Mode (default for UHF programs)');
    console.error('');
    console.error('🎨 ASCII Display Options:');
    console.error('  --hires                       🌈 High-Resolution Terminal Display');
    console.error('                                   (24-bit color, Unicode blocks)');
    console.error('');
    console.error('⚙️ Other Options:');
    console.error('  --max-frames=N: Limit number of frames (default: unlimited)');
    console.error('  --accordion: Launch the Accordion IDE (Electron app)');
    console.error('');
    console.error('🎸 Examples:');
    console.error('  yankovic examples/calculator.yc --ascii');
    console.error('  yankovic examples/calculator.yc --ascii --hires');
    console.error('  yankovic --accordion');
    console.error('');
    process.exit(0);
  }

  // --- Handle --accordion flag ---
  if (args.includes('--accordion')) {
    // Cross-platform: Start backend, then frontend, then Electron
    const { spawn } = await import('child_process');
    const { fileURLToPath } = await import('url');
    const path = await import('path');
    const __filename = fileURLToPath(import.meta.url);
    const __dirname = path.dirname(__filename);

    // Helper to spawn a process and return the child
    function runProc(cmd, args, cwd) {
      return spawn(cmd, args, {
        cwd,
        stdio: 'inherit',
        shell: process.platform === 'win32',
      });
    }

    // Start backend
    console.log('🎶 Starting Local File API Backend...');
    const backendProc = runProc('npm', ['start'], path.join(__dirname, 'backend'));
    // Start frontend
    console.log('🎨 Starting React Frontend (Vite Dev Server)...');
    const frontendProc = runProc('npm', ['run', 'dev'], path.join(__dirname, 'frontend'));

    // Wait a few seconds for servers to start
    await new Promise(r => setTimeout(r, 5000));

    // Start Electron
    console.log('🚀 Launching The Accordion IDE (Electron App)...');
    const electronPath = path.join(__dirname, 'node_modules', '.bin', 'electron');
    const electronAppPath = path.join(__dirname, 'electron', 'main.cjs');
    const electronProc = runProc(electronPath, [electronAppPath], __dirname);

    // Cleanup on exit
    function cleanup() {
      console.log('Shutting down servers...');
      if (backendProc && !backendProc.killed) backendProc.kill();
      if (frontendProc && !frontendProc.killed) frontendProc.kill();
      if (electronProc && !electronProc.killed) electronProc.kill();
      process.exit();
    }
    process.on('SIGINT', cleanup);
    process.on('SIGTERM', cleanup);
    electronProc.on('close', cleanup);
    return;
  }
  
  const filePath = path.resolve(process.cwd(), args[0]);
  
  // Read file content to detect UHF usage
  const fileContent = fs.readFileSync(filePath, 'utf-8');
  const usesUHF = detectUHFUsage(fileContent);
  
  // Parse UHF channel from arguments
  let channel = usesUHF ? UHF_CHANNELS.ELECTRON : UHF_CHANNELS.ASCII; // Default to Electron for UHF programs, ASCII for others
  
  if (args.includes('--headless') || args.includes('--channel=1')) {
    channel = UHF_CHANNELS.HEADLESS;
  } else if (args.includes('--ascii') || args.includes('--channel=3')) {
    channel = UHF_CHANNELS.ASCII;
  } else if (args.includes('--png') || args.includes('--channel=13') || args.includes('--graphics')) {
    channel = UHF_CHANNELS.PNG;
  } else if (args.includes('--electron') || args.includes('--channel=62')) {
    channel = UHF_CHANNELS.ELECTRON;
  }
  
  const maxFramesArg = args.find(arg => arg.startsWith('--max-frames='));
  const maxFrames = maxFramesArg ? parseInt(maxFramesArg.split('=')[1]) : null;

  if (!fs.existsSync(filePath)) {
    console.error(`File not found: ${filePath}`);
    process.exit(1);
  }
  
  // --- The Big Change: Handle Electron Mode Separately ---
  if (channel === UHF_CHANNELS.ELECTRON) {
    // console.log('[UHF Channel 62] Pre-processing code...');
    let processedCode = await preprocessCode(filePath);
    
    // Scan for assets and embed them
    const assets = scanForAssets(processedCode, filePath);
    if (assets.size > 0) {
      console.log(`📎 Found ${assets.size} assets to embed`);
      processedCode = injectAssets(processedCode, assets);
    } else {
      console.log('📎 No assets found to embed');
    }
    
    // console.log('[UHF Channel 62] Launching dedicated YankoviC application window...');
    const __filename = fileURLToPath(import.meta.url);
    const __dirname = path.dirname(__filename);
    const electronPath = path.join(__dirname, 'node_modules', '.bin', 'electron');

    // Set an environment variable to tell the Electron app which file to run
    const env = { ...process.env, YANKOVIC_CLI_CODE: processedCode };

    const electronProcess = spawn(electronPath, [path.join(__dirname, 'electron/cli-runner.cjs')], {
        stdio: 'inherit',
        env: env
    });

    electronProcess.on('close', (code) => {
        // console.log(`[UHF Channel 62] Application window closed with exit code ${code}.`);
        process.exit(code);
    });

    return; // Exit the CLI script, Electron is now in charge.
  }

  // --- Logic for non-Electron modes (ASCII, PNG, Headless) ---
  
  // Add support for .ycw files
  if (args[0].endsWith('.ycw')) {
    // console.log('Processing YankoviC Web file:', args[0]);
    const code = await preprocessCode(args[0]);
    const interpreter = new YankoviCInterpreter({
        printFunction: (text) => process.stdout.write(text + '\\n'),
        streamPrintFunction: (text) => {
            console.error(`[STREAMING] ${text}`);
            process.stdout.write(text);
        },
        inputFunction: promptUser
    });
    await interpreter.run(code);
    return;
  }
  
  const code = fs.readFileSync(filePath, 'utf-8');
  const interpreter = new YankoviCInterpreter({
      printFunction: (text) => process.stdout.write(text + '\\n'),
      streamPrintFunction: (text) => {
          console.error(`[STREAMING] ${text}`);
          process.stdout.write(text);
      },
      inputFunction: promptUser
  });
  
  // Inject file system and browser opening capabilities for web development
  global.yankovicFileAPI = {
    writeFile: (filepath, content) => {
      try {
        const fullPath = path.resolve(filepath);
        const dir = path.dirname(fullPath);
        if (!fs.existsSync(dir)) {
          fs.mkdirSync(dir, { recursive: true });
        }
        fs.writeFileSync(fullPath, content);
        return fullPath;
      } catch (error) {
        throw new Error(`Failed to write file: ${error.message}`);
      }
    },
    deleteFile: (filepath) => {
      try {
        if (fs.existsSync(filepath)) {
          fs.unlinkSync(filepath);
          return true;
        }
        return false;
      } catch (error) {
        throw new Error(`Failed to delete file: ${error.message}`);
      }
    },
    openInBrowser: (filepath) => {
      try {
        const openCommand = process.platform === 'darwin' ? 'open' : 
                          process.platform === 'win32' ? 'start' : 'xdg-open';
        spawn(openCommand, [filepath], { detached: true, stdio: 'ignore' }).unref();
        return true;
      } catch (error) {
        throw new Error(`Failed to open browser: ${error.message}`);
      }
    }
  };
  
  let renderer = null;
  
  if (channel !== UHF_CHANNELS.HEADLESS) {
    renderer = new CLIGraphicsRenderer(800, 600, channel);
    // console.log(`[CLI] Graphics mode enabled - UHF Channel ${renderer.getChannelNumber()}`);
  }
  
  // console.log('=== INITIAL PROGRAM EXECUTION ===');
  const { output, exitCode } = await interpreter.run(code);
  // console.log(output);
  
  interpreter.outputBuffer = [];
  
  if (interpreter.polkaLoop) {
    // console.log('\n=== POLKA LOOP FRAME EXECUTION ===');
    let frameResult;
    
    while ((frameResult = await interpreter.runFrame()) !== null && (maxFrames === null || interpreter.frameCount <= maxFrames)) {
      if (renderer && frameResult && frameResult.length > 0) {
        renderer.executeDrawCommands(frameResult);
      }
      
      const frameLogs = interpreter.outputBuffer.slice();
      interpreter.outputBuffer = [];
      
      if (frameLogs.length > 0 && frameLogs.some(log => !log.includes('test result:'))) {
        // console.log(`Frame ${interpreter.frameCount} logs:`, frameLogs.join('; '));
      }
      
      if (renderer && channel !== UHF_CHANNELS.HEADLESS) {
        await new Promise(resolve => setTimeout(resolve, 16)); // ~60fps
      }
    }
    
    if (maxFrames !== null && interpreter.frameCount > maxFrames) {
      // console.log(`--- Frame limit reached (${maxFrames} frames) ---`);
    } else {
      // console.log('--- Polka loop finished naturally ---');
    }
    
    if (renderer) {
      if(channel === UHF_CHANNELS.PNG) await renderer.createAnimation();
      renderer.cleanup();
    }
  }
  process.exit(exitCode);
}

async function promptUser(promptText) {
    const readline = await import('readline');
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });

    return new Promise(resolve => {
        rl.question(promptText, (answer) => {
            rl.close();
            resolve(answer);
        });
    });
}

main().catch(err => {
  console.error('CLI Error:', err);
  process.exit(1);
});

==================================================
### FILE: ./yankovic
==================================================

#!/usr/bin/env node
// YankoviC Global CLI - The Accordion Programming Language
// This is the global entry point for the YankoviC command-line interface

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { spawn } from 'child_process';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

async function main() {
    // Check for special IDE flags first
    const args = process.argv.slice(2);

    if (args.includes('--accordion') || args.includes('--ide')) {
        console.log('🪗 Opening The Accordion IDE...');
        
        // Check if start.sh exists and is executable
        const startScript = path.join(__dirname, 'start.sh');
        
        if (fs.existsSync(startScript)) {
            console.log('🎵 Launching The Accordion IDE with start.sh...');
            
            const child = spawn('./start.sh', [], {
                cwd: __dirname,
                stdio: 'inherit',
                detached: false
            });
            
            child.on('error', (err) => {
                console.error('❌ Failed to launch start.sh:', err.message);
                console.error('💡 Try running: cd /home/sweaterdog/Desktop/Coding_projects/YankoviC && ./start.sh');
                process.exit(1);
            });
            
            child.on('close', (code) => {
                if (code !== 0) {
                    console.error(`❌ start.sh exited with code ${code}`);
                }
                process.exit(code || 0);
            });
            
            // Keep the process alive while the child runs
            return;
            
        } else {
            console.error('❌ start.sh not found in YankoviC directory');
            console.error('💡 Make sure you\'re running from the correct YankoviC installation');
            process.exit(1);
        }
    }

    // If no special flags, handle as regular YankoviC CLI
    if (args.length === 0) {
        printHelp();
        process.exit(1);
    }

function printHelp() {
    console.log('🎵 YankoviC - The Accordion Programming Language 🎵');
    console.log('');
    console.log('Usage: yankovic <file.yc> [options]');
    console.log('       yankovic --accordion    # Open The Accordion IDE');
    console.log('       yankovic --ide          # Open The Accordion IDE');
    console.log('');
    console.log('📺 UHF Channel Options (Display Modes):');
    console.log('  --channel=1   or --headless   📻 API Mode (No Display)');
    console.log('  --channel=3   or --ascii      🖥️  Terminal ASCII Display (default)');
    console.log('  --channel=13  or --png        🖼️  PNG File Output');
    console.log('  --channel=62  or --electron   📺 Standard Display Mode (Electron)');
    console.log('');
    console.log('🎨 ASCII Display Options:');
    console.log('  --hires                       🌈 High-Resolution Terminal Display');
    console.log('                                   (24-bit color, Unicode blocks)');
    console.log('');
    console.log('⚙️ Other Options:');
    console.log('  --max-frames=N: Limit number of frames (default: unlimited)');
    console.log('  --version:      Show version information');
    console.log('  --help:         Show this help message');
    console.log('');
    console.log('🎸 Examples:');
    console.log('  yankovic calculator.yc --ascii');
    console.log('  yankovic calculator.yc --ascii --hires');
    console.log('  yankovic ~/projects/my-app.yc --png');
    console.log('  yankovic examples/EYKIW_os.yc --electron');
    console.log('');
    console.log('🎬 Demo all channels: yankovic-demo');
    console.log('🪗 Open IDE: yankovic --accordion');
}
    // Handle version flag
    if (args.includes('--version')) {
        const packagePath = path.join(__dirname, 'package.json');
        if (fs.existsSync(packagePath)) {
            const pkg = JSON.parse(fs.readFileSync(packagePath, 'utf-8'));
            console.log(`YankoviC v${pkg.version} - The Accordion Programming Language`);
            console.log('🎵 Making programming weird since 2024! 🎵');
        } else {
            console.log('YankoviC - The Accordion Programming Language');
        }
        process.exit(0);
    }

    // Handle help flag
    if (args.includes('--help')) {
        // Show the same help as no args
        console.log('🎵 YankoviC - The Accordion Programming Language 🎵');
        console.log('');
        console.log('Usage: yankovic <file.yc> [options]');
        console.log('       yankovic --accordion    # Open The Accordion IDE');
        console.log('       yankovic --ide          # Open The Accordion IDE');
        console.log('');
        console.log('📺 UHF Channel Options (Display Modes):');
        console.log('  --channel=1   or --headless   📻 API Mode (No Display)');
        console.log('  --channel=3   or --ascii      🖥️  Terminal ASCII Display (default)');
        console.log('  --channel=13  or --png        🖼️  PNG File Output');
        console.log('  --channel=62  or --electron   📺 Standard Display Mode (Electron)');
        console.log('');
        console.log('🎨 ASCII Display Options:');
        console.log('  --hires                       🌈 High-Resolution Terminal Display');
        console.log('                                   (24-bit color, Unicode blocks)');
        console.log('');
        console.log('⚙️ Other Options:');
        console.log('  --max-frames=N: Limit number of frames (default: unlimited)');
        console.log('  --version:      Show version information');
        console.log('  --help:         Show this help message');
        console.log('');
        console.log('🎸 Examples:');
        console.log('  yankovic calculator.yc --ascii');
        console.log('  yankovic calculator.yc --ascii --hires');
        console.log('  yankovic ~/projects/my-app.yc --png');
        console.log('  yankovic examples/EYKIW_os.yc --electron');
        console.log('');
        console.log('🎬 Demo all channels: yankovic-demo');
        console.log('🪗 Open IDE: yankovic --accordion');
        process.exit(0);
    }

    // For regular file execution, delegate to the existing CLI
    console.log('🎵 YankoviC CLI v2024-07-05-YODA-RENAME-v3 🎵');

    // Import and run the existing CLI logic
    try {
        // Dynamically import the CLI module
        const cliPath = path.join('/home/sweaterdog/Desktop/Coding_projects/YankoviC', 'cli.js');
        
        // The CLI expects process.argv to include the file path and args
        // We need to reconstruct this for the existing CLI
        process.argv = [
            process.argv[0], // node
            cliPath,         // cli.js path
            ...args          // user arguments
        ];
        
        // Import and execute the CLI
        await import(cliPath);
        
    } catch (error) {
        console.error('❌ Error running YankoviC CLI:', error.message);
        console.error('💡 Make sure you\'re in the YankoviC directory or have it properly installed.');
        process.exit(1);
    }
}

// Run the main function
main().catch(error => {
    console.error('❌ Fatal error:', error.message);
    process.exit(1);
});


==================================================
### FILE: ./backend/server.js
==================================================

import express from 'express';
import cors from 'cors';
import fs from 'fs-extra';
import path from 'path';
import { fileURLToPath } from 'url';
import { exec } from 'child_process';

const app = express();
const PORT = 3001;

app.use(cors());
app.use(express.json({ limit: '50mb' })); // Increase payload limit for files

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// The root directory for projects is now a 'projects' folder next to the server.js file
const PROJECTS_ROOT = path.resolve(__dirname, 'projects'); 

fs.ensureDirSync(PROJECTS_ROOT);

// Helper function to recursively read directory structure
async function readDirectory(dirPath, projectRoot) {
    const entries = await fs.readdir(dirPath, { withFileTypes: true });
    const structure = [];
    for (const entry of entries) {
        const entryPath = path.join(dirPath, entry.name);
        const relativePath = path.relative(projectRoot, entryPath).replace(/\\/g, '/'); // Normalize slashes
        
        if (entry.isDirectory()) {
            structure.push({
                name: entry.name,
                type: 'folder',
                path: relativePath,
                children: await readDirectory(entryPath, projectRoot),
            });
        } else {
            structure.push({
                name: entry.name,
                type: 'file',
                path: relativePath,
            });
        }
    }
    return structure.sort((a,b) => a.type.localeCompare(b.type) || a.name.localeCompare(b.name));
}

// LIST FILES AND FOLDERS
app.get('/api/files', async (req, res) => {
    const projectName = req.query.project || 'default-project';
    const projectPath = path.join(PROJECTS_ROOT, projectName);
    try {
        await fs.ensureDir(projectPath);
        const structure = await readDirectory(projectPath, projectPath);
        res.json({ name: projectName, type: 'folder', children: structure });
    } catch (error) {
        res.status(500).json({ error: 'Failed to read project directory.' });
    }
});

// GET FILE CONTENT
app.get('/api/file-content', async (req, res) => {
    const { project, file } = req.query;
    const filePath = path.join(PROJECTS_ROOT, project, file);
    try {
        const content = await fs.readFile(filePath, 'utf-8');
        res.json({ content });
    } catch (error) {
        console.error('[API] 404 File not found:', filePath, '| Project:', project, '| File param:', file);
        res.status(404).json({ error: 'File not found.' });
    }
});

// SAVE FILE CONTENT
app.post('/api/save-file', async (req, res) => {
    const { project, file, content } = req.body;
    const filePath = path.join(PROJECTS_ROOT, project, file);
    try {
        await fs.outputFile(filePath, content);
        res.json({ success: true, message: `File saved: ${file}` });
    } catch (error) {
        res.status(500).json({ error: 'Failed to save file.' });
    }
});

// CREATE FOLDER
app.post('/api/create-folder', async (req, res) => {
    const { project, path: newPath } = req.body;
    const folderPath = path.join(PROJECTS_ROOT, project, newPath);
    try {
        await fs.ensureDir(folderPath);
        res.json({ success: true, message: `Folder created: ${newPath}` });
    } catch (error) {
        res.status(500).json({ error: 'Failed to create folder.' });
    }
});

// CREATE FILE
app.post('/api/create-file', async (req, res) => {
    const { project, path: newPath } = req.body;
    const defaultContent = `// New file: ${path.basename(newPath)}\n\nspatula want_a_new_duck() {\n    twinkie_wiener_sandwich 27;\n}`;
    const filePath = path.join(PROJECTS_ROOT, project, newPath);
    try {
        await fs.outputFile(filePath, defaultContent);
        res.json({ success: true, message: `File created: ${newPath}` });
    } catch (error) {
        res.status(500).json({ error: 'Failed to create file.' });
    }
});

// DELETE FILE
app.delete('/api/delete-file', async (req, res) => {
    const { project, file } = req.body;
    if (!project || !file) {
        return res.status(400).json({ error: 'Missing project or file parameter.' });
    }
    const filePath = path.join(PROJECTS_ROOT, project, file);
    try {
        await fs.remove(filePath);
        res.json({ success: true, message: `File deleted: ${file}` });
    } catch (error) {
        console.error('Delete file error:', error);
        res.status(500).json({ error: 'Failed to delete file.', details: error.message });
    }
});

// DELETE FOLDER
app.delete('/api/delete-folder', async (req, res) => {
    const { project, folder } = req.body;
    if (!project || !folder) {
        return res.status(400).json({ error: 'Missing project or folder parameter.' });
    }
    const folderPath = path.join(PROJECTS_ROOT, project, folder);
    try {
        await fs.remove(folderPath);
        res.json({ success: true, message: `Folder deleted: ${folder}` });
    } catch (error) {
        console.error('Delete folder error:', error);
        res.status(500).json({ error: 'Failed to delete folder.', details: error.message });
    }
});

// --- Run Terminal Command (DEV ONLY) ---
// Persistent cwd per session
const sessionCwds = {};
const DEFAULT_CWD = PROJECTS_ROOT;
function getSessionId(req) {
    // Try header, body, or generate new
    return req.body.sessionId || req.headers['x-session-id'] || null;
}
function generateSessionId() {
    return Math.random().toString(36).slice(2) + Date.now().toString(36);
}

app.post('/api/exec', async (req, res) => {
    let { command, sessionId } = req.body;
    if (!command || typeof command !== 'string') {
        return res.status(400).json({ error: 'No command provided.' });
    }
    // Only allow in dev mode for safety
    if (process.env.NODE_ENV === 'production') {
        return res.status(403).json({ error: 'Terminal command execution is disabled in production.' });
    }
    // Basic validation: disallow some dangerous commands
    const forbidden = ['rm ', 'shutdown', 'reboot', 'init ', 'halt', 'mkfs', 'dd ', '>:'];
    if (forbidden.some(f => command.includes(f))) {
        return res.status(403).json({ error: 'Forbidden command.' });
    }
    // Session ID logic
    if (!sessionId) {
        sessionId = generateSessionId();
    }
    if (!sessionCwds[sessionId]) {
        sessionCwds[sessionId] = DEFAULT_CWD;
    }
    let cwd = sessionCwds[sessionId];
    // Handle 'cd' commands
    const cdMatch = command.match(/^\s*cd\s+(.+)$/);
    if (cdMatch) {
        let newPath = cdMatch[1].trim();
        // Remove surrounding quotes if present
        if ((newPath.startsWith('"') && newPath.endsWith('"')) || (newPath.startsWith("'") && newPath.endsWith("'"))) {
            newPath = newPath.slice(1, -1);
        }
        if (!path.isAbsolute(newPath)) {
            newPath = path.resolve(cwd, newPath);
        }
        if (fs.existsSync(newPath) && fs.statSync(newPath).isDirectory()) {
            sessionCwds[sessionId] = newPath;
            cwd = newPath;
            return res.json({ stdout: '', stderr: '', cwd, sessionId });
        } else {
            return res.json({ stdout: '', stderr: `cd: no such directory: ${cdMatch[1]}`, cwd, sessionId });
        }
    }
    // Handle 'cd ... && ...' or other commands
    // If command starts with 'cd ... &&', update cwd before running rest
    const cdAndCmd = command.match(/^\s*cd\s+([^&]+)\s*&&\s*(.+)$/);
    if (cdAndCmd) {
        let newPath = cdAndCmd[1].trim();
        // Remove surrounding quotes if present
        if ((newPath.startsWith('"') && newPath.endsWith('"')) || (newPath.startsWith("'") && newPath.endsWith("'"))) {
            newPath = newPath.slice(1, -1);
        }
        let restCmd = cdAndCmd[2];
        if (!path.isAbsolute(newPath)) {
            newPath = path.resolve(cwd, newPath);
        }
        if (fs.existsSync(newPath) && fs.statSync(newPath).isDirectory()) {
            sessionCwds[sessionId] = newPath;
            cwd = newPath;
            command = restCmd;
        } else {
            return res.json({ stdout: '', stderr: `cd: no such directory: ${cdAndCmd[1]}`, cwd, sessionId });
        }
    }
    exec(command, { cwd, timeout: 10000, maxBuffer: 1024 * 1024 }, (err, stdout, stderr) => {
        if (err) {
            return res.json({ stdout, stderr: stderr + (err.message ? ('\n' + err.message) : ''), cwd, sessionId });
        }
        res.json({ stdout, stderr, cwd, sessionId });
    });
});

app.listen(PORT, () => {
    console.log(`The Accordion Backend is playing on http://localhost:${PORT}`);
    console.log(`Serving projects from: ${PROJECTS_ROOT}`);
});


==================================================
### FILE: ./backend/projects/default-project/skinnertopia/skinnertopia.yc
==================================================

// Skinnertopia Client - YankoviC Edition v1.0
// YankoviC-compatible: parser-safe top-level (no top-level TYPE_KEYWORD variable declarations),
// no backslashes in strings, no JS-style object literals, no dot-member access at top-level,
// and no inline { ... } struct expressions in expression position.
// This version moves mutable program state into the main function to avoid the parser
// misclassifying top-level TYPE_KEYWORD tokens as function declarations.

#eat <UHF.hat>
#eat <weird_wide_web.hat>
#eat <albuquerque.hat>

// Data Structures (type declarations only)
lunchbox LoginCredentials { verse username; verse password; }
lunchbox NewPostPayload { verse content; }
lunchbox MouseInfo { spatula x; spatula y; horoscope clicked; }
lunchbox FetchOptions { verse method; verse ContentType; verse Authorization; verse body; }
lunchbox AppState {
    spatula app_state;
    verse loading_message;
    verse jwt_token;
    verse current_username;
    verse api_error_message;
    verse login_user_input;
    verse login_pass_input;
    spatula active_input;
    verse new_post_content;
    verse timeline_posts_json;
    verse profile_view_username;
    verse profile_data_json;
}

// ----------------- API Helper Functions (parser-safe) -----------------
// Build minimal string payloads and avoid inline struct literals.

verse api_login(verse username, verse password) {
    verse url = 'https://skinnertopia.com/api/login';
    verse body_json = '{ "username": "' + username + '", "password": "' + password + '" }';
    verse response;
    dare_to_be_stupid {
        response = amish_fetch(url, body_json);
    } put_down_the_chainsaw (err) {
        // Use single-quoted string containing double quotes; no backslashes.
        twinkie_wiener_sandwich '{ "error": "API request failed: ' + err + '" }';
    }
    twinkie_wiener_sandwich response;
}

verse api_get_timeline(verse token) {
    verse url = 'https://skinnertopia.com/api/posts?limit=10&sort=newest';
    verse auth_header = 'Bearer ' + token;
    verse response;
    dare_to_be_stupid {
        response = amish_fetch(url, auth_header);
    } put_down_the_chainsaw (err) {
        twinkie_wiener_sandwich '{ "error": "API request failed: ' + err + '" }';
    }
    twinkie_wiener_sandwich response;
}

verse api_create_post(verse content, verse token) {
    verse url = 'https://skinnertopia.com/api/posts';
    verse auth_header = 'Bearer ' + token;
    verse body_json = '{ "content": "' + content + '" }';
    verse response;
    dare_to_be_stupid {
        response = amish_fetch(url, body_json);
    } put_down_the_chainsaw (err) {
        twinkie_wiener_sandwich '{ "error": "API request failed: ' + err + '" }';
    }
    twinkie_wiener_sandwich response;
}

verse api_get_profile(verse username, verse token) {
    verse url = 'https://skinnertopia.com/api/users/';
    verse full_url = url + username;
    verse auth_header = 'Bearer ' + token;
    verse response;
    dare_to_be_stupid {
        response = amish_fetch(full_url, auth_header);
    } put_down_the_chainsaw (err) {
        twinkie_wiener_sandwich '{ "error": "API request failed: ' + err + '" }';
    }
    twinkie_wiener_sandwich response;
}

// ----------------- UI Helper Functions (no dot-member access in top-level expressions) -----------------

horoscope is_click_in_box(spatula cx, spatula cy, spatula x, spatula y, spatula w, spatula h) {
    twinkie_wiener_sandwich (cx >= x && cx <= x + w && cy >= y && cy <= y + h);
}

// draw_button renders text and returns total_baloney (clicks require runtime helpers)
// Arguments: text, x, y, w, h, color_button, color_text
horoscope draw_button(verse text, spatula x, spatula y, spatula w, spatula h, spatula color_button, spatula color_text) {
    horoscope clicked_in_box;
    pick_a_hawaiian_shirt(color_button);
    draw_a_spamsicle(x, y, w, h);
    pick_a_hawaiian_shirt(color_text);
    print_a_string_at(text, x + 10, y + h/2 - 8);
    // The interpreter in this environment doesn't support dotted member access in expressions,
    // so we cannot inspect a mouse object here. Return total_baloney (no click).
    clicked_in_box = total_baloney;
    twinkie_wiener_sandwich (total_baloney);
}

accordion_solo draw_text_input(verse content, verse placeholder, spatula x, spatula y, spatula w, spatula h, horoscope is_active) {
    pick_a_hawaiian_shirt(3355443);  // Dark gray background
    draw_a_spamsicle(x, y, w, h);
    jeopardy (is_active) {
        pick_a_hawaiian_shirt(6401790);  // Highlight border color
        draw_a_spamsicle(x, y, w, 2);    // Top border
        draw_a_spamsicle(x, y+h-2, w, 2);  // Bottom border
        draw_a_spamsicle(x, y, 2, h);    // Left border
        draw_a_spamsicle(x+w-2, y, 2, h);  // Right border
    }
    jeopardy (content == '') {
        pick_a_hawaiian_shirt(8947848);  // Placeholder text color (light gray)
        print_a_string_at(placeholder, x + 10, y + h/2 - 8);
    } another_one {
        pick_a_hawaiian_shirt(16777215);  // White text
        print_a_string_at(content, x + 10, y + h/2 - 8);
    }
}

// ----------------- Screen Handlers -----------------
// These use globals (declared inside main function) rather than state.* fields to
// avoid parser misclassification and dotted member access.

accordion_solo handle_login_screen() {
    verse key = get_key_press();
    horoscope is_active_user = active_input == 1;
    horoscope is_active_pass = active_input == 2;
    horoscope login_clicked = draw_button('Login', 350, 370, 100, 40, 4893354, 16777215);  // returns false here

    // Handle key presses (append only)
    jeopardy (key != '') {
        jeopardy (active_input == 1) { login_user_input = login_user_input + key; }
        another_one jeopardy (active_input == 2) { login_pass_input = login_pass_input + key; }
    }

    // Draw UI
    pick_a_hawaiian_shirt(16777215);
    print_a_string_at('Welcome to Skinnertopia (YankoviC Edition)', 220, 150);
    print_a_string_at('Username', 250, 230);
    print_a_string_at('Password', 250, 290);
    draw_text_input(login_user_input, 'Enter username...', 250, 250, 300, 40, is_active_user);
    draw_text_input(login_pass_input, 'Enter password...', 250, 310, 300, 40, is_active_pass);

    // Login click (no-op in parser-only build)
    jeopardy (login_clicked) {
        app_state = STATE_LOADING;
        loading_message = 'Logging in...';
        verse response_json = api_login(login_user_input, login_pass_input);
        lyric parsed = amish_scripture_read(response_json);
        jeopardy (parsed.token != '') {
            jwt_token = parsed.token;
            current_username = login_user_input;
            api_error_message = '';
            app_state = STATE_LOADING;
            loading_message = 'Fetching Timeline...';
            timeline_posts_json = api_get_timeline(jwt_token);
            app_state = STATE_TIMELINE;
        } another_one {
            api_error_message = parsed.error;
            app_state = STATE_LOGIN;
        }
    }

    // Error display
    jeopardy (api_error_message != '') {
        pick_a_hawaiian_shirt(15158332);
        print_a_string_at(api_error_message, 250, 430);
    }
}

accordion_solo handle_timeline_screen() {
    horoscope new_post_clicked = draw_button('New Post', 50, 530, 120, 40, 4893354, 16777215);
    horoscope profile_clicked = draw_button('My Profile', 200, 530, 120, 40, 4893354, 16777215);
    horoscope logout_clicked = draw_button('Logout', 630, 530, 120, 40, 4893354, 16777215);

    // Draw timeline UI
    pick_a_hawaiian_shirt(16777215);
    print_a_string_at('Skinnertopia Timeline', 320, 20);
    draw_a_spamsicle(100, 60, 600, 450);
    print_a_string_at('Timeline Data (as JSON):', 110, 70);
    print_a_string_at(timeline_posts_json, 110, 90);

    // Button handlers (no-op here)
    jeopardy (new_post_clicked) {
        new_post_content = '';
        app_state = STATE_NEW_POST;
    }
    jeopardy (profile_clicked) {
        app_state = STATE_LOADING;
        loading_message = 'Fetching Profile...';
        profile_view_username = current_username;
        profile_data_json = api_get_profile(profile_view_username, jwt_token);
        app_state = STATE_PROFILE;
    }
    jeopardy (logout_clicked) {
        jwt_token = '';
        current_username = '';
        login_user_input = '';
        login_pass_input = '';
        app_state = STATE_LOGIN;
    }
}

accordion_solo handle_new_post_screen() {
    verse key = get_key_press();
    horoscope cancel_clicked = draw_button('Cancel', 250, 320, 100, 40, 4893354, 16777215);
    horoscope post_clicked = draw_button('Post It!', 450, 320, 100, 40, 4893354, 16777215);

    jeopardy (key != '') { new_post_content = new_post_content + key; }

    pick_a_hawaiian_shirt(16777215);
    print_a_string_at('Compose a New Post', 310, 50);
    draw_text_input(new_post_content, "What's on your mind?", 100, 100, 600, 200, its_a_fact);

    jeopardy (cancel_clicked) { app_state = STATE_TIMELINE; }
    jeopardy (post_clicked) {
        app_state = STATE_LOADING;
        loading_message = 'Posting...';
        verse response_json = api_create_post(new_post_content, jwt_token);
        lyric parsed = amish_scripture_read(response_json);
        jeopardy (parsed.error != '') {
            api_error_message = parsed.error;
            app_state = STATE_NEW_POST;
        } another_one {
            timeline_posts_json = api_get_timeline(jwt_token);
            app_state = STATE_TIMELINE;
        }
    }

    jeopardy (api_error_message != '') {
        pick_a_hawaiian_shirt(15158332);
        print_a_string_at(api_error_message, 250, 380);
    }
}

accordion_solo handle_profile_screen() {
    horoscope back_clicked = draw_button('Back to Timeline', 300, 530, 200, 40, 4893354, 16777215);

    pick_a_hawaiian_shirt(16777215);
    verse title = 'Viewing Profile: ' + profile_view_username;
    print_a_string_at(title, 300, 20);
    draw_a_spamsicle(100, 60, 600, 450);
    print_a_string_at('Profile Data (as JSON):', 110, 70);
    print_a_string_at(profile_data_json, 110, 90);

    jeopardy (back_clicked) { app_state = STATE_TIMELINE; }
}

accordion_solo handle_loading_screen() {
    pick_a_hawaiian_shirt(16777215);
    print_a_string_at(loading_message, 300, 280);
}

// ----------------- Main Entry Point -----------------
spatula want_a_new_duck() {
    // Define program states and all mutable globals HERE (inside function)
    spatula STATE_LOGIN = 0;
    spatula STATE_TIMELINE = 1;
    spatula STATE_NEW_POST = 2;
    spatula STATE_PROFILE = 3;
    spatula STATE_LOADING = 99;

    // Mutable program state (initialized)
    spatula app_state;
    verse loading_message;
    verse jwt_token;
    verse current_username;
    verse api_error_message;
    verse login_user_input;
    verse login_pass_input;
    spatula active_input;
    verse new_post_content;
    verse timeline_posts_json;
    verse profile_view_username;
    verse profile_data_json;

    // Initialize
    app_state = STATE_LOGIN;
    loading_message = '';
    jwt_token = '';
    current_username = '';
    api_error_message = '';
    login_user_input = '';
    login_pass_input = '';
    active_input = 0;
    new_post_content = '';
    timeline_posts_json = '[]';
    profile_view_username = '';
    profile_data_json = '{}';

    start_the_show(800, 600, 'Skinnertopia - The YankoviC Experience');
    set_polka_speed(30);

    horoscope is_running = its_a_fact;
    polka (is_running) {
        roll_the_camera();
        paint_the_set(1579290);  // Dark background

        jeopardy (app_state == STATE_LOGIN) { handle_login_screen(); }
        another_one jeopardy (app_state == STATE_TIMELINE) { handle_timeline_screen(); }
        another_one jeopardy (app_state == STATE_NEW_POST) { handle_new_post_screen(); }
        another_one jeopardy (app_state == STATE_PROFILE) { handle_profile_screen(); }
        another_one jeopardy (app_state == STATE_LOADING) { handle_loading_screen(); }

        that_is_a_wrap();

        horoscope show_is_over = the_shows_over();
        jeopardy (show_is_over) { is_running = total_baloney; }
    }

    twinkie_wiener_sandwich 27;
}


==================================================
### FILE: ./backend/projects/default-project/examples/weird_wide_web/weird_wide_web_search_demo.yc
==================================================

// ===============================================
// WEIRD_WIDE_WEB SEARCH DEMO
// Demonstrates amish_textbook, amish_photobook, and amish_wikipedia
// ===============================================
#eat <Weird_Wide_Web.hat>

spatula want_a_new_duck() {
    verse query = "puppies";

    // 1. Text search (DuckDuckGo Instant Answer)
    verse text_result = amish_textbook(query);
    perform_a_parody("Textbook search for '" + query + "':");
    perform_a_parody(text_result);

    // 2. Wikipedia summary
    verse wiki_result = amish_wikipedia(query);
    perform_a_parody("Wikipedia summary for '" + query + "':");
    perform_a_parody(wiki_result);

    // 3. Image search (DuckDuckGo)
    verse image_search_url = amish_photobook(query);
    perform_a_parody("Image search URL for '" + query + "':");
    perform_a_parody(image_search_url);

    // (Optional) Download top 3 images from the search page
    // This requires a helper in the interpreter or a future YankoviC function
    // For now, just print the image search URL and instruct the user
    perform_a_parody("To download the top 3 images, open the above URL in your browser and save them to a folder.");

    twinkie_wiener_sandwich 27;
}


==================================================
### FILE: ./backend/projects/default-project/examples/weird_wide_web/README.md
==================================================

# Weird_Wide_Web Library Examples

This directory contains client-side web development examples using the Weird_Wide_Web library - crafting HTML like fine Amish woodwork!

## Files

### `simple_amish_quilt.ycw`
A complete HTML page generation example demonstrating DOM creation, styling, and browser display.

**How to run:**
```bash
yankovic program.yc
```

**What it does:**
- Creates a complete HTML document structure
- Adds various HTML elements (headings, paragraphs, buttons, forms)
- Applies basic styling
- Generates the HTML file and opens it in your default browser
- Auto-deletes the temporary file after 30 seconds

## Key Library Functions Demonstrated:

### Document Creation
- `amish_quilt_creation()` - Create HTML document
- `amish_quilt_blessing(title)` - Set document title
- `amish_wisdom_tag(name, content)` - Add meta tags

### HTML Elements
- `amish_church_sign(level, id, text)` - Create headers (h1-h6)
- `amish_scripture_text(id, text)` - Create paragraphs
- `amish_wooden_button(id, text, onclick)` - Create buttons
- `amish_text_input(id, placeholder)` - Create input fields
- `amish_wooden_link(id, href, text)` - Create links

### Styling and Display
- `amish_plain_style(id, property, value)` - Apply CSS styles
- `amish_bonnet_class(id, className)` - Add CSS classes
- `amish_add_to_quilt(element)` - Add elements to document
- `amish_quilt_display()` - Generate and display HTML

## Why this example:

Demonstrates YankoviC's capability for client-side web development. Shows how the Amish-themed functions translate to real HTML/CSS/JavaScript operations. The example creates a functional web page that opens in your browser, proving that YankoviC can generate real, working web content.

## Expected Output:

When run, this example:
1. Generates a complete HTML page with styling
2. Saves it as a temporary file
3. Opens the file in your default web browser
4. Automatically cleans up the temp file after 30 seconds

The resulting page includes headers, text, buttons, form inputs, and basic styling - all created using Amish-themed function names that map to standard web technologies.


==================================================
### FILE: ./backend/projects/default-project/examples/uhf_graphics/weasel_stomping_day.yc
==================================================

// ===============================================
//           WEASEL STOMPING DAY DELUXE
// Click all the weasels! Stomp with style!
// ===============================================

#eat <UHF.hat>
#eat <albuquerque.hat>

lunchbox Weasel {
    lasagna x;
    lasagna y;
    spatula radius;
    spatula timer;
    spatula splat;
};

spatula want_a_new_duck() {
    start_the_show(800, 600, "Weasel Stomping Day DELUXE!");
    set_polka_speed(60);

    spatula NUM_WEASELS = 5;
    Weasel weasels[5];
    spatula i = 0;
    polka (i < NUM_WEASELS) {
        weasels[i].x = 100 + random_spatula() * 6;
        weasels[i].y = 100 + random_spatula() * 4;
        weasels[i].radius = 28 + random_spatula() * 2;
        weasels[i].timer = 120 + random_spatula() * 120;
        weasels[i].splat = 0;
        i = i + 1;
    }

    spatula score = 0;
    spatula high_score = 0;
    spatula game_timer = 60 * 30; // 30 seconds
    spatula game_over = 0;
    spatula frame = 0;

    polka (!the_shows_over()) {
        frame = frame + 1;
        roll_the_camera();

        // Animated grassy background
        spatula bg_g = 180 + sin(frame * 0.03) * 30;
        paint_the_set(rgb(80, bg_g, 80));

        // Draw title and timer
        pick_a_hawaiian_shirt(AL_RED);
        print_a_string_at("WEASEL STOMPING DAY DELUXE!", 140, 50 + sin(frame * 0.07) * 8);
        pick_a_hawaiian_shirt(TWINKIE_GOLD);
        print_a_string_at("Stomp as many as you can in 30 seconds!", 170, 90);

        // Draw timer and score
        pick_a_hawaiian_shirt(BLACK_MAGIC);
        print_a_string_at("Time: " + (game_timer / 60), 30, 40);
        print_a_string_at("Score: " + score, 30, 70);
        print_a_string_at("High Score: " + high_score, 30, 100);

        // Draw and update weasels
        spatula j = 0;
        polka (j < NUM_WEASELS) {
            // Splat animation
            jeopardy (weasels[j].splat > 0) {
                pick_a_hawaiian_shirt(AL_RED);
                draw_a_big_ol_wheel_of_cheese(weasels[j].x, weasels[j].y, weasels[j].radius + weasels[j].splat * 2);
                weasels[j].splat = weasels[j].splat - 1;
            } else {
                // Draw weasel (cheese)
                pick_a_hawaiian_shirt(ORANGE_CHEESE);
                draw_a_big_ol_wheel_of_cheese(weasels[j].x, weasels[j].y, weasels[j].radius);
                // Draw face
                pick_a_hawaiian_shirt(BLACK_MAGIC);
                draw_a_big_ol_wheel_of_cheese(weasels[j].x - 7, weasels[j].y - 5, 4);
                draw_a_big_ol_wheel_of_cheese(weasels[j].x + 7, weasels[j].y - 5, 4);
                pick_a_hawaiian_shirt(AL_RED);
                draw_a_spamsicle(weasels[j].x - 5, weasels[j].y + 8, 10, 5);
            }
            // Timer for each weasel
            weasels[j].timer = weasels[j].timer - 1;
            jeopardy (weasels[j].timer <= 0) {
                weasels[j].x = 100 + random_spatula() * 6;
                weasels[j].y = 100 + random_spatula() * 4;
                weasels[j].timer = 120 + random_spatula() * 120;
            }
            j = j + 1;
        }

        // Animate the boot
        spatula boot_x = get_mouse_x() - 25 + sin(frame * 0.2) * 5;
        spatula boot_y = get_mouse_y() - 40 + cos(frame * 0.15) * 5;
        pick_a_hawaiian_shirt(AL_RED);
        draw_a_spamsicle(boot_x, boot_y, 50, 80);

        // Handle stomping
        jeopardy (!game_over && mouse_was_clicked()) {
            spatula k = 0;
            polka (k < NUM_WEASELS) {
                lasagna dx = get_mouse_x() - weasels[k].x;
                lasagna dy = get_mouse_y() - weasels[k].y;
                jeopardy (dx*dx + dy*dy < weasels[k].radius*weasels[k].radius && weasels[k].splat == 0) {
                    score = score + 1;
                    weasels[k].splat = 8;
                    weasels[k].x = 100 + random_spatula() * 6;
                    weasels[k].y = 100 + random_spatula() * 4;
                    weasels[k].timer = 120 + random_spatula() * 120;
                }
                k = k + 1;
            }
        }

        // Game timer
        jeopardy (!game_over) {
            game_timer = game_timer - 1;
            jeopardy (game_timer <= 0) {
                game_over = 1;
                if (score > high_score) { high_score = score; }
            }
        }

        // Game over screen
        jeopardy (game_over) {
            pick_a_hawaiian_shirt(AL_RED);
            draw_a_spamsicle(200, 200, 400, 200);
            pick_a_hawaiian_shirt(WHITE_ZOMBIE);
            print_a_string_at("GAME OVER!", 320, 260);
            print_a_string_at("Final Score: " + score, 320, 300);
            print_a_string_at("Click to play again!", 300, 340);
            jeopardy (mouse_was_clicked()) {
                score = 0;
                game_timer = 60 * 30;
                game_over = 0;
                // Reset weasels
                spatula m = 0;
                polka (m < NUM_WEASELS) {
                    weasels[m].x = 100 + random_spatula() * 6;
                    weasels[m].y = 100 + random_spatula() * 4;
                    weasels[m].timer = 120 + random_spatula() * 120;
                    weasels[m].splat = 0;
                    m = m + 1;
                }
            }
        }

        that_is_a_wrap();
    }

    twinkie_wiener_sandwich 27;
}

==================================================
### FILE: ./backend/projects/default-project/examples/uhf_graphics/bouncing_spatula.yc
==================================================

// ===============================================
//           BOUNCING SPATULA (Modernized)
// ===============================================
#eat <UHF.hat>
#eat <albuquerque.hat>

spatula want_a_new_duck() {
    start_the_show(800, 600, "Bouncing Spatula");
    set_polka_speed(60);

    lasagna x = 400.0;
    lasagna y = 100.0;
    lasagna y_speed = 0.0;
    lasagna gravity = 0.5;
    lasagna bounce_factor = -0.8;

    polka (!the_shows_over()) {
        roll_the_camera();
        paint_the_set(SKY_BLUE_FOR_YOU);
        pick_a_hawaiian_shirt(SILVER_SPATULA);
        draw_a_spamsicle(x-10, y-40, 20, 60); // Draw spatula handle
        pick_a_hawaiian_shirt(WHITE_ZOMBIE);
        draw_a_big_ol_wheel_of_cheese(x, y, 20); // Draw spatula head
        pick_a_hawaiian_shirt(BLACK_MAGIC);
        print_a_string_at("Bouncing Spatula!", 320, 40);
        y_speed = y_speed + gravity;
        y = y + y_speed;
        jeopardy (y > 540) {
            y = 540;
            y_speed = y_speed * bounce_factor;
        }
        that_is_a_wrap();
    }
    twinkie_wiener_sandwich 27;
}

==================================================
### FILE: ./backend/projects/default-project/examples/uhf_graphics/pokemon_battle.yc
==================================================

// ===============================================
//           YANKOMON BATTLE DELUXE
// Parody battle with style, animation, and fun!
// ===============================================

#eat <UHF.hat>
#eat <albuquerque.hat>

lunchbox Yankomon {
    verse name;
    spatula hp;
    spatula max_hp;
    spatula attack;
    spatula defense;
    spatula anim_offset;
    spatula anim_timer;
};

spatula want_a_new_duck() {
    start_the_show(800, 600, "Yankomon Battle DELUXE!");
    set_polka_speed(30);

    Yankomon player_mon;
    player_mon.name = "Spammy";
    player_mon.hp = 100;
    player_mon.max_hp = 100;
    player_mon.attack = 50;
    player_mon.defense = 30;
    player_mon.anim_offset = 0;
    player_mon.anim_timer = 0;

    Yankomon opponent_mon;
    opponent_mon.name = "Cheezy";
    opponent_mon.hp = 120;
    opponent_mon.max_hp = 120;
    opponent_mon.attack = 40;
    opponent_mon.defense = 40;
    opponent_mon.anim_offset = 0;
    opponent_mon.anim_timer = 0;

    spatula player_turn = 1;
    spatula game_over = 0;
    verse message = "A wild Cheezy appeared!";
    spatula frame = 0;
    spatula animating = 0;
    spatula player_hp_draw = player_mon.hp;
    spatula opponent_hp_draw = opponent_mon.hp;

    polka (!the_shows_over()) {
        frame = frame + 1;
        roll_the_camera();

        // Animated background
        spatula bg_r = 255;
        spatula bg_g = 255 - (sin(frame * 0.02) * 30);
        spatula bg_b = 220 + (cos(frame * 0.01) * 20);
        paint_the_set(rgb(bg_r, bg_g, bg_b));

        // Draw title
        pick_a_hawaiian_shirt(AL_RED);
        print_a_string_at("YANKOMON BATTLE DELUXE!", 180, 40 + sin(frame * 0.07) * 8);

        // Animate HP bars
        jeopardy (player_hp_draw > player_mon.hp) { player_hp_draw = player_hp_draw - 1; }
        jeopardy (player_hp_draw < player_mon.hp) { player_hp_draw = player_hp_draw + 1; }
        jeopardy (opponent_hp_draw > opponent_mon.hp) { opponent_hp_draw = opponent_hp_draw - 1; }
        jeopardy (opponent_hp_draw < opponent_mon.hp) { opponent_hp_draw = opponent_hp_draw + 1; }

        // Draw Player's Yankomon (with shake animation)
        spatula player_anim_x = 0;
        spatula player_anim_y = 0;
        jeopardy (player_mon.anim_timer > 0) {
            player_anim_x = sin(frame * 0.7) * 10;
            player_anim_y = cos(frame * 0.5) * 6;
            player_mon.anim_timer = player_mon.anim_timer - 1;
        }
        pick_a_hawaiian_shirt(SPAM_GREEN);
        draw_a_spamsicle(50 + player_anim_x, 200 + player_anim_y, 100, 100);
        pick_a_hawaiian_shirt(BLACK_MAGIC);
        print_a_string_at(player_mon.name, 70 + player_anim_x, 320 + player_anim_y);

        // Player HP bar
        pick_a_hawaiian_shirt(AL_RED);
        draw_a_spamsicle(50, 340, 100, 10);
        pick_a_hawaiian_shirt(SPAM_GREEN);
        spatula player_hp_width = (player_hp_draw * 100) / player_mon.max_hp;
        draw_a_spamsicle(50, 340, player_hp_width, 10);

        // Draw Opponent's Yankomon (with shake animation)
        spatula opp_anim_x = 0;
        spatula opp_anim_y = 0;
        jeopardy (opponent_mon.anim_timer > 0) {
            opp_anim_x = sin(frame * 0.7) * 10;
            opp_anim_y = cos(frame * 0.5) * 6;
            opponent_mon.anim_timer = opponent_mon.anim_timer - 1;
        }
        pick_a_hawaiian_shirt(AL_RED);
        draw_a_spamsicle(650 + opp_anim_x, 50 + opp_anim_y, 100, 100);
        pick_a_hawaiian_shirt(BLACK_MAGIC);
        print_a_string_at(opponent_mon.name, 670 + opp_anim_x, 170 + opp_anim_y);

        // Opponent HP bar
        pick_a_hawaiian_shirt(AL_RED);
        draw_a_spamsicle(650, 190, 100, 10);
        pick_a_hawaiian_shirt(SPAM_GREEN);
        spatula opponent_hp_width = (opponent_hp_draw * 100) / opponent_mon.max_hp;
        draw_a_spamsicle(650, 190, opponent_hp_width, 10);

        // Draw the message box
        pick_a_hawaiian_shirt(BLACK_MAGIC);
        draw_a_spamsicle(20, 420, 760, 160);
        pick_a_hawaiian_shirt(WHITE_ZOMBIE);
        print_a_string_at(message, 40, 450);

        // Turn indicator
        pick_a_hawaiian_shirt(TWINKIE_GOLD);
        jeopardy (player_turn == 1) {
            print_a_string_at("Your turn!", 320, 410);
        } else {
            print_a_string_at("Cheezy's turn!", 320, 410);
        }

        // Player's turn: moves
        jeopardy (player_turn == 1 && !game_over && animating == 0) {
            draw_a_button(500, 450, 120, 40, "Tackle", "btn_tackle");
            draw_a_button(630, 450, 120, 40, "Growl", "btn_growl");
            draw_a_button(500, 500, 120, 40, "Polka Power", "btn_polka");

            // Tackle
            jeopardy (button_was_clicked("btn_tackle")) {
                spatula damage = (player_mon.attack - opponent_mon.defense) + (random_spatula() / 10);
                jeopardy (damage < 1) { damage = 1; }
                opponent_mon.hp = opponent_mon.hp - damage;
                message = "Spammy used Tackle! It was... okay!";
                opponent_mon.anim_timer = 12;
                animating = 12;
                jeopardy (opponent_mon.hp < 0) { opponent_mon.hp = 0; }
                player_turn = 0;
            }
            // Growl
            jeopardy (button_was_clicked("btn_growl")) {
                opponent_mon.attack = opponent_mon.attack - 10;
                message = "Spammy growled! Cheezy is mildly annoyed.";
                jeopardy (opponent_mon.attack < 5) { opponent_mon.attack = 5; }
                opponent_mon.anim_timer = 8;
                animating = 8;
                player_turn = 0;
            }
            // Polka Power
            jeopardy (button_was_clicked("btn_polka")) {
                spatula damage = 20 + random_spatula() * 10;
                opponent_mon.hp = opponent_mon.hp - damage;
                message = "Spammy unleashed POLKA POWER! It's super effective!";
                opponent_mon.anim_timer = 18;
                animating = 18;
                jeopardy (opponent_mon.hp < 0) { opponent_mon.hp = 0; }
                player_turn = 0;
            }
        }

        // Game over state
        jeopardy (player_mon.hp <= 0 && !game_over) {
            game_over = 1;
            message = "You lost! You're a weenie!";
        }
        jeopardy (opponent_mon.hp <= 0 && !game_over) {
            game_over = 1;
            message = "You won! You're the king of polka!";
        }

        // Game over screen
        jeopardy (game_over) {
            pick_a_hawaiian_shirt(AL_RED);
            draw_a_spamsicle(200, 200, 400, 200);
            pick_a_hawaiian_shirt(WHITE_ZOMBIE);
            print_a_string_at("GAME OVER!", 320, 260);
            print_a_string_at(message, 320, 300);
            print_a_string_at("Click to play again!", 300, 340);
            jeopardy (mouse_was_clicked()) {
                player_mon.hp = player_mon.max_hp;
                opponent_mon.hp = opponent_mon.max_hp;
                player_hp_draw = player_mon.hp;
                opponent_hp_draw = opponent_mon.hp;
                player_turn = 1;
                game_over = 0;
                message = "A new battle begins!";
            }
        }

        that_is_a_wrap();

        // Animation timer for attack effects
        jeopardy (animating > 0) {
            animating = animating - 1;
        }

        // Opponent's turn (simple AI)
        jeopardy (player_turn == 0 && !game_over && animating == 0) {
            spatula move = random_spatula() % 3;
            jeopardy (move == 0) {
                spatula damage = (opponent_mon.attack - player_mon.defense) + (random_spatula() / 10);
                jeopardy (damage < 1) { damage = 1; }
                player_mon.hp = player_mon.hp - damage;
                message = "Cheezy used Tackle! Ouch, baby! Very ouch!";
                player_mon.anim_timer = 12;
                animating = 12;
                jeopardy (player_mon.hp < 0) { player_mon.hp = 0; }
            }
            jeopardy (move == 1) {
                player_mon.attack = player_mon.attack - 5;
                message = "Cheezy used Moldy Cheese! Spammy's attack fell!";
                jeopardy (player_mon.attack < 5) { player_mon.attack = 5; }
                player_mon.anim_timer = 8;
                animating = 8;
            }
            jeopardy (move == 2) {
                spatula damage = 10 + random_spatula() * 5;
                player_mon.hp = player_mon.hp - damage;
                message = "Cheezy used Cheddar Blast! It's a mess!";
                player_mon.anim_timer = 16;
                animating = 16;
                jeopardy (player_mon.hp < 0) { player_mon.hp = 0; }
            }
            player_turn = 1;
        }
    }

    twinkie_wiener_sandwich 27;
}

==================================================
### FILE: ./backend/projects/default-project/examples/uhf_graphics/EYKIW_os/test_minimal.yc
==================================================

// Minimal EYKIW OS test - just splash screen
#eat <UHF.hat>
#eat <albuquerque.hat>

spatula want_a_new_duck() {
    // Initialize UHF graphics system
    start_the_show(1280, 720, "Minimal OS Test");
    set_polka_speed(60);
    
    // Simple persistent state
    stupid spatula frame = 0;
    
    polka (!the_shows_over()) {
        frame = frame + 1;
        roll_the_camera();
        
        // Simple animated background
        spatula r = 120 + sin(frame * 0.03) * 80;
        spatula g = 80 + cos(frame * 0.04) * 60;
        spatula b = 200 + sin(frame * 0.02) * 55;
        paint_the_set(rgb(r, g, b));
        
        // Title
        pick_a_hawaiian_shirt(AL_RED);
        print_a_string_at("MINIMAL OS TEST", 200, 300);
        
        // Frame counter
        pick_a_hawaiian_shirt(WHITE_ZOMBIE);
        print_a_string_at("Frame: " + frame, 200, 350);
        
        that_is_a_wrap();
    }
    twinkie_wiener_sandwich 0;
}


==================================================
### FILE: ./backend/projects/default-project/examples/uhf_graphics/EYKIW_os/EYKIW_os.hat
==================================================



==================================================
### FILE: ./backend/projects/default-project/examples/uhf_graphics/EYKIW_os/window_manager.yc
==================================================



==================================================
### FILE: ./backend/projects/default-project/examples/uhf_graphics/EYKIW_os/apps/notepad.hat
==================================================

// ===============================================
// EYKIW OS - Notepad App
// ===============================================
#eat <UHF.hat>

// Placeholder for a real notepad. In the future, this will allow editing text files!

accordion_solo launch_notepad() {
    spatula note_x = 340;
    spatula note_y = 240;
    spatula note_w = 600;
    spatula note_h = 320;
    start_the_show(note_w, note_h, "UHF Notepad");
    set_polka_speed(60);
    spatula frame = 0;
    polka (!the_shows_over()) {
        frame = frame + 1;
        roll_the_camera();
        // Notepad window background
        pick_a_hawaiian_shirt(WHITE_ZOMBIE);
        draw_a_spamsicle(0, 0, note_w, note_h);
        // Title bar
        pick_a_hawaiian_shirt(TWINKIE_GOLD);
        draw_a_spamsicle(0, 0, note_w, 40);
        pick_a_hawaiian_shirt(BLACK_MAGIC);
        print_a_string_at("UHF Notepad", 30, 30);
        // Placeholder: Render a fake text area
        pick_a_hawaiian_shirt(SILVER_SPATULA);
        draw_a_spamsicle(30, 60, note_w - 60, note_h - 120);
        pick_a_hawaiian_shirt(BLACK_MAGIC);
        print_a_string_at("(Text editing coming soon)", 50, 90);
        that_is_a_wrap();
    }
    twinkie_wiener_sandwich 27;
}

==================================================
### FILE: ./backend/projects/default-project/examples/uhf_graphics/EYKIW_os/apps/editor.yc
==================================================

// ===============================================
// EYKIW OS - YankoviC Code Editor & Interpreter
// ===============================================
#eat <UHF.hat>

// This is a placeholder for a real code editor/interpreter window.
// In the future, this will allow editing and running .yc code in a window!

accordion_solo launch_editor() {
    spatula editor_x = 220;
    spatula editor_y = 140;
    spatula editor_w = 840;
    spatula editor_h = 480;
    start_the_show(editor_w, editor_h, "YankoviC Code Editor");
    set_polka_speed(60);
    spatula frame = 0;
    polka (!the_shows_over()) {
        frame = frame + 1;
        roll_the_camera();
        // Editor window background
        pick_a_hawaiian_shirt(SILVER_SPATULA);
        draw_a_spamsicle(0, 0, editor_w, editor_h);
        // Title bar
        pick_a_hawaiian_shirt(TWINKIE_GOLD);
        draw_a_spamsicle(0, 0, editor_w, 40);
        pick_a_hawaiian_shirt(BLACK_MAGIC);
        print_a_string_at("YankoviC Code Editor & Interpreter", 30, 30);
        // Placeholder: Render a fake code area
        pick_a_hawaiian_shirt(WHITE_ZOMBIE);
        draw_a_spamsicle(30, 60, editor_w - 60, editor_h - 120);
        pick_a_hawaiian_shirt(BLACK_MAGIC);
        print_a_string_at("// Write your YankoviC code here!", 50, 90);
        print_a_string_at("// (Code execution coming soon)", 50, 120);
        that_is_a_wrap();
    }
    twinkie_wiener_sandwich 0;
}


==================================================
### FILE: ./backend/projects/default-project/examples/uhf_graphics/EYKIW_os/apps/calculator.yc
==================================================

// ===============================================
// EYKIW OS - Calculator App
// ===============================================
#eat <UHF.hat>
#eat <albuquerque.hat>

// Placeholder for a real calculator. In the future, this will support full math and UI!

accordion_solo launch_calculator() {
    spatula calc_x = 320;
    spatula calc_y = 220;
    spatula calc_w = 640;
    spatula calc_h = 320;
    start_the_show(calc_w, calc_h, "UHF Calculator");
    set_polka_speed(60);
    spatula frame = 0;
    polka (!the_shows_over()) {
        frame = frame + 1;
        roll_the_camera();
        // Calculator window background
        pick_a_hawaiian_shirt(SKY_BLUE_FOR_YOU);
        draw_a_spamsicle(0, 0, calc_w, calc_h);
        // Title bar
        pick_a_hawaiian_shirt(TWINKIE_GOLD);
        draw_a_spamsicle(0, 0, calc_w, 40);
        pick_a_hawaiian_shirt(BLACK_MAGIC);
        print_a_string_at("UHF Calculator", 30, 30);
        // Placeholder: Render a fake display
        pick_a_hawaiian_shirt(WHITE_ZOMBIE);
        draw_a_spamsicle(40, 60, calc_w - 80, 60);
        pick_a_hawaiian_shirt(BLACK_MAGIC);
        print_a_string_at("0", 60, 100);
        print_a_string_at("(Calculator coming soon)", 60, 140);
        that_is_a_wrap();
    }
    twinkie_wiener_sandwich 0;
}


==================================================
### FILE: ./backend/projects/default-project/examples/uhf_graphics/EYKIW_os/apps/paint.yc
==================================================

// ===============================================
// EYKIW OS - Paint App
// ===============================================
#eat <UHF.hat>

// Placeholder for a real paint program. In the future, this will allow drawing with the mouse!

accordion_solo launch_paint() {
    spatula paint_x = 260;
    spatula paint_y = 160;
    spatula paint_w = 800;
    spatula paint_h = 440;
    start_the_show(paint_w, paint_h, "UHF Paint");
    set_polka_speed(60);
    spatula frame = 0;
    polka (!the_shows_over()) {
        frame = frame + 1;
        roll_the_camera();
        // Paint window background
        pick_a_hawaiian_shirt(SPAM_GREEN);
        draw_a_spamsicle(0, 0, paint_w, paint_h);
        // Title bar
        pick_a_hawaiian_shirt(TWINKIE_GOLD);
        draw_a_spamsicle(0, 0, paint_w, 40);
        pick_a_hawaiian_shirt(BLACK_MAGIC);
        print_a_string_at("UHF Paint - Draw Something!", 30, 30);
        // Placeholder: Render a fake canvas
        pick_a_hawaiian_shirt(WHITE_ZOMBIE);
        draw_a_spamsicle(30, 60, paint_w - 60, paint_h - 120);
        pick_a_hawaiian_shirt(BLACK_MAGIC);
        print_a_string_at("(Drawing coming soon)", 50, 90);
        that_is_a_wrap();
    }
    twinkie_wiener_sandwich 0;
}


==================================================
### FILE: ./backend/projects/default-project/examples/uhf_graphics/EYKIW_os/apps/ai_chat.yc
==================================================

// EYKIW_os AI Chat App
#eat <UHF.hat>
#eat <albuquerque.hat>
#eat <like_a_server.hat>
#eat <weird_wide_web.hat>

spatula ai_chat_main() {
    verse user_input = "";
    verse ai_response = "";
    perform_a_parody("Welcome to EYKIW_os AI Chat! Type your message below.");
    jeopardy(its_a_fact) {
        perform_a_parody("You: ");
        user_input = ask_the_audience();
        jeopardy(user_input == "exit" || user_input == "quit") {
            perform_a_parody("Goodbye!");
            twinkie_wiener_sandwich 0;
        }
        // Call amish_mail for AI chat (model, API key, and system prompt are optional)
        ai_response = amish_mail(user_input, "openai"); // You can pass a custom system prompt as the 4th argument
        perform_a_parody("AI: " + ai_response);
    }
    twinkie_wiener_sandwich 27;
}


==================================================
### FILE: ./backend/projects/default-project/examples/uhf_graphics/EYKIW_os/apps/notepad.yc
==================================================

// ===============================================
// EYKIW OS - Notepad App
// ===============================================
#eat <UHF.hat>

// Placeholder for a real notepad. In the future, this will allow editing text files!

accordion_solo launch_notepad() {
    spatula note_x = 340;
    spatula note_y = 240;
    spatula note_w = 600;
    spatula note_h = 320;
    start_the_show(note_w, note_h, "UHF Notepad");
    set_polka_speed(60);
    spatula frame = 0;
    polka (!the_shows_over()) {
        frame = frame + 1;
        roll_the_camera();
        // Notepad window background
        pick_a_hawaiian_shirt(WHITE_ZOMBIE);
        draw_a_spamsicle(0, 0, note_w, note_h);
        // Title bar
        pick_a_hawaiian_shirt(TWINKIE_GOLD);
        draw_a_spamsicle(0, 0, note_w, 40);
        pick_a_hawaiian_shirt(BLACK_MAGIC);
        print_a_string_at("UHF Notepad", 30, 30);
        // Placeholder: Render a fake text area
        pick_a_hawaiian_shirt(SILVER_SPATULA);
        draw_a_spamsicle(30, 60, note_w - 60, note_h - 120);
        pick_a_hawaiian_shirt(BLACK_MAGIC);
        print_a_string_at("(Text editing coming soon)", 50, 90);
        that_is_a_wrap();
    }
    twinkie_wiener_sandwich 0;
}


==================================================
### FILE: ./backend/projects/default-project/examples/uhf_graphics/EYKIW_os/apps/browser.yc
==================================================

// ===============================================
// EYKIW OS - Web Browser App
// ===============================================
#eat <UHF.hat>

// This is a placeholder for a real browser. In the future, this will use YankoviC's web loading capabilities!

accordion_solo launch_browser() {
    spatula browser_x = 180;
    spatula browser_y = 120;
    spatula browser_w = 900;
    spatula browser_h = 520;
    verse url = "https://www.weirdal.com";
    verse page_title = "Weird Al's Official Site";
    start_the_show(browser_w, browser_h, "UHF Browser");
    set_polka_speed(60);
    spatula frame = 0;
    polka (!the_shows_over()) {
        frame = frame + 1;
        roll_the_camera();
        // Browser window background
        pick_a_hawaiian_shirt(SKY_BLUE_FOR_YOU);
        draw_a_spamsicle(0, 0, browser_w, browser_h);
        // Address bar
        pick_a_hawaiian_shirt(WHITE_ZOMBIE);
        draw_a_spamsicle(20, 20, browser_w - 40, 40);
        pick_a_hawaiian_shirt(BLACK_MAGIC);
        print_a_string_at(url, 40, 45);
        // Page title
        pick_a_hawaiian_shirt(TWINKIE_GOLD);
        print_a_string_at(page_title, 40, 80);
        // Placeholder: Render a fake web page
        pick_a_hawaiian_shirt(WHITE_ZOMBIE);
        draw_a_spamsicle(40, 100, browser_w - 80, browser_h - 160);
        pick_a_hawaiian_shirt(BLACK_MAGIC);
        print_a_string_at("Welcome to the UHF Browser!", 60, 140);
        print_a_string_at("(Real web loading coming soon)", 60, 180);
        that_is_a_wrap();
    }
    twinkie_wiener_sandwich 0;
}


==================================================
### FILE: ./backend/projects/default-project/examples/uhf_graphics/EYKIW_os/apps/calculator.hat
==================================================

// ===============================================
// EYKIW OS - Calculator App
// ===============================================
#eat <UHF.hat>
#eat <albuquerque.hat>

// Placeholder for a real calculator. In the future, this will support full math and UI!

accordion_solo launch_calculator() {
    spatula calc_x = 320;
    spatula calc_y = 220;
    spatula calc_w = 640;
    spatula calc_h = 320;
    start_the_show(calc_w, calc_h, "UHF Calculator");
    set_polka_speed(60);
    spatula frame = 0;
    polka (!the_shows_over()) {
        frame = frame + 1;
        roll_the_camera();
        // Calculator window background
        pick_a_hawaiian_shirt(SKY_BLUE_FOR_YOU);
        draw_a_spamsicle(0, 0, calc_w, calc_h);
        // Title bar
        pick_a_hawaiian_shirt(TWINKIE_GOLD);
        draw_a_spamsicle(0, 0, calc_w, 40);
        pick_a_hawaiian_shirt(BLACK_MAGIC);
        print_a_string_at("UHF Calculator", 30, 30);
        // Placeholder: Render a fake display
        pick_a_hawaiian_shirt(WHITE_ZOMBIE);
        draw_a_spamsicle(40, 60, calc_w - 80, 60);
        pick_a_hawaiian_shirt(BLACK_MAGIC);
        print_a_string_at("0", 60, 100);
        print_a_string_at("(Calculator coming soon)", 60, 140);
        that_is_a_wrap();
    }
    twinkie_wiener_sandwich 27;
}


==================================================
### FILE: ./backend/projects/default-project/examples/uhf_graphics/EYKIW_os/apps/system_monitor.yc
==================================================

// ===============================================
// EYKIW OS - System Monitor App
// ===============================================
#eat <UHF.hat>

// Placeholder for a real system monitor. In the future, this will show CPU, memory, and more!

accordion_solo launch_system_monitor() {
    spatula sys_x = 400;
    spatula sys_y = 280;
    spatula sys_w = 480;
    spatula sys_h = 240;
    start_the_show(sys_w, sys_h, "UHF System Monitor");
    set_polka_speed(60);
    spatula frame = 0;
    polka (!the_shows_over()) {
        frame = frame + 1;
        roll_the_camera();
        // System Monitor window background
        pick_a_hawaiian_shirt(BLACK_MAGIC);
        draw_a_spamsicle(0, 0, sys_w, sys_h);
        // Title bar
        pick_a_hawaiian_shirt(TWINKIE_GOLD);
        draw_a_spamsicle(0, 0, sys_w, 40);
        pick_a_hawaiian_shirt(WHITE_ZOMBIE);
        print_a_string_at("UHF System Monitor", 30, 30);
        // Placeholder: Render fake stats
        pick_a_hawaiian_shirt(SILVER_SPATULA);
        draw_a_spamsicle(30, 60, sys_w - 60, sys_h - 120);
        pick_a_hawaiian_shirt(TWINKIE_GOLD);
        print_a_string_at("CPU: 42%", 50, 90);
        print_a_string_at("Memory: 1337MB", 50, 120);
        print_a_string_at("(Real stats coming soon)", 50, 150);
        that_is_a_wrap();
    }
    twinkie_wiener_sandwich 0;
}


==================================================
### FILE: ./backend/projects/default-project/examples/uhf_graphics/EYKIW_os/apps/editor.hat
==================================================

// ===============================================
// EYKIW OS - YankoviC Code Editor & Interpreter
// ===============================================
#eat <UHF.hat>

// This is a placeholder for a real code editor/interpreter window.
// In the future, this will allow editing and running .yc code in a window!

accordion_solo launch_editor() {
    spatula editor_x = 220;
    spatula editor_y = 140;
    spatula editor_w = 840;
    spatula editor_h = 480;
    start_the_show(editor_w, editor_h, "YankoviC Code Editor");
    set_polka_speed(60);
    spatula frame = 0;
    polka (!the_shows_over()) {
        frame = frame + 1;
        roll_the_camera();
        // Editor window background
        pick_a_hawaiian_shirt(SILVER_SPATULA);
        draw_a_spamsicle(0, 0, editor_w, editor_h);
        // Title bar
        pick_a_hawaiian_shirt(TWINKIE_GOLD);
        draw_a_spamsicle(0, 0, editor_w, 40);
        pick_a_hawaiian_shirt(BLACK_MAGIC);
        print_a_string_at("YankoviC Code Editor & Interpreter", 30, 30);
        // Placeholder: Render a fake code area
        pick_a_hawaiian_shirt(WHITE_ZOMBIE);
        draw_a_spamsicle(30, 60, editor_w - 60, editor_h - 120);
        pick_a_hawaiian_shirt(BLACK_MAGIC);
        print_a_string_at("// Write your YankoviC code here!", 50, 90);
        print_a_string_at("// (Code execution coming soon)", 50, 120);
        that_is_a_wrap();
    }
    twinkie_wiener_sandwich 0;
}


==================================================
### FILE: ./backend/projects/default-project/examples/uhf_graphics/EYKIW_os/apps/music.yc
==================================================

// ===============================================
// EYKIW OS - Music Visualizer App
// ===============================================
#eat <UHF.hat>

// Placeholder for a real music visualizer. In the future, this will play music and show dancing Weird Al!

accordion_solo launch_music() {
    spatula music_x = 420;
    spatula music_y = 300;
    spatula music_w = 440;
    spatula music_h = 200;
    start_the_show(music_w, music_h, "UHF Music Visualizer");
    set_polka_speed(60);
    spatula frame = 0;
    polka (!the_shows_over()) {
        frame = frame + 1;
        roll_the_camera();
        // Music window background
        pick_a_hawaiian_shirt(AL_RED);
        draw_a_spamsicle(0, 0, music_w, music_h);
        // Title bar
        pick_a_hawaiian_shirt(TWINKIE_GOLD);
        draw_a_spamsicle(0, 0, music_w, 40);
        pick_a_hawaiian_shirt(WHITE_ZOMBIE);
        print_a_string_at("UHF Music Visualizer", 30, 30);
        // Placeholder: Render fake music bars
        spatula b = 0;
        polka (b < 10) {
            spatula bar_h = 60 + sin(frame * 0.1 + b) * 40;
            pick_a_hawaiian_shirt(TWINKIE_GOLD);
            draw_a_spamsicle(50 + b * 35, 120 - bar_h, 20, bar_h);
            b = b + 1;
        }
        pick_a_hawaiian_shirt(BLACK_MAGIC);
        print_a_string_at("(Music and dancing Al coming soon)", 50, 170);
        that_is_a_wrap();
    }
    twinkie_wiener_sandwich 0;
}


==================================================
### FILE: ./backend/projects/default-project/examples/uhf_graphics/EYKIW_os/apps/paint.hat
==================================================

// ===============================================
// EYKIW OS - Paint App
// ===============================================
#eat <UHF.hat>

accordion_solo launch_paint() {
    spatula paint_x = 260;
    spatula paint_y = 160;
    spatula paint_w = 800;
    spatula paint_h = 440;
    start_the_show(paint_w, paint_h, "UHF Paint");
    set_polka_speed(60);
    spatula frame = 0;
    polka (!the_shows_over()) {
        frame = frame + 1;
        roll_the_camera();
        // Paint window background
        pick_a_hawaiian_shirt(SPAM_GREEN);
        draw_a_spamsicle(0, 0, paint_w, paint_h);
        // Title bar
        pick_a_hawaiian_shirt(TWINKIE_GOLD);
        draw_a_spamsicle(0, 0, paint_w, 40);
        pick_a_hawaiian_shirt(BLACK_MAGIC);
        print_a_string_at("UHF Paint - Draw Something!", 30, 30);
        // Placeholder: Render a fake canvas
        pick_a_hawaiian_shirt(WHITE_ZOMBIE);
        draw_a_spamsicle(30, 60, paint_w - 60, paint_h - 120);
        pick_a_hawaiian_shirt(BLACK_MAGIC);
        print_a_string_at("(Drawing coming soon)", 50, 90);
        that_is_a_wrap();
    }
    twinkie_wiener_sandwich 0;
}

==================================================
### FILE: ./backend/projects/default-project/examples/uhf_graphics/EYKIW_os/apps/file_manager.yc
==================================================

// ===============================================
// EYKIW OS - File Manager App
// ===============================================
#eat <UHF.hat>

// Placeholder for a real file manager. In the future, this will allow browsing and managing files!

accordion_solo launch_file_manager() {
    spatula file_x = 360;
    spatula file_y = 260;
    spatula file_w = 560;
    spatula file_h = 320;
    start_the_show(file_w, file_h, "UHF File Manager");
    set_polka_speed(60);
    spatula frame = 0;
    polka (!the_shows_over()) {
        frame = frame + 1;
        roll_the_camera();
        // File Manager window background
        pick_a_hawaiian_shirt(SILVER_SPATULA);
        draw_a_spamsicle(0, 0, file_w, file_h);
        // Title bar
        pick_a_hawaiian_shirt(TWINKIE_GOLD);
        draw_a_spamsicle(0, 0, file_w, 40);
        pick_a_hawaiian_shirt(BLACK_MAGIC);
        print_a_string_at("UHF File Manager", 30, 30);
        // Placeholder: Render a fake file list
        pick_a_hawaiian_shirt(WHITE_ZOMBIE);
        draw_a_spamsicle(30, 60, file_w - 60, file_h - 120);
        pick_a_hawaiian_shirt(BLACK_MAGIC);
        print_a_string_at("(File browsing coming soon)", 50, 90);
        that_is_a_wrap();
    }
    twinkie_wiener_sandwich 0;
}


==================================================
### FILE: ./backend/projects/default-project/examples/uhf_graphics/EYKIW_os/apps/browser.hat
==================================================

#eat <UHF.hat>

// ...existing code from browser.yc...


==================================================
### FILE: ./backend/projects/default-project/examples/uhf_graphics/EYKIW_os/EYKIW_os.yc
==================================================

// ===============================================
// EVERYTHING YOU KNOW IS WRONG OS - MAIN ENTRY
// ===============================================

// Loads the desktop, taskbar, and all core apps
#eat <UHF.hat>

// You can put comments before or after imports!
#eat <albuquerque.hat>

// Import app modules, themes, and assets
// (Comments can be between imports too)
#eat apps/browser.yc
#eat apps/editor.yc
#eat apps/paint.yc
#eat apps/calculator.yc
#eat apps/music.yc
#eat apps/notepad.yc
#eat apps/file_manager.yc
#eat apps/system_monitor.yc

// Comments before theme import
#eat "themes/default.yc"

// Comments before desktop icons import
#eat "desktop_icons.yc"

// Blank lines and comments are allowed before the main function

spatula want_a_new_duck() {
    // Initialize UHF graphics system
    start_the_show(1280, 720, "Everything You Know Is Wrong OS");
    set_polka_speed(60);
    
    // Persistent OS state variables
    spatula os_state = 0; // 0=splash, 1=desktop, 2=app_running
    spatula frame = 0;
    spatula splash_frame = 0;
    spatula app_open = -1; // -1=none, 0=browser, 1=editor, 2=paint, 3=calculator, 4=notepad, 5=files, 6=monitor, 7=music
    spatula mouse_x_pos = 0;
    spatula mouse_y_pos = 0;
    spatula mouse_clicked = 0;
    spatula min_frames = 0;
    
    polka (!(the_shows_over() && min_frames >= 120)) {
        frame = frame + 1;
        min_frames = min_frames + 1;
        roll_the_camera();
        
        // Update mouse state
        mouse_x_pos = mouse_x();
        mouse_y_pos = mouse_y();
        mouse_clicked = mouse_was_clicked();
        
        // State-based rendering
        jeopardy (os_state == 0) {
            splash_frame = draw_splash_screen(splash_frame);
            jeopardy (mouse_clicked || splash_frame > 300) {
                os_state = 1; // Move to desktop
            }
        } another_one jeopardy (os_state == 1) {
            draw_desktop_environment(frame);
            spatula clicked_app = check_icon_clicks(mouse_x_pos, mouse_y_pos, mouse_clicked);
            jeopardy (clicked_app >= 0) {
                app_open = clicked_app;
                os_state = 2;
            }
        } another_one jeopardy (os_state == 2) {
            draw_desktop_environment(frame);
            dare_to_be_stupid {
                draw_simple_app_window(app_open);
            } put_down_the_chainsaw (err) {
                pick_a_hawaiian_shirt(AL_RED);
                draw_a_spamsicle(220, 120, 840, 200);
                pick_a_hawaiian_shirt(WHITE_ZOMBIE);
                print_a_string_at("App failed to load!", 240, 160);
                print_a_string_at(err, 240, 200);
            }
            jeopardy (mouse_clicked && (mouse_x_pos < 200 || mouse_x_pos > 1080 || mouse_y_pos < 50 || mouse_y_pos > 650)) {
                app_open = -1;
                os_state = 1; // Back to desktop
            }
        }
        
        that_is_a_wrap();
    }
    twinkie_wiener_sandwich 0;
}

spatula draw_splash_screen(spatula splash_frame) {
    splash_frame = splash_frame + 1;
    
    // Animated rainbow background
    spatula r = 120 + sin(splash_frame * 0.03) * 80;
    spatula g = 80 + cos(splash_frame * 0.04) * 60;
    spatula b = 200 + sin(splash_frame * 0.02) * 55;
    paint_the_set(rgb(r, g, b));
    
    // Main title with animation
    pick_a_hawaiian_shirt(AL_RED);
    spatula title_y = 180 + sin(splash_frame * 0.07) * 12;
    print_a_string_at("EVERYTHING YOU KNOW IS WRONG", 80, title_y);
    
    // Subtitle
    pick_a_hawaiian_shirt(TWINKIE_GOLD);
    print_a_string_at("ULTRA MEGA DELUXE EDITION 3000", 120, title_y + 60);
    
    // Animated cheese wheel
    pick_a_hawaiian_shirt(ORANGE_CHEESE);
    spatula cheese_x = 400 + sin(splash_frame * 0.09) * 200;
    spatula cheese_y = 350 + cos(splash_frame * 0.11) * 100;
    draw_a_big_ol_wheel_of_cheese(cheese_x, cheese_y, 60 + sin(splash_frame * 0.13) * 20);
    
    // Click prompt
    pick_a_hawaiian_shirt(WHITE_ZOMBIE);
    print_a_string_at("Click to boot the OS!", 260, 500 + cos(splash_frame * 0.08) * 8);
    
    twinkie_wiener_sandwich splash_frame;
}

accordion_solo draw_desktop_environment(spatula frame) {
    // Animated desktop background
    spatula r = 120 + sin(frame * 0.01) * 60;
    spatula g = 180 + cos(frame * 0.008) * 50;
    spatula b = 255;
    paint_the_set(rgb(r, g, b));
    
    // Floating cheese particles
    spatula c = 0;
    polka (c < 18) {
        spatula cheese_x = 100 + c * 60 + sin(frame * 0.03 + c) * 30;
        spatula cheese_y = 80 + cos(frame * 0.04 + c) * 40 + sin(frame * 0.01 + c) * 10;
        pick_a_hawaiian_shirt(ORANGE_CHEESE);
        draw_a_big_ol_wheel_of_cheese(cheese_x, cheese_y, 18 + yoda(c, 3) * 4);
        c = c + 1;
    }
    
    // Draw desktop icons
    draw_desktop_icons();
    
    // Draw taskbar
    pick_a_hawaiian_shirt(BLACK_MAGIC);
    draw_a_spamsicle(0, 700, 1280, 20);
    pick_a_hawaiian_shirt(WHITE_ZOMBIE);
    print_a_string_at("[Browser] [Editor] [Paint] [Calculator] [Notepad] [Files] [Monitor] [Music]", 20, 705);
}

spatula check_icon_clicks(spatula mouse_x_pos, spatula mouse_y_pos, spatula mouse_clicked) {
    jeopardy (mouse_clicked) {
        // Browser (80-140, 120-180)
        jeopardy (mouse_x_pos >= 80 && mouse_x_pos <= 140 && mouse_y_pos >= 120 && mouse_y_pos <= 180) {
            twinkie_wiener_sandwich 0;
        }
        // Editor (180-240, 120-180)  
        jeopardy (mouse_x_pos >= 180 && mouse_x_pos <= 240 && mouse_y_pos >= 120 && mouse_y_pos <= 180) {
            twinkie_wiener_sandwich 1;
        }
        // Paint (280-340, 120-180)
        jeopardy (mouse_x_pos >= 280 && mouse_x_pos <= 340 && mouse_y_pos >= 120 && mouse_y_pos <= 180) {
            twinkie_wiener_sandwich 2;
        }
        // Calculator (380-440, 120-180)
        jeopardy (mouse_x_pos >= 380 && mouse_x_pos <= 440 && mouse_y_pos >= 120 && mouse_y_pos <= 180) {
            twinkie_wiener_sandwich 3;
        }
        // Notepad (480-540, 120-180)
        jeopardy (mouse_x_pos >= 480 && mouse_x_pos <= 540 && mouse_y_pos >= 120 && mouse_y_pos <= 180) {
            twinkie_wiener_sandwich 4;
        }
        // Files (580-640, 120-180)
        jeopardy (mouse_x_pos >= 580 && mouse_x_pos <= 640 && mouse_y_pos >= 120 && mouse_y_pos <= 180) {
            twinkie_wiener_sandwich 5;
        }
        // Monitor (680-740, 120-180)
        jeopardy (mouse_x_pos >= 680 && mouse_x_pos <= 740 && mouse_y_pos >= 120 && mouse_y_pos <= 180) {
            twinkie_wiener_sandwich 6;
        }
        // Music (780-840, 120-180)
        jeopardy (mouse_x_pos >= 780 && mouse_x_pos <= 840 && mouse_y_pos >= 120 && mouse_y_pos <= 180) {
            twinkie_wiener_sandwich 7;
        }
    }
    twinkie_wiener_sandwich -1; // No app clicked
}

accordion_solo draw_simple_app_window(spatula app_open) {
    // Draw app window background
    pick_a_hawaiian_shirt(GREY_POUPON);
    draw_a_spamsicle(200, 50, 880, 600);
    
    // Draw title bar
    pick_a_hawaiian_shirt(BLUE_FOOTED_BOOBY);
    draw_a_spamsicle(200, 50, 880, 30);
    
    // Draw app title based on app_open
    pick_a_hawaiian_shirt(WHITE_ZOMBIE);
    jeopardy (app_open == 0) {
        print_a_string_at("Browser - Everything You Browse Is Wrong", 220, 60);
    } another_one jeopardy (app_open == 1) {
        print_a_string_at("Editor - My Bologna Text Editor", 220, 60);
    } another_one jeopardy (app_open == 2) {
        print_a_string_at("Paint - White and Nerdy Art Studio", 220, 60);
    } another_one jeopardy (app_open == 3) {
        print_a_string_at("Calculator - Math is Hard Calculator", 220, 60);
    } another_one jeopardy (app_open == 4) {
        print_a_string_at("Notepad - Amish Paradise Text Pad", 220, 60);
    } another_one jeopardy (app_open == 5) {
        print_a_string_at("Files - Dare to be Stupid File Manager", 220, 60);
    } another_one jeopardy (app_open == 6) {
        print_a_string_at("Monitor - Hardware Store System Monitor", 220, 60);
    } another_one jeopardy (app_open == 7) {
        print_a_string_at("Music - Polka Party Music Player", 220, 60);
    }
    
    // Draw close instruction
    pick_a_hawaiian_shirt(BLACK_MAGIC);
    print_a_string_at("Click outside this window to close", 220, 100);
    
    // Draw some app content
    pick_a_hawaiian_shirt(AL_RED);
    print_a_string_at("This is a demo app window!", 220, 150);
    print_a_string_at("Full app functionality coming soon...", 220, 180);
}


==================================================
### FILE: ./backend/projects/default-project/examples/uhf_graphics/EYKIW_os/README.md
==================================================

# Everything You Know Is Wrong OS (EYKIW OS)

A full-featured, parody desktop environment and operating system simulation for YankoviC, inspired by the best of Windows, Linux, and Weird Al.

## Features
- Dynamic, animated desktop backgrounds
- Advanced window management (drag, snap, minimize, maximize, close)
- Multi-app support: browser, code editor/interpreter, paint, calculator, music visualizer, notepad, file manager, system monitor, and more
- Realistic UI with animations, notifications, and theming
- Built-in YankoviC code interpreter (run .yc files in a window!)
- Fully interactive, working web browser (loads real web pages in a window)
- Fun, musical, and over-the-top visual effects

## Directory Structure
- `EYKIW_os.yc` — Main OS entrypoint and desktop environment
- `apps/` — All built-in applications (browser, editor, paint, etc.)
- `assets/` — Images, icons, and other resources
- `themes/` — Color schemes and UI themes
- `README.md` — This file

## How to run
```bash
yankovic EYKIW_os.yc
```

## Goals
- Rival the look and feel of modern desktops (Cinnamon, Windows 11, KDE Plasma)
- Be the most fun, interactive, and musical OS parody ever made
- Serve as a showcase for YankoviC's graphical and scripting power

---

*"Everything you know is wrong! Just forget the words and sing along!"*


==================================================
### FILE: ./backend/projects/default-project/examples/uhf_graphics/EYKIW_os/desktop_icons.yc
==================================================

// ===============================================
// EYKIW OS - Desktop Icons
// ===============================================
#eat <UHF.hat>

// Placeholder for desktop icon rendering and launching apps
// In the future, this will support drag, drop, and launching apps


// Draws desktop icons with a hover effect for interactivity
accordion_solo draw_desktop_icons() {
    spatula mx = mouse_x();
    spatula my = mouse_y();
    // Browser
    jeopardy (mx >= 80 && mx <= 140 && my >= 120 && my <= 180) {
        pick_a_hawaiian_shirt(TWINKIE_GOLD);
    } another_one {
        pick_a_hawaiian_shirt(AL_RED);
    }
    draw_a_spamsicle(80, 120, 60, 60);
    pick_a_hawaiian_shirt(BLACK_MAGIC);
    print_a_string_at("Browser", 80, 190);
    // Editor
    jeopardy (mx >= 180 && mx <= 240 && my >= 120 && my <= 180) {
        pick_a_hawaiian_shirt(TWINKIE_GOLD);
    } another_one {
        pick_a_hawaiian_shirt(SKY_BLUE_FOR_YOU);
    }
    draw_a_spamsicle(180, 120, 60, 60);
    pick_a_hawaiian_shirt(BLACK_MAGIC);
    print_a_string_at("Editor", 180, 190);
    // Paint
    jeopardy (mx >= 280 && mx <= 340 && my >= 120 && my <= 180) {
        pick_a_hawaiian_shirt(TWINKIE_GOLD);
    } another_one {
        pick_a_hawaiian_shirt(TWINKIE_GOLD);
    }
    draw_a_spamsicle(280, 120, 60, 60);
    pick_a_hawaiian_shirt(BLACK_MAGIC);
    print_a_string_at("Paint", 280, 190);
    // Calculator
    jeopardy (mx >= 380 && mx <= 440 && my >= 120 && my <= 180) {
        pick_a_hawaiian_shirt(TWINKIE_GOLD);
    } another_one {
        pick_a_hawaiian_shirt(ORANGE_CHEESE);
    }
    draw_a_spamsicle(380, 120, 60, 60);
    pick_a_hawaiian_shirt(BLACK_MAGIC);
    print_a_string_at("Calculator", 380, 190);
    // Notepad
    jeopardy (mx >= 480 && mx <= 540 && my >= 120 && my <= 180) {
        pick_a_hawaiian_shirt(TWINKIE_GOLD);
    } another_one {
        pick_a_hawaiian_shirt(SPAM_GREEN);
    }
    draw_a_spamsicle(480, 120, 60, 60);
    pick_a_hawaiian_shirt(BLACK_MAGIC);
    print_a_string_at("Notepad", 480, 190);
    // Files
    jeopardy (mx >= 580 && mx <= 640 && my >= 120 && my <= 180) {
        pick_a_hawaiian_shirt(TWINKIE_GOLD);
    } another_one {
        pick_a_hawaiian_shirt(SILVER_SPATULA);
    }
    draw_a_spamsicle(580, 120, 60, 60);
    pick_a_hawaiian_shirt(BLACK_MAGIC);
    print_a_string_at("Files", 580, 190);
    // Monitor
    jeopardy (mx >= 680 && mx <= 740 && my >= 120 && my <= 180) {
        pick_a_hawaiian_shirt(TWINKIE_GOLD);
    } another_one {
        pick_a_hawaiian_shirt(WHITE_ZOMBIE);
    }
    draw_a_spamsicle(680, 120, 60, 60);
    pick_a_hawaiian_shirt(BLACK_MAGIC);
    print_a_string_at("Monitor", 680, 190);
    // Music
    jeopardy (mx >= 780 && mx <= 840 && my >= 120 && my <= 180) {
        pick_a_hawaiian_shirt(TWINKIE_GOLD);
    } another_one {
        pick_a_hawaiian_shirt(AL_RED);
    }
    draw_a_spamsicle(780, 120, 60, 60);
    pick_a_hawaiian_shirt(BLACK_MAGIC);
    print_a_string_at("Music", 780, 190);
}


==================================================
### FILE: ./backend/projects/default-project/examples/uhf_graphics/EYKIW_os/themes/default.yc
==================================================

// ===============================================
// EYKIW OS - Default Theme
// ===============================================

lunchbox Theme {
    verse theme_name;
    spatula desktop_bg_r;
    spatula desktop_bg_g;
    spatula desktop_bg_b;
    spatula window_border_color;
    spatula window_titlebar_color;
    spatula window_titlebar_text;
    spatula window_bg;
    spatula taskbar_bg;
    spatula taskbar_text;
    spatula accent_color;
}

Theme get_default_theme() {
    Theme t;
    t.theme_name = "UHF Classic";
    t.desktop_bg_r = 120;
    t.desktop_bg_g = 180;
    t.desktop_bg_b = 255;
    t.window_border_color = SILVER_SPATULA;
    t.window_titlebar_color = SKY_BLUE_FOR_YOU;
    t.window_titlebar_text = BLACK_MAGIC;
    t.window_bg = WHITE_ZOMBIE;
    t.taskbar_bg = BLACK_MAGIC;
    t.taskbar_text = WHITE_ZOMBIE;
    t.accent_color = TWINKIE_GOLD;
    twinkie_wiener_sandwich t;
}


==================================================
### FILE: ./backend/projects/default-project/examples/uhf_graphics/EYKIW_os/themes/default.hat
==================================================

// ===============================================
// EYKIW OS - Default Theme
// ===============================================

lunchbox Theme {
    verse theme_name;
    spatula desktop_bg_r;
    spatula desktop_bg_g;
    spatula desktop_bg_b;
    spatula window_border_color;
    spatula window_titlebar_color;
    spatula window_titlebar_text;
    spatula window_bg;
    spatula taskbar_bg;
    spatula taskbar_text;
    spatula accent_color;
}

Theme get_default_theme() {
    Theme t;
    t.theme_name = "UHF Classic";
    t.desktop_bg_r = 120;
    t.desktop_bg_g = 180;
    t.desktop_bg_b = 255;
    t.window_border_color = SILVER_SPATULA;
    t.window_titlebar_color = SKY_BLUE_FOR_YOU;
    t.window_titlebar_text = BLACK_MAGIC;
    t.window_bg = WHITE_ZOMBIE;
    t.taskbar_bg = BLACK_MAGIC;
    t.taskbar_text = WHITE_ZOMBIE;
    t.accent_color = TWINKIE_GOLD;
    twinkie_wiener_sandwich t;
}


==================================================
### FILE: ./backend/projects/default-project/examples/uhf_graphics/calculator.yc
==================================================

// ===============================================
//           YANKOVIC CALCULATOR
// It slices, it dices, it calculates with glee!
// The best darn calculator you ever will see!
// ===============================================

#eat <UHF.hat>

spatula want_a_new_duck() {
    start_the_show(400, 500, "YankoviC Calculator");
    set_polka_speed(60);
    
    spatula num1 = 5;
    spatula num2 = 3;
    spatula result = 8;
    verse operation_text = "5 + 3 = 8";
    
    polka (!the_shows_over()) {
        roll_the_camera();
        
        paint_the_set(WHITE_ZOMBIE);
        
        pick_a_hawaiian_shirt(AL_RED);
        draw_a_spamsicle(50, 50, num1 * 20, 30);
        
        pick_a_hawaiian_shirt(SPAM_GREEN);
        draw_a_spamsicle(50, 100, num2 * 20, 30);
        
        pick_a_hawaiian_shirt(SKY_BLUE_FOR_YOU);
        draw_a_spamsicle(50, 150, result * 10, 30);
        
        pick_a_hawaiian_shirt(BLACK_MAGIC);
        print_a_string_at(operation_text, 150, 220);
        
        draw_a_button(50, 250, 100, 40, "Add", "btn_add");
        draw_a_button(160, 250, 100, 40, "Subtract", "btn_sub");
        draw_a_button(270, 250, 100, 40, "Multiply", "btn_mul");
        draw_a_button(50, 300, 100, 40, "Modulus", "btn_mod");
        
        print_a_string_at("Num 1:", 50, 320);
        draw_a_button(50, 340, 50, 30, "+", "btn_num1_up");
        draw_a_button(110, 340, 50, 30, "−", "btn_num1_down");
        
        print_a_string_at("Num 2:", 200, 320);
        draw_a_button(200, 340, 50, 30, "+", "btn_num2_up");
        draw_a_button(260, 340, 50, 30, "−", "btn_num2_down");
        
        // This is the part that had the bug before!
        // You have to build the string piece by piece, you see.
        jeopardy (button_was_clicked("btn_add")) {
            result = num1 + num2;
            operation_text = "" + num1 + " + " + num2 + " = " + result;
        }
        jeopardy (button_was_clicked("btn_sub")) {
            result = num1 - num2;
            operation_text = "" + num1 + " - " + num2 + " = " + result;
        }
        jeopardy (button_was_clicked("btn_mul")) {
            result = num1 * num2;
            operation_text = "" + num1 + " * " + num2 + " = " + result;
        }
        jeopardy (button_was_clicked("btn_mod")) {
            result = yoda(num1, num2);
            operation_text = "" + num1 + " yoda " + num2 + " = " + result;
        }
        
        jeopardy (button_was_clicked("btn_num1_up"))   { num1 = num1 + 1; }
        jeopardy (button_was_clicked("btn_num1_down")) { jeopardy (num1 > 0) { num1 = num1 - 1; } }
        jeopardy (button_was_clicked("btn_num2_up"))   { num2 = num2 + 1; }
        jeopardy (button_was_clicked("btn_num2_down")) { jeopardy (num2 > 0) { num2 = num2 - 1; } }
        
        that_is_a_wrap();
    }
    
    twinkie_wiener_sandwich 27;
}

==================================================
### FILE: ./backend/projects/default-project/examples/uhf_graphics/drive_thru.yc
==================================================

// ===============================================
//           TRAPPED IN THE DRIVE-THRU (Modernized)
// ===============================================
#eat <UHF.hat>

spatula want_a_new_duck() {
    start_the_show(800, 600, "Trapped in the Drive-Thru");
    set_polka_speed(60);
    lasagna car_x = -100.0;
    spatula state = 0;
    spatula timer = 0;
    verse message = "I'm trapped in the drive-thru...";
    polka (!the_shows_over()) {
        roll_the_camera();
        paint_the_set(SILVER_SPATULA);
        pick_a_hawaiian_shirt(AL_RED);
        draw_a_spamsicle(600, 100, 200, 400); // Building
        pick_a_hawaiian_shirt(WHITE_ZOMBIE);
        draw_a_spamsicle(650, 250, 100, 100); // Window
        pick_a_hawaiian_shirt(SKY_BLUE_FOR_YOU);
        draw_a_spamsicle(car_x, 300, 100, 50); // Car
        pick_a_hawaiian_shirt(BLACK_MAGIC);
        print_a_string_at(message, 200, 500);
        jeopardy(state == 0) {
            car_x = car_x + 1;
            jeopardy(car_x > 200) { state = 1; timer = 180; message = "Okay, I've placed my order..."; }
        }
        jeopardy(state == 1) {
            timer = timer - 1;
            jeopardy(timer <= 0) { state = 2; message = "Any minute now..."; }
        }
        jeopardy(state == 2) {
            car_x = car_x + 0.5;
            jeopardy(car_x > 450) { state = 3; timer = 180; message = "So I'm just sitting here..."; }
        }
        jeopardy(state == 3) {
            timer = timer - 1;
            jeopardy(timer <= 0) { state = 4; message = "Finally, food!"; }
        }
        jeopardy(state == 4) {
            // End state
        }
        that_is_a_wrap();
    }
    twinkie_wiener_sandwich 0;
}


==================================================
### FILE: ./backend/projects/default-project/examples/uhf_graphics/spinning_circles.yc
==================================================

// ===============================================
//           SPINNING DUCKS DELUXE
// A Modernized YankoviC Graphics Demo
// ===============================================

#eat <UHF.hat>
#eat <albuquerque.hat>

lunchbox Duck {
    lasagna x;
    lasagna y;
    lasagna body_radius;
    lasagna head_radius;
    lasagna orbit_radius;
    lasagna orbit_speed;
    lasagna orbit_phase;
};

accordion_solo draw_the_duck(Duck duck, lasagna angle) {
    lasagna orbit_x = duck.x + cos(angle * duck.orbit_speed + duck.orbit_phase) * duck.orbit_radius;
    lasagna orbit_y = duck.y + sin(angle * duck.orbit_speed + duck.orbit_phase) * duck.orbit_radius;
    lasagna head_offset_x = cos(angle * 2 + duck.orbit_phase) * duck.body_radius * 1.2;
    lasagna head_offset_y = sin(angle * 2 + duck.orbit_phase) * duck.body_radius * 1.2;

    // Body
    pick_a_hawaiian_shirt(TWINKIE_GOLD);
    draw_a_big_ol_wheel_of_cheese(orbit_x, orbit_y, duck.body_radius);

    // Head
    draw_a_big_ol_wheel_of_cheese(orbit_x + head_offset_x, orbit_y + head_offset_y, duck.head_radius);

    // Beak
    pick_a_hawaiian_shirt(ORANGE_CHEESE);
    draw_a_spamsicle(orbit_x + head_offset_x + duck.head_radius, orbit_y + head_offset_y - 5, 20, 10);

    // Eyes
    pick_a_hawaiian_shirt(BLACK_MAGIC);
    draw_a_big_ol_wheel_of_cheese(orbit_x + head_offset_x + 7, orbit_y + head_offset_y - 5, 4);
    draw_a_big_ol_wheel_of_cheese(orbit_x + head_offset_x + 17, orbit_y + head_offset_y - 5, 4);
}

spatula want_a_new_duck() {
    spatula screen_width = 800;
    spatula screen_height = 600;
    start_the_show(screen_width, screen_height, "UHF Channel 62: Spinning Ducks Deluxe");
    set_polka_speed(60);

    // Create multiple ducks with different orbits
    Duck ducks[5];
    spatula i = 0;
    polka (i < 5) {
        ducks[i].x = screen_width / 2;
        ducks[i].y = screen_height / 2;
        ducks[i].body_radius = 40 + i * 8;
        ducks[i].head_radius = 16 + i * 2;
        ducks[i].orbit_radius = 60 + i * 50;
        ducks[i].orbit_speed = 0.5 + i * 0.2;
        ducks[i].orbit_phase = i * 1.2;
        i = i + 1;
    }

    lasagna rotation_angle = 0.0;
    spatula frame = 0;

    polka (!the_shows_over()) {
        rotation_angle = rotation_angle + 0.03;
        frame = frame + 1;

        roll_the_camera();

        // Animated background gradient
        spatula bg_r = 120 + sin(frame * 0.01) * 60;
        spatula bg_g = 180 + cos(frame * 0.008) * 50;
        spatula bg_b = 255;
        paint_the_set(rgb(bg_r, bg_g, bg_b));

        // Draw all spinning ducks
        spatula j = 0;
        polka (j < 5) {
            draw_the_duck(ducks[j], rotation_angle);
            j = j + 1
        }

        // Animated title text
        pick_a_hawaiian_shirt(AL_RED);
        spatula title_y = 60 + sin(frame * 0.07) * 10;
        print_a_string_at("SPINNING DUCKS DELUXE!", 180, title_y);

        // Fun subtitle
        pick_a_hawaiian_shirt(TWINKIE_GOLD);
        print_a_string_at("Quack to the Future", 260, 110 + cos(frame * 0.05) * 8);

        that_is_a_wrap();
    }

    cancel_the_show();
    twinkie_wiener_sandwich 27;
}

==================================================
### FILE: ./backend/projects/default-project/examples/uhf_graphics/README.md
==================================================

# UHF Graphics Library Examples

This directory contains examples demonstrating the UHF graphics library for creating windows, drawing shapes, and handling user input.

## Files

### `bouncing_spatula.yc`
Demonstrates animation with a bouncing rectangle and basic collision detection.

### `calculator.yc`
A graphical calculator implementation showing UI elements like buttons and text display.

### `drive_thru.yc`
Interactive example showing mouse and keyboard input handling.

### `EYKIW_os.yc`
"Everything You Know Is Wrong" operating system simulation - a complex UI demonstration.

### `pokemon_battle.yc`
Game-like interface with graphics, text, and user interaction.

### `spinning_circles.yc`
Animation example showing rotating circular shapes.

### `weasel_stomping_day.yc`
Interactive game demonstrating mouse click detection and dynamic graphics.

## How to run UHF examples:

**How to run:**
```bash
yankovic program.yc
```

## What these examples demonstrate:

- **Window Management:** `start_the_show()`, `cancel_the_show()`, `the_shows_over()`
- **Drawing:** `draw_a_spamsicle()`, `draw_a_big_ol_wheel_of_cheese()`, `print_a_string_at()`
- **Colors:** Using predefined constants like `AL_RED`, `TWINKIE_GOLD`
- **Animation:** Frame loops with `roll_the_camera()` and `that_is_a_wrap()`
- **Input:** Mouse position, clicks, and UI elements
- **UI Elements:** Buttons, checkboxes, sliders

## Why these examples:

The UHF library is the heart of YankoviC's graphical capabilities. These examples show how to create everything from simple animations to complex interactive applications. They demonstrate that despite the humorous naming, YankoviC is capable of serious graphics programming.


==================================================
### FILE: ./backend/projects/default-project/examples/like_a_server/amish_web_server.ycw
==================================================

#eat like_a_server.hat

// Amish Paradise Web Server
// "I've been spending most my life, living in an Amish paradise"
// Building a web server the plain folk way!

// Note: 
// Websites cannot be hosted within The Accordion
// The CLI is the only way to properly run YankoviC Web code.
// And no, the Backstage Pass also cannot start Websites...

spatula want_a_new_duck() {
    // Raise the barn (start the server) on port 2727
    spatula server_status = amish_barn_raising(2727);
    
    // Set up buggy trails (routes) for visitors
    amish_buggy_trail_get("/", "welcome_page");
    amish_barn_delivery_post("/contact", "handle_contact");
    amish_quilting_update("/profile", "update_profile");
    amish_shunning_delete("/spam", "delete_spam");
    
    // Add community helpers (middleware)
    amish_community_helper("logger");
    amish_welcome_outsiders();
    
    // Check if barn is standing
    jeopardy (amish_barn_still_standing()) {
        perform_a_parody("The barn is raised and ready for visitors!\n");
        perform_a_parody("Visit us at http://localhost:2727 (if you have electricity)\n");
        
        // Keep the server running using a polka loop
        polka (amish_barn_still_standing()) {
            wait_for_a_moment(1000);
        }
    } another_one {
        perform_a_parody("Barn raising failed. Perhaps we need more community help.\n");
    }
    
    twinkie_wiener_sandwich 27;
}


==================================================
### FILE: ./backend/projects/default-project/examples/like_a_server/README.md
==================================================

# Like_a_Server Library Examples

This directory contains server-side web development examples using the Like_a_Server library - building web servers the Amish way!

## Files

### `amish_web_server.ycw`
A complete web server example demonstrating routing, request handling, and response generation.

**How to run:**
```bash
yankovic amish_web_server.ycw
```

**What it does:**
- Creates a web server on port 2727
- Sets up multiple routes (GET, POST)
- Handles JSON and HTML responses
- Demonstrates request parameter extraction
- Shows proper Amish-themed server management

## Key Library Functions Demonstrated:

### Server Management
- `amish_barn_raising(port)` - Start the server
- `amish_barn_still_standing()` - Check server status
- `amish_barn_teardown()` - Stop the server

### Routing
- `amish_buggy_trail_get(path, handler)` - GET routes
- `amish_barn_delivery_post(path, handler)` - POST routes

### Request/Response
- `eat_it_extract_body(request)` - Get request body
- `like_a_surgeon_slice_params(name)` - Get URL parameters
- `amish_butter_churn_json(data, status)` - Send JSON response
- `amish_quilt_html_response(html, status)` - Send HTML response

## Why this example:

Shows how YankoviC can be used for serious web development while maintaining its humorous Amish theme. Demonstrates that despite the fun naming conventions, the library provides real server-side functionality comparable to Express.js or similar frameworks.

## Expected Output:

When run, this creates a local web server that you can access in your browser at `http://localhost:2727`. The server provides both API endpoints and HTML pages, showing the full range of server-side capabilities.


==================================================
### FILE: ./backend/projects/default-project/examples/albuquerque_math/math_demo.yc
==================================================

// Albuquerque Math Demo - Modernized
#eat <albuquerque.hat>

spatula want_a_new_duck() {
    lasagna angle = 1.57; // About π/2 radians (90 degrees)
    lasagna sine_value = sin(angle);
    lasagna cosine_value = cos(angle);
    spatula random_number = random_spatula();
    spatula dividend = 17;
    spatula divisor = 5;
    spatula remainder = yoda(dividend, divisor);

    perform_a_parody("Angle: %lasagna", angle);
    perform_a_parody("Sine: %lasagna", sine_value);
    perform_a_parody("Cosine: %lasagna", cosine_value);
    perform_a_parody("Random spatula: %spatula", random_number);
    perform_a_parody("%spatula yoda %spatula = %spatula", dividend, divisor, remainder);
    twinkie_wiener_sandwich 27;
}
    


==================================================
### FILE: ./backend/projects/default-project/examples/albuquerque_math/albuquerque_calculator.yc
==================================================

// Albuquerque Calculator Example - Modernized
#eat <albuquerque.hat>

spatula want_a_new_duck() {
    spatula a = 10;
    spatula b = 3;
    spatula sum = a + b;
    spatula diff = a - b;
    spatula prod = a * b;
    spatula quot = a / b;
    spatula mod = yoda(a, b);
    perform_a_parody("%spatula + %spatula = %spatula", a, b, sum);
    perform_a_parody("%spatula - %spatula = %spatula", a, b, diff);
    perform_a_parody("%spatula * %spatula = %spatula", a, b, prod);
    perform_a_parody("%spatula / %spatula = %spatula", a, b, quot);
    perform_a_parody("%spatula %% %spatula = %spatula", a, b, mod);
    twinkie_wiener_sandwich 27;
}


==================================================
### FILE: ./backend/projects/default-project/examples/albuquerque_math/README.md
==================================================

# Albuquerque Math Library Examples

This directory contains examples demonstrating the Albuquerque math library functions.

## Files

### `math_demo.yc`
A simple demonstration of trigonometric functions (`sin`, `cos`), random number generation (`random_spatula`), and modulus operations (`yoda`).

**How to run:**
```bash
yankovic program.yc
```

**What it does:**
- Calculates sine and cosine of π/2 radians (90 degrees)
- Generates a random number between 0-99
- Demonstrates the `yoda()` modulus function

**Why this example:**
Shows the basic mathematical operations available in YankoviC beyond the core language operators. The `yoda()` function is particularly important since YankoviC doesn't have a built-in `%` operator for modulus.


==================================================
### FILE: ./backend/projects/default-project/examples/virus_alert/virus_alert_file_management.yc
==================================================

#eat <virus_alert.hat>

spatula want_a_new_duck() {
    legally_named_reggie("old.txt", "new.txt");
    stinky_cheese("delete_me.txt");
    forward_to_a_friend("source.txt", "backup/source_backup.txt");
    verse files = open_every_file(".");
    perform_a_parody("Files: %verse", files);
    spatula viruses = get_virus_count();
    perform_a_parody("Virus count: %spatula", viruses);
    twinkie_wiener_sandwich 0;
}


==================================================
### FILE: ./backend/projects/default-project/examples/basic/simple_addition.yc
==================================================

// Simple Addition - Basic YankoviC Example (Modernized)
spatula want_a_new_duck() {
    spatula first_number = 27;
    spatula second_number = 42;
    spatula result = first_number + second_number;
    spatula difference = first_number - second_number;
    spatula product = first_number * second_number;
    horoscope is_result_positive = (result > 0);
    horoscope numbers_equal = (first_number == second_number);
    stupid spatula LUCKY_NUMBER = 13;

    perform_a_parody("%spatula + %spatula = %spatula", first_number, second_number, result);
    perform_a_parody("%spatula - %spatula = %spatula", first_number, second_number, difference);
    perform_a_parody("%spatula * %spatula = %spatula", first_number, second_number, product);
    perform_a_parody("Is result positive? %horoscope", is_result_positive);
    perform_a_parody("Are numbers equal? %horoscope", numbers_equal);
    perform_a_parody("Lucky number: %spatula", LUCKY_NUMBER);
    twinkie_wiener_sandwich 27;
}
    // Test boolean operations


==================================================
### FILE: ./backend/projects/default-project/examples/basic/cli_ai_chat.yc
==================================================

#eat <weird_wide_web.hat>

// This function will be called for each chunk of the AI's response
spatula stream_handler(verse chunk) {
    string_along(chunk);
    twinkie_wiener_sandwich 0;
}

spatula want_a_new_duck() {
    perform_a_parody("Starting AI chat stream...");

    // Start the amish_mail function in the background
    the_saga_begins("amish_mail", "Write a short, funny song about programming.", "openai", its_a_fact, "stream_handler");

    // You could do other things here while the AI is thinking...
    perform_a_parody("The AI is thinking... I can do other things now!");

    // Now, wait for the streaming to finish
    wait_for_the_saga_to_end();

    perform_a_parody("\\nAI chat stream finished!");
    twinkie_wiener_sandwich 27;
}


==================================================
### FILE: ./backend/projects/default-project/examples/basic/cli_input_example.yc
==================================================

spatula want_a_new_duck() {
    verse name = flesh_eating_weasels("What's your name? ");
    perform_a_parody("Hello, %verse!", name);
    twinkie_wiener_sandwich 0;
}


==================================================
### FILE: ./backend/projects/default-project/examples/basic/README.md
==================================================

# Basic YankoviC Examples

This directory contains fundamental YankoviC programs that don't require any external libraries.

## Files

### `simple_addition.yc`
A basic arithmetic program demonstrating variable declaration, operations, and the main function structure.

**How to run:**
```bash
yankovic program.yc
```

**What it does:**
- Declares `spatula` (integer) variables
- Performs basic arithmetic operations
- Demonstrates the `want_a_new_duck()` main function
- Shows proper `twinkie_wiener_sandwich` return syntax

**Why this example:**
Perfect starting point for learning YankoviC syntax without the complexity of external libraries. Shows the core language structure and basic data types.


==================================================
### FILE: ./backend/projects/default-project/examples/README.md
==================================================

# YankoviC Examples Directory

Welcome to the YankoviC examples! This directory contains various examples of how to code inside of YankoviC!

## Directory Structure

### 📁 `basic/`
Fundamental YankoviC programs using only the core language features.
- No external libraries required
- Perfect for learning basic syntax
- Shows variable declaration, functions, and control flow

### 📁 `albuquerque_math/`
Examples using the Albuquerque math library for mathematical operations.
- Import with: `#eat <albuquerque.hat>`
- Functions: `sin()`, `cos()`, `random_spatula()`, `yoda()`
- Demonstrates mathematical programming in YankoviC

### 📁 `uhf_graphics/`
Graphical programs using the UHF graphics library.
- Import with: `#eat <UHF.hat>`
- Window management, drawing, animation, user input
- **Run with:** `./yankovic -e filename.yc` (Electron mode for graphics)

### 📁 `like_a_server/`
Server-side web development examples using the Like_a_Server library.
- Import with: `#eat <like_a_server.hat>`
- Web servers, routing, request/response handling
- Files have `.ycw` extension (YankoviC Web)

### 📁 `weird_wide_web/`
Client-side web development examples using the Weird_Wide_Web library.
- Import with: `#eat <weird_wide_web.hat>`
- HTML generation, DOM manipulation, styling
- Files have `.ycw` extension (YankoviC Web)

## How to Run Examples

### Basic and Math Examples
```bash
yankovic program.yc
```

### Graphics Examples (UHF)
```bash
./yankovic filename.yc --electron
```

### Web Examples (Like_a_Server, Weird_Wide_Web)
```bash
./yankovic filename.ycw
```

## Learning Path

1. **Start with `basic/`** - Learn core YankoviC syntax and concepts
2. **Try `albuquerque_math/`** - Add mathematical operations to your toolkit
3. **Explore `uhf_graphics/`** - Create visual programs and interactive applications
4. **Build with `like_a_server/`** - Create web servers and APIs
5. **Design with `weird_wide_web/`** - Generate and manipulate HTML/CSS

## Example Categories Explained

### Core Language Features
- Data types: `spatula` (int), `lasagna` (float), `verse` (string), `horoscope` (bool)
- Control flow: `jeopardy` (if), `another_one` (else), `polka` (while), `hardware_store` (for)
- Functions: `want_a_new_duck()` (main), `twinkie_wiener_sandwich` (return)
- Constants: `stupid` (const), `its_a_fact` (true), `total_baloney` (false)

### Library Import Syntax
```yankovic
#eat <library.hat>      // Standard library
#eat "userfile.yc"      // User file with quotes
#eat userfile.yc        // User file without quotes
```

### Comments
```yankovic
// You can do this

/*
or
you
can
do
this!
*/
```

## Tips for Success

1. **Read the READMEs** - Each directory has detailed explanations of what each example does
2. **Start Simple** - Begin with basic examples before moving to complex graphics or web development
3. **Experiment** - Modify the examples to see how changes affect the output
4. **Use the Right Mode** - Graphics examples need `-e` flag, web examples use `.ycw` extension
5. **Check WORDS.md** - The main documentation file explains all functions and their purposes

## Need Help?

- Check `WORDS.md` for complete function documentation
- Read the README in each example directory
- Start with simpler examples and work your way up
- Remember: Despite the humorous naming, YankoviC is a fully functional programming language!


==================================================
### FILE: ./backend/package.json
==================================================

{
  "name": "backend",
  "version": "1.0.0",
  "main": "server.js",
  "type": "module",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "cors": "^2.8.5",
    "express": "^4.19.2",
    "fs-extra": "^11.2.0"
  }
}


==================================================
### FILE: ./backend/package-lock.json
==================================================

{
  "name": "backend",
  "version": "1.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "backend",
      "version": "1.0.0",
      "dependencies": {
        "cors": "^2.8.5",
        "express": "^4.19.2",
        "fs-extra": "^11.2.0"
      }
    },
    "node_modules/accepts": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
      "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
      "license": "MIT",
      "dependencies": {
        "mime-types": "~2.1.34",
        "negotiator": "0.6.3"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/array-flatten": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
      "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg==",
      "license": "MIT"
    },
    "node_modules/body-parser": {
      "version": "1.20.3",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.3.tgz",
      "integrity": "sha512-7rAxByjUMqQ3/bHJy7D6OGXvx/MMc4IqBn/X0fcM1QUcAItpZrBEYhWGem+tzXH90c+G01ypMcYJBO9Y30203g==",
      "license": "MIT",
      "dependencies": {
        "bytes": "3.1.2",
        "content-type": "~1.0.5",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "on-finished": "2.4.1",
        "qs": "6.13.0",
        "raw-body": "2.5.2",
        "type-is": "~1.6.18",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/bytes": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/call-bind-apply-helpers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/call-bound": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/call-bound/-/call-bound-1.0.4.tgz",
      "integrity": "sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "get-intrinsic": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/content-disposition": {
      "version": "0.5.4",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
      "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "5.2.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/content-type": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
      "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie": {
      "version": "0.7.1",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.7.1.tgz",
      "integrity": "sha512-6DnInpx7SJ2AK3+CTUE/ZM0vWTUboZCegxhC2xiIydHR9jNuTAASBrfEpHhiGOZw/nX51bHt6YQl8jsGo4y/0w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie-signature": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
      "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ==",
      "license": "MIT"
    },
    "node_modules/cors": {
      "version": "2.8.5",
      "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
      "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
      "license": "MIT",
      "dependencies": {
        "object-assign": "^4",
        "vary": "^1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/destroy": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
      "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/dunder-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.1",
        "es-errors": "^1.3.0",
        "gopd": "^1.2.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==",
      "license": "MIT"
    },
    "node_modules/encodeurl": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-2.0.0.tgz",
      "integrity": "sha512-Q0n9HRi4m6JuGIV1eFlmvJB7ZEVxu93IrMyiMsGC0lrMJMWzRgx6WGquyfQgZVb31vhGgXnfmPNNXmxnOkRBrg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/es-define-property": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-object-atoms": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==",
      "license": "MIT"
    },
    "node_modules/etag": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
      "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/express": {
      "version": "4.21.2",
      "resolved": "https://registry.npmjs.org/express/-/express-4.21.2.tgz",
      "integrity": "sha512-28HqgMZAmih1Czt9ny7qr6ek2qddF4FclbMzwhCREB6OFfH+rXAnuNCwo1/wFvrtbgsQDb4kSbX9de9lFbrXnA==",
      "license": "MIT",
      "dependencies": {
        "accepts": "~1.3.8",
        "array-flatten": "1.1.1",
        "body-parser": "1.20.3",
        "content-disposition": "0.5.4",
        "content-type": "~1.0.4",
        "cookie": "0.7.1",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "finalhandler": "1.3.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "merge-descriptors": "1.0.3",
        "methods": "~1.1.2",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "path-to-regexp": "0.1.12",
        "proxy-addr": "~2.0.7",
        "qs": "6.13.0",
        "range-parser": "~1.2.1",
        "safe-buffer": "5.2.1",
        "send": "0.19.0",
        "serve-static": "1.16.2",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "type-is": "~1.6.18",
        "utils-merge": "1.0.1",
        "vary": "~1.1.2"
      },
      "engines": {
        "node": ">= 0.10.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/express"
      }
    },
    "node_modules/finalhandler": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.3.1.tgz",
      "integrity": "sha512-6BN9trH7bp3qvnrRyzsBz+g3lZxTNZTbVO2EV1CS0WIcDbawYVdYvGflME/9QP0h0pYlCDBCTjYa9nZzMDpyxQ==",
      "license": "MIT",
      "dependencies": {
        "debug": "2.6.9",
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "statuses": "2.0.1",
        "unpipe": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/forwarded": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fresh": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
      "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fs-extra": {
      "version": "11.3.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-11.3.0.tgz",
      "integrity": "sha512-Z4XaCL6dUDHfP/jT25jJKMmtxvuwbkrD1vNSMFlo9lNLY2c5FHYSQgHPRZUjAB26TpDEoW9HCOgplrdbaPV/ew==",
      "license": "MIT",
      "dependencies": {
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      },
      "engines": {
        "node": ">=14.14"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "function-bind": "^1.1.2",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/gopd": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/graceful-fs": {
      "version": "4.2.11",
      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
      "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==",
      "license": "ISC"
    },
    "node_modules/has-symbols": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "license": "MIT",
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/http-errors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
      "license": "MIT",
      "dependencies": {
        "depd": "2.0.0",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "license": "MIT",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
      "license": "ISC"
    },
    "node_modules/ipaddr.js": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/jsonfile": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.1.0.tgz",
      "integrity": "sha512-5dgndWOriYSm5cnYaJNhalLNDKOqFwyDB/rr1E9ZsGciGvKPs8R2xYGCacuf3z6K1YKDz182fd+fY3cn3pMqXQ==",
      "license": "MIT",
      "dependencies": {
        "universalify": "^2.0.0"
      },
      "optionalDependencies": {
        "graceful-fs": "^4.1.6"
      }
    },
    "node_modules/math-intrinsics": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/media-typer": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
      "integrity": "sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/merge-descriptors": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.3.tgz",
      "integrity": "sha512-gaNvAS7TZ897/rVaZ0nMtAyxNyi/pdbjbAwUpFQpN70GqnVfOiXpeUUMKRBmzXaSQ8DdTX4/0ms62r2K+hE6mQ==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/methods": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
      "integrity": "sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
      "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==",
      "license": "MIT",
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "license": "MIT",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/negotiator": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
      "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-inspect": {
      "version": "1.13.4",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.4.tgz",
      "integrity": "sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/on-finished": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
      "license": "MIT",
      "dependencies": {
        "ee-first": "1.1.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/path-to-regexp": {
      "version": "0.1.12",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.12.tgz",
      "integrity": "sha512-RA1GjUVMnvYFxuqovrEqZoxxW5NUZqbwKtYz/Tt7nXerk0LbLblQmrsgdeOxV5SFHf0UDggjS/bSeOZwt1pmEQ==",
      "license": "MIT"
    },
    "node_modules/proxy-addr": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
      "license": "MIT",
      "dependencies": {
        "forwarded": "0.2.0",
        "ipaddr.js": "1.9.1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/qs": {
      "version": "6.13.0",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.13.0.tgz",
      "integrity": "sha512-+38qI9SOr8tfZ4QmJNplMUxqjbe7LKvvZgWdExBOmd+egZTtjLB67Gu0HRX3u/XOq7UU2Nx6nsjvS16Z9uwfpg==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "side-channel": "^1.0.6"
      },
      "engines": {
        "node": ">=0.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/raw-body": {
      "version": "2.5.2",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.2.tgz",
      "integrity": "sha512-8zGqypfENjCIqGhgXToC8aB2r7YrBX+AQAfIPs/Mlk+BtPTztOvTS01NRW/3Eh60J+a48lt8qsCzirQ6loCVfA==",
      "license": "MIT",
      "dependencies": {
        "bytes": "3.1.2",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
      "license": "MIT"
    },
    "node_modules/send": {
      "version": "0.19.0",
      "resolved": "https://registry.npmjs.org/send/-/send-0.19.0.tgz",
      "integrity": "sha512-dW41u5VfLXu8SJh5bwRmyYUbAoSB3c9uQh6L8h/KtsFREPWpbX1lrljJo186Jc4nmci/sGUZ9a0a0J2zgfq2hw==",
      "license": "MIT",
      "dependencies": {
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "mime": "1.6.0",
        "ms": "2.1.3",
        "on-finished": "2.4.1",
        "range-parser": "~1.2.1",
        "statuses": "2.0.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/send/node_modules/encodeurl": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
      "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/send/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/serve-static": {
      "version": "1.16.2",
      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.16.2.tgz",
      "integrity": "sha512-VqpjJZKadQB/PEbEwvFdO43Ax5dFBZ2UECszz8bQ7pi7wt//PWe1P6MN7eCnjsatYtBT6EuiClbjSWP2WrIoTw==",
      "license": "MIT",
      "dependencies": {
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "parseurl": "~1.3.3",
        "send": "0.19.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==",
      "license": "ISC"
    },
    "node_modules/side-channel": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz",
      "integrity": "sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3",
        "side-channel-list": "^1.0.0",
        "side-channel-map": "^1.0.1",
        "side-channel-weakmap": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-list": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/side-channel-list/-/side-channel-list-1.0.0.tgz",
      "integrity": "sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-map": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/side-channel-map/-/side-channel-map-1.0.1.tgz",
      "integrity": "sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-weakmap": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/side-channel-weakmap/-/side-channel-weakmap-1.0.2.tgz",
      "integrity": "sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3",
        "side-channel-map": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/statuses": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/type-is": {
      "version": "1.6.18",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
      "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
      "license": "MIT",
      "dependencies": {
        "media-typer": "0.3.0",
        "mime-types": "~2.1.24"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/universalify": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.1.tgz",
      "integrity": "sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==",
      "license": "MIT",
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/utils-merge": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
      "integrity": "sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    }
  }
}


==================================================
### FILE: ./README.md
==================================================

# 🎵 YankoviC Programming Language v1.2.0 

*A Programming Language for those who "Dare to be stupid"*

Welcome to **YankoviC**, the most ridiculously awesome programming language inspired by the legendary "Weird Al" Yankovic! YankoviC combines the power of structured programming with the whimsy of polka music and the humor of the world's greatest musical parodist.
<img src="backend/projects/images/YankoviC_logo.png" width="720">
### ✅ What's Working:
- **Complete CLI and IDE** - Full development environment with AI assistant
- **Graphics Programming** - UHF graphics library with animations and games  
- **Web Development** - Like_a_Server library with real HTTP server functionality
- **Math Library** - Comprehensive Albuquerque math functions
- **File Management** - Project structure with examples and documentation
- **Cross-Platform** - Works on Windows, macOS, and Linux

## 🎪 Table of Contents

- [🎵 YankoviC Programming Language v1.1.0](#-yankovic-programming-language-v110)
  - [🎪 Table of Contents](#-table-of-contents)
  - [🚀 Quick Start](#-quick-start)
  - [🎯 Installation \& Setup](#-installation--setup)
    - [Prerequisites](#prerequisites)
    - [Installation](#installation)
    - [Starting the Accordion IDE](#starting-the-accordion-ide)
    - [CLI Usage](#cli-usage)
  - [🎼 Language Syntax](#-language-syntax)
    - [Basic Program Structure](#basic-program-structure)
    - [Data Types](#data-types)
    - [Variable Declarations](#variable-declarations)
    - [Functions](#functions)
    - [Control Flow](#control-flow)
    - [Comments](#comments)
    - [Operators](#operators)
  - [📚 Standard Libraries](#-standard-libraries)
    - [UHF Graphics Library](#uhf-graphics-library)
    - [Weird Math Library](#weird-math-library)
  - [📁 File Management \& Imports](#-file-management--imports)
    - [Hat Files (.hat)](#hat-files-hat)
    - [Import Syntax](#import-syntax)
    - [Visibility Modifiers](#visibility-modifiers)
  - [🏢 The Accordion IDE](#-the-accordion-ide)
    - [File Explorer ("Filing Cabinet")](#file-explorer-filing-cabinet)
    - [Code Editor](#code-editor)
    - [Console](#console)
    - [AI Assistant](#ai-assistant)
  - [🎨 Graphics Programming with UHF](#-graphics-programming-with-uhf)
  - [📖 Example Programs](#-example-programs)
    - [Hello World](#hello-world)
    - [Random Number Generator](#random-number-generator)
    - [Graphics Animation](#graphics-animation)
  - [🐛 Error Messages](#-error-messages)
  - [🤝 Contributing](#-contributing)
  - [📜 License](#-license)

## 🚀 Quick Start

```yankovic
// Your first YankoviC program
spatula want_a_new_duck() {
    perform_a_parody("Welcome to YankoviC! Dare to be stupid!\n");
    twinkie_wiener_sandwich 27;
}
```

## 🎯 Installation & Setup

### Prerequisites
- Node.js 18+ 
- npm or yarn

### Installation
Run the following command to install all dependencies, set up the environment, and add YankoviC to your PATH for global CLI use:

```bash
./install.sh
```

This installer only works for Linux (Maybe MacOS idk), windows users will have to open it up and do it all manually

### Starting the Accordion IDE
You can run the accordion anywhere!
```bash
yankovic --accordion
```

### CLI Usage
You can now run YankoviC programs globally using:

```bash
yankovic program.yc
```

### Help
If you need to figure out something with YankoviC, use the help command!
```bash
yankovic --help
```

### Demos
The examples folder has plenty of examples, but if you want to see the full power of YankoviC, run this!
```bash
yankovic --demo
```

## 🆕 **Latest Features - v1.1.0 Release**

### 🌐 **Web Development Ready!**
YankoviC now includes a complete web development stack:

```yankovic
#eat like_a_server.hat

spatula want_a_new_duck() {
    // Start a real HTTP server
    amish_barn_raising(3000);
    
    // Set up routes  
    amish_buggy_trail_get("/", "welcome_page");
    amish_barn_delivery_post("/api/data", "handle_data");
    
    // Keep server running
    polka (its_a_fact) {
        jeopardy (amish_barn_still_standing()) {
            wait_for_a_moment(1000);
        }
    }
    
    twinkie_wiener_sandwich 27;
}
```

**Real HTTP Server Features:**
- ✅ GET, POST, PUT, DELETE routes
- ✅ JSON and HTML responses  
- ✅ CORS support
- ✅ Middleware/helpers
- ✅ Session management
- ✅ Database operations

### 🎨 **Enhanced Graphics Programming**
```yankovic
#eat UHF.hat

spatula want_a_new_duck() {
    start_the_show(800, 600, "My Game");
    
    polka (!the_shows_over()) {
        roll_the_camera();
        
        // Draw animated graphics
        pick_a_hawaiian_shirt(AL_RED);
        draw_a_spamsicle(100, 100, 50, 50);
        
        // NEW: Display images and play media
        fat_frame("al.jpeg", 200, 100, 400, 400);
        Lossless_Laughter("background_music.mp3", "audio");
        
        that_is_a_wrap();
    }
    
    twinkie_wiener_sandwich 27;
}
```

### 🔧 **Improved CLI**
- **Global Installation**: `yankovic program.yc` works anywhere
- **Better Error Messages**: More helpful debugging information  
- **Cross-Platform**: Works on Windows, macOS, and Linux
- **Graphics Modes**: PNG export, Electron windows, ASCII art, headless

### � **Organized Project Structure**
```
YankoviC/
├── 📄 README.md              # Main documentation  
├── 📄 WORDS.md               # Complete language reference
├── 📄 UHF_CHANNELS.md        # Graphics mode documentation
├── 🔧 install.sh             # Automated installer
├── 🚀 yankovic               # Global CLI command
├── 📁 backend/               # Backend server
├── 📁 frontend/              # Web IDE interface  
├── 📁 electron/              # Desktop app components
└── 📁 examples/              # Working example programs
    ├── like_a_server/        # ✅ Web server examples
    ├── weird_wide_web/       # ✅ Client-side web development
    ├── uhf_graphics/         # ✅ Graphics programming
    ├── albuquerque_math/     # ✅ Mathematics examples
    └── basic/                # ✅ Language fundamentals
```

### 🧪 **All Examples Tested & Working**
- ✅ **Web Server**: Real HTTP server with routes and endpoints
- ✅ **Graphics**: Animations, games, and interactive UIs
- ✅ **Math**: Complex calculations and algorithms  
- ✅ **Basic**: Core language features and syntax
- ✅ **Web Development**: Client-side page generation
- ✅ **Multimedia**: Image display and audio/video playback

- **Improved CLI Output Handling**: The `cli_output` folder is now only created in PNG mode.
- **Updated Web Server Example**: The `amish_web_server.ycw` example now uses a `polka` loop to keep the server running.
- **Streamlined Installation**: The `install.sh` script now handles all setup steps, including adding YankoviC to the PATH.

## 🎼 Language Syntax

### Basic Program Structure

Every YankoviC program must have a main function called `want_a_new_duck`:

```yankovic
spatula want_a_new_duck() {
    // Your code here
    twinkie_wiener_sandwich 27; // Return success
}
```

### Data Types

YankoviC uses Weird Al-themed data types:

| Type | Description | Example |
|------|-------------|---------|
| `spatula` | Integer numbers | `spatula count = 42;` |
| `lasagna` | Floating-point numbers | `lasagna price = 3.14;` |
| `lyric` | Single character | `lyric grade = 'A';` |
| `verse` | Text strings | `verse song = "Eat It";` |
| `horoscope` | Boolean values | `horoscope is_weird = its_a_fact;` |
| `accordion_solo` | Arrays/collections | `accordion_solo items;` |

**Boolean Values:**
- `its_a_fact` = true
- `total_baloney` = false

### Variable Declarations

```yankovic
// Mutable variables
spatula age = 25;
verse name = "Alfred";

// Immutable variables (constants)
stupid spatula MAX_POLKAS = 100;
stupid verse ALBUM_NAME = "Dare to be Stupid";
```

### Functions

```yankovic
// Function with return type and parameters
verse make_parody(verse original, spatula intensity) {
    verse result = "♪ " + original + " ♪";
    twinkie_wiener_sandwich result;
}

// Function call
spatula want_a_new_duck() {
    verse my_song = make_parody("Beat It", 11);
    perform_a_parody("New song: %verse\\n", my_song);
    twinkie_wiener_sandwich 27;
}
```

### Control Flow

**If Statements (Jeopardy):**
```yankovic
jeopardy (age >= 18) {
    perform_a_parody("You're an adult!\\n");
} another_one {
    perform_a_parody("Still a kid!\\n");
}
```

**For Loops (Hardware Store):**
```yankovic
hardware_store (spatula i = 0; i < 10; i = i + 1) {
    perform_a_parody("Count: %spatula\\n", i);
}
```

**Game Loops (Polka):**
```yankovic
// Frame-based animation loop
polka (!the_shows_over()) {
    roll_the_camera();
    // Draw stuff here
    that_is_a_wrap();
}
```

### Comments

```yankovic
// Single-line comments
/* Multi-line
   comments */

// Comments can appear anywhere, even above import statements!
// This is totally fine:
#eat "my_library.hat"
```

### Operators

| Operator | Description | Example |
|----------|-------------|---------|
| `+` `-` `*` `/` `%` | Arithmetic | `result = a + b * c % d;` |
| `==` `!=` `<` `>` `<=` `>=` | Comparison | `jeopardy (x == 42)` |
| `&&` `!` | Logical | `jeopardy (x > 0 && y < 10)` |
| `=` | Assignment | `x = 5;` |

## 📚 Standard Libraries

### UHF Graphics Library

Import with: `#eat <UHF.hat>`

**Window Management:**
```yankovic
start_the_show(800, 600, "My Awesome Window"); // Create window
cancel_the_show();                            // Close window
horoscope over = the_shows_over();            // Check if window closed
```

**Drawing Functions:**
```yankovic
roll_the_camera();                     // Start new frame
paint_the_set(YELLOW_MUSTARD);         // Set background color
pick_a_hawaiian_shirt(ORANGE_CHEESE);  // Set draw color
draw_a_big_ol_wheel_of_cheese(x, y, radius);  // Draw circle
draw_a_spamsicle(x, y, width, height); // Draw rectangle
that_is_a_wrap();                      // End frame
```

**Built-in Colors:**
- `YELLOW_MUSTARD` - Classic yellow
- `ORANGE_CHEESE` - Bright orange  
- `TWINKIE_GOLD` - Golden yellow
- `SKY_BLUE_FOR_YOU` - Light blue

**Animation Loop:**
```yankovic
#eat <UHF.hat>

spatula want_a_new_duck() {
    start_the_show(800, 600, "Bouncing Ball");
    set_polka_speed(60); // 60 FPS
    
    spatula x = 100;
    spatula dx = 5;
    
    polka (!the_shows_over()) {
        roll_the_camera();
        paint_the_set(SKY_BLUE_FOR_YOU);
        pick_a_hawaiian_shirt(ORANGE_CHEESE);
        draw_a_big_ol_wheel_of_cheese(x, 300, 50);
        
        x = x + dx;
        jeopardy (x > 750 || x < 50) {
            dx = -dx;
        }
        
        that_is_a_wrap();
    }
    twinkie_wiener_sandwich 27;
}
```

**Note on 3D Support:** Currently, UHF only supports 2D rendering. 3D support might be added in future versions if there's demand!

### Weird Math Library

Import with: `#eat <albuquerque.hat>`

**Functions:**
```yankovic
spatula random_spatula();                    // Random number 0-99
lasagna sin(lasagna angle);                  // Sine function
lasagna cos(lasagna angle);                  // Cosine function
spatula yoda(spatula a, spatula b);          // Modulus operation (remainder)
// More functions coming in future versions!
```

## 📁 File Management & Imports

### Import Rules (IMPORTANT!)
- `#eat <library.hat>` or `#eat <library>`: Loads a built-in or user library. The extension is optional for built-ins.
- `#eat "userlib.hat"`: Loads a user-made library file. **Quoted imports only work for .hat files!**
- `#eat userlib.yc`: Loads a user-made code file. **Unquoted imports work for both .hat and .yc files.**
- `#eat "userlib.yc"` is NOT valid and will not work.

> **Summary:**
> - Use quotes only for `.hat` files: `#eat "my_lib.hat"`
> - For `.yc` files, do NOT use quotes: `#eat my_code.yc`
> - Built-in libraries can be imported with or without extension and without quotes.

If you try to import a `.yc` file with quotes, the interpreter will not find it!

### Hat Files (.hat)

Hat files are YankoviC's library format.

```yankovic
// my_utilities.hat
on_the_menu verse make_joke(verse setup) {
    verse punchline = setup + "... NOT!";
    twinkie_wiener_sandwich punchline;
}

private_stash spatula secret_number() {
    twinkie_wiener_sandwich 42; // Only visible within this file
}
```

### Import Syntax

```yankovic
#eat <UHF.hat>                    // Built-in library
#eat "lib/my_utilities.hat"       // Custom library from the projects folder
#eat "./helpers/math_stuff.hat"   // Relative path
```

### Visibility Modifiers

- `on_the_menu` - Public functions (exported)
- `private_stash` - Private functions (internal only)

```yankovic
// In a .hat file:
on_the_menu verse public_function() {
    twinkie_wiener_sandwich "Everyone can use this!";
}

private_stash verse internal_helper() {
    twinkie_wiener_sandwich "Only this file can use this";
}
```

## 🏢 The Accordion IDE

The **Accordion IDE** provides a complete development environment for YankoviC programming.

### File Explorer ("Filing Cabinet")

- 📁 **Create folders**: Right-click → "New Folder"
- 📄 **Create files**: Right-click → "New File" 
- 🗑️ **Delete items**: Click the delete button (with confirmation)
- 🔄 **Refresh**: Auto-refreshes when files change
- 📂 **Browse projects**: Navigate through your YankoviC projects

### Code Editor

- **Syntax highlighting** for YankoviC keywords
- **Auto-save** functionality
- **Error highlighting** for syntax issues
- **Multi-file editing** with tabs

### Console

- **Program output** from `perform_a_parody()` calls
- **Error messages** with helpful details
- **Execution status** with exit codes
- **Interactive feedback** for running programs

### AI Assistant

- **Code help** and suggestions
- **Tab Autocomplete** using pollinations, so you can code with ease
- **Syntax explanations** 
- **Debugging assistance** with the Al-manac
- **Best practices** recommendations

## 🎨 Graphics Programming with UHF

UHF (Ultra High Frequency) is YankoviC's graphics library, inspired by Weird Al's movie "UHF". Here's a complete graphics program:

```yankovic
#eat <UHF.hat>

spatula want_a_new_duck() {
    // Create a window
    start_the_show(800, 600, "Weird Al's Graphic Adventure");
    set_polka_speed(30); // 30 FPS
    
    spatula frame_count = 0;
    
    polka (!the_shows_over()) {
        roll_the_camera();
        
        // Animated background
        paint_the_set(TWINKIE_GOLD);
        
        // Draw spinning cheese wheels
        spatula angle = frame_count * 5;
        spatula center_x = 400;
        spatula center_y = 300;
        
        hardware_store (spatula i = 0; i < 8; i = i + 1) {
            spatula x = center_x + cos(angle + i * 45) * 150;
            spatula y = center_y + sin(angle + i * 45) * 150;
            
            pick_a_hawaiian_shirt(ORANGE_CHEESE);
            draw_a_big_ol_wheel_of_cheese(x, y, 30);
        }
        
        frame_count = frame_count + 1;
        that_is_a_wrap();
    }
    
    twinkie_wiener_sandwich 27;
}
```

## 📖 Example Programs

### Dare To Be Stupid

```yankovic
spatula want_a_new_duck() {
    perform_a_parody("Hello, Weird World!\\n\\nDare to be stupid!");
    twinkie_wiener_sandwich 27;
}
```

### Random Number Generator

```yankovic
#eat "lib/random_helpers.hat"

spatula want_a_new_duck() {
    verse numbers = generate_random_list(5, 1, 100);
    perform_a_parody("Random numbers: %verse\\n", numbers);
    twinkie_wiener_sandwich 27;
}
```

### Graphics Animation

```yankovic
#eat <UHF.hat>

spatula want_a_new_duck() {
    start_the_show(400, 300, "Polka Dots");
    set_polka_speed(60);
    
    spatula dot_x = 200;
    spatula dot_y = 150;
    
    polka (!the_shows_over()) {
        roll_the_camera();
        paint_the_set(SKY_BLUE_FOR_YOU);
        
        pick_a_hawaiian_shirt(YELLOW_MUSTARD);
        draw_a_big_ol_wheel_of_cheese(dot_x, dot_y, 25);
        
        // Move the dot randomly
        dot_x = dot_x + (random_spatula() % 21) - 10;
        dot_y = dot_y + (random_spatula() % 21) - 10;
        
        // Keep dot on screen
        jeopardy (dot_x < 25) dot_x = 25;
        jeopardy (dot_x > 375) dot_x = 375;
        jeopardy (dot_y < 25) dot_y = 25;
        jeopardy (dot_y > 275) dot_y = 275;
        
        that_is_a_wrap();
    }
    
    twinkie_wiener_sandwich 27;
}
```


### TODO List

This is a list for things that I need to do, but feel free to open a PR with the feature!

| Feature | Description | Why |
| --- | --- | ---|
| Reverse Interpeter | Converting Javascript, HTML, CSS, and Python files to YankoviC | Why not port everything to YankoviC? |
| Try / Except | Add Try / Except with `do_i_creep_you_out` and catching with `creeped_out` | Everything has to work, so a lot of conditionals fail |
| Sleep | Add a `stop_forwarding_that_crap` to waste time | You will need to have delays eventually |
| Async | Add `saga_begins` to start an async, awaited with something | You need async and synchronous stuff |
| More I am sure | I am tired, feel free to add whatever you want. | If it is Weird Al inspired I will probably merge. |

==================================================
### FILE: ./collect_all.sh
==================================================

#!/bin/bash

# --- Configuration ---
# The name of the final merged file.
OUTPUT_FILE="merged.txt"

# An array of directory NAMES to exclude recursively.
# This will match the name anywhere in the directory tree.
EXCLUDE_NAMES=("node_modules" ".git" ".history")

# An array of file name PATTERNS to exclude.
# Use wildcards (*) to match file extensions.
EXCLUDE_PATTERNS=("*.png" "*.gif" "*.jpg" "*.jpeg" "*.ico" "*.svg" "*.pdf" "*.zip" "*.gz")


# --- Script Logic ---

# Check if the find command is available
if ! command -v find &> /dev/null
then
    echo "Error: 'find' command not found. This script requires it to run."
    exit 1
fi

echo "Starting file merge process..."
echo "Excluding directories named: ${EXCLUDE_NAMES[*]}"
echo "Excluding file patterns:   ${EXCLUDE_PATTERNS[*]}"
echo "Output will be saved to:     $OUTPUT_FILE"

# Create or clear the output file to ensure we start fresh
> "$OUTPUT_FILE"


# --- Build the 'find' command arguments dynamically ---

# 1. Build arguments for directory exclusions to prune
find_dir_exclude_args=()
if [ ${#EXCLUDE_NAMES[@]} -gt 0 ]; then
    for name in "${EXCLUDE_NAMES[@]}"; do
        if [ ${#find_dir_exclude_args[@]} -gt 0 ]; then
            find_dir_exclude_args+=(-o) # Add OR operator
        fi
        find_dir_exclude_args+=(-name "$name")
    done
fi

# 2. Build arguments for the final file selection (including pattern exclusions)
# Start with the basic requirement: it must be a file.
find_file_select_args=(-type f)
if [ ${#EXCLUDE_PATTERNS[@]} -gt 0 ]; then
    for pattern in "${EXCLUDE_PATTERNS[@]}"; do
        # Add a "NOT" condition for each pattern
        find_file_select_args+=(-not -name "$pattern")
    done
fi


# --- Execute the 'find' command and process the results ---

# The find command is constructed based on whether there are directories to exclude.
if [ ${#find_dir_exclude_args[@]} -gt 0 ]; then
    # Case 1: We have directories to prune.
    # The logic is: (find and prune these dirs) OR (find files matching our criteria)
    find . \( "${find_dir_exclude_args[@]}" \) -prune -o \( "${find_file_select_args[@]}" \) -print0
else
    # Case 2: No directories to prune, just find files matching the criteria.
    find . \( "${find_file_select_args[@]}" \) -print0
fi | while IFS= read -r -d '' file; do
    # --- Safety Check ---
    # Skip the output file itself to prevent it from including its own content.
    if [ "$file" == "./$OUTPUT_FILE" ]; then
        continue
    fi

    echo "Adding: $file"

    # Append a clear header for each file into the output file
    echo "==================================================" >> "$OUTPUT_FILE"
    echo "### FILE: $file" >> "$OUTPUT_FILE"
    echo "==================================================" >> "$OUTPUT_FILE"
    echo "" >> "$OUTPUT_FILE"

    # Append the actual content of the file
    cat "$file" >> "$OUTPUT_FILE"

    # Append two newlines for separation
    echo "" >> "$OUTPUT_FILE"
    echo "" >> "$OUTPUT_FILE"
done

echo "----------------------------------------"
echo "✅ Process complete!"
echo "All matching file contents have been merged into '$OUTPUT_FILE'."


