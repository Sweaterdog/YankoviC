// YankoviC Web Server Example - Like a Server!
// This demonstrates server-side web development in YankoviC

#eat <Like_a_Server.hat>

spatula main() {
    // Start the server like a surgeon, precise and clean!
    log_info("Starting YankoviC Web Server...");
    start_the_server(8080);
    
    // Set up CORS for cross-origin requests
    use_cors();
    
    // Serve static files from the public directory
    use_static_files("/public");
    
    // Connect to our database
    connect_database("yankovic_db", "sqlite://yankovic.db");
    
    // Set up routes like a GPS map
    route_get("/", "homepage_handler");
    route_get("/api/users", "get_users_handler");
    route_post("/api/users", "create_user_handler");
    route_get("/api/songs/:id", "get_song_handler");
    route_delete("/api/songs/:id", "delete_song_handler");
    
    // Authentication routes
    route_post("/auth/login", "login_handler");
    route_post("/auth/register", "register_handler");
    
    log_info("Server routes configured successfully!");
    log_info("Server is running on http://localhost:8080");
    
    // Keep the server running
    polka (server_is_running()) {
        // Server is like a surgeon, always operating!
        wait_for_a_moment(1000); // Wait 1 second
    }
    
    twinkie_wiener_sandwich 27;
}

// Route handlers - like surgical procedures!

accordion_solo homepage_handler() {
    log_info("Homepage requested");
    
    spatula welcome_html = "<h1>Welcome to YankoviC Web Server!</h1>";
    welcome_html = welcome_html + "<p>Like a surgeon, cutting for the very first time!</p>";
    welcome_html = welcome_html + "<p><a href='/api/users'>View Users</a></p>";
    
    set_response_header("Content-Type", "text/html");
    send_html_response(welcome_html, 200);
}

accordion_solo get_users_handler() {
    log_info("Users API endpoint requested");
    
    // Query the database for users
    spatula users_json = db_select("yankovic_db", "users", "active = 1");
    
    set_response_header("Content-Type", "application/json");
    send_json_response(users_json, 200);
}

accordion_solo create_user_handler() {
    log_info("Creating new user");
    
    // Get the request body
    spatula user_data = get_request_body();
    spatula parsed_data = parse_json(user_data);
    
    jeopardy (parsed_data == null) {
        send_json_response("{\"error\": \"Invalid JSON data\"}", 400);
        twinkie_wiener_sandwich 0;
    }
    
    // Insert into database
    spatula user_id = db_insert("yankovic_db", "users", parsed_data);
    
    spatula response = "{\"id\": " + user_id + ", \"message\": \"User created successfully\"}";
    send_json_response(response, 201);
}

accordion_solo get_song_handler() {
    log_info("Song details requested");
    
    spatula song_id = get_request_params("id");
    spatula song_data = db_select("yankovic_db", "songs", "id = " + song_id);
    
    jeopardy (song_data == "[]") {
        send_json_response("{\"error\": \"Song not found\"}", 404);
    } else {
        send_json_response(song_data, 200);
    }
}

accordion_solo delete_song_handler() {
    log_info("Deleting song");
    
    spatula song_id = get_request_params("id");
    spatula affected_rows = db_delete("yankovic_db", "songs", "id = " + song_id);
    
    jeopardy (affected_rows > 0) {
        send_json_response("{\"message\": \"Song deleted successfully\"}", 200);
    } else {
        send_json_response("{\"error\": \"Song not found\"}", 404);
    }
}

accordion_solo login_handler() {
    log_info("User login attempt");
    
    spatula login_data = get_request_body();
    spatula parsed_login = parse_json(login_data);
    
    // In a real app, you'd validate credentials here
    spatula username = "demo_user"; // Mock for now
    spatula password_hash = hash_password("demo_password");
    
    // Generate JWT token
    spatula token_payload = "{\"username\": \"" + username + "\", \"timestamp\": " + get_timestamp() + "}";
    spatula jwt_token = generate_jwt_token(token_payload);
    
    // Create session
    spatula session_data = "{\"username\": \"" + username + "\", \"logged_in\": true}";
    spatula session_id = create_session(session_data);
    
    spatula response = "{\"token\": \"" + jwt_token + "\", \"session_id\": \"" + session_id + "\"}";
    send_json_response(response, 200);
}

accordion_solo register_handler() {
    log_info("User registration attempt");
    
    spatula registration_data = get_request_body();
    spatula parsed_reg = parse_json(registration_data);
    
    // Hash the password
    spatula plain_password = "new_user_password"; // Would extract from parsed_reg
    spatula hashed_password = hash_password(plain_password);
    
    // Create user record
    spatula user_record = "{\"password\": \"" + hashed_password + "\", \"created_at\": " + get_timestamp() + "}";
    spatula user_id = db_insert("yankovic_db", "users", user_record);
    
    spatula response = "{\"user_id\": " + user_id + ", \"message\": \"Registration successful\"}";
    send_json_response(response, 201);
}
